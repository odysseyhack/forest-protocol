// Code generated by go-swagger; DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/loads"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"

	"gitlab.com/henkvanramshorst/forest/backend-api/gen/api/operations"
)

type contextKey string

const AuthKey contextKey = "Auth"

//go:generate mockery -name OperationsAPI -inpkg

// OperationsAPI
type OperationsAPI interface {
	// CreateRecipeProposals is Create a number of recipes based on the inputs
	CreateRecipeProposals(params operations.CreateRecipeProposalsParams) middleware.Responder
	GetLocationBasedData(params operations.GetLocationBasedDataParams) middleware.Responder
	SelectRecipe(params operations.SelectRecipeParams) middleware.Responder
}

// Config is configuration for Handler
type Handlers struct {
	OperationsAPI
	// InnerMiddleware is for the handler executors. These do not apply to the swagger.json document.
	// The middleware executes after routing but before authentication, binding and validation
	InnerMiddleware func(http.Handler) http.Handler

	// Authorizer is used to authorize a request after the Auth function was called using the "Auth*" functions
	// and the principal was stored in the context in the "AuthKey" context value.
	Authorizer func(*http.Request, interface{}) error
}

// Handler returns an http.Handler given the handler configuration
// It mounts all the business logic implementers in the right routing.
func Handler(c Handlers) (http.Handler, error) {
	h, _, err := HandlerAPI(c)
	return h, err
}

// HandlerAPI returns an http.Handler given the handler configuration
// and the corresponding *ForestProtocol instance.
// It mounts all the business logic implementers in the right routing.
func HandlerAPI(c Handlers) (http.Handler, *operations.ForestProtocolAPI, error) {
	spec, err := loads.Analyzed(swaggerCopy(SwaggerJSON), "")
	if err != nil {
		return nil, nil, fmt.Errorf("analyze swagger: %v", err)
	}
	api := operations.NewForestProtocolAPI(spec)
	api.ServeError = errors.ServeError

	api.JSONConsumer = runtime.JSONConsumer()
	api.JSONProducer = runtime.JSONProducer()
	api.CreateRecipeProposalsHandler = operations.CreateRecipeProposalsHandlerFunc(func(params operations.CreateRecipeProposalsParams) middleware.Responder {
		return c.OperationsAPI.CreateRecipeProposals(params)
	})
	api.GetLocationBasedDataHandler = operations.GetLocationBasedDataHandlerFunc(func(params operations.GetLocationBasedDataParams) middleware.Responder {
		return c.OperationsAPI.GetLocationBasedData(params)
	})
	api.SelectRecipeHandler = operations.SelectRecipeHandlerFunc(func(params operations.SelectRecipeParams) middleware.Responder {
		return c.OperationsAPI.SelectRecipe(params)
	})
	api.ServerShutdown = func() {}
	return api.Serve(c.InnerMiddleware), api, nil
}

// swaggerCopy copies the swagger json to prevent data races in runtime
func swaggerCopy(orig json.RawMessage) json.RawMessage {
	c := make(json.RawMessage, len(orig))
	copy(c, orig)
	return c
}

// authorizer is a helper function to implement the runtime.Authorizer interface.
type authorizer func(*http.Request, interface{}) error

func (a authorizer) Authorize(req *http.Request, principal interface{}) error {
	if a == nil {
		return nil
	}
	return a(req, principal)
}
