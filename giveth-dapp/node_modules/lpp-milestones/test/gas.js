/* eslint-env mocha */
/* eslint-disable no-await-in-loop */
const Ganache = require('ganache-cli');
const { assert } = require('chai');
const { LPMilestone, BridgedMilestone, MilestoneFactory } = require('../index');
const {
  Kernel,
  ACL,
  LPVault,
  LPFactory,
  test,
  LiquidPledgingState,
} = require('giveth-liquidpledging');
const { ForeignGivethBridge } = require('giveth-bridge');
const { MiniMeToken, MiniMeTokenFactory, MiniMeTokenState } = require('minimetoken');
const Web3 = require('web3');
const { StandardTokenTest, assertFail, deployLP } = test;

const { utils } = Web3;

describe('gas test', function () {
  // this.timeout(0);

  // let testrpc;
  // let web3;
  // let accounts;
  // let liquidPledging;
  // let liquidPledgingState;
  // let kernel;
  // let vault;
  // let bridge;
  // let lpManager;
  // let giver1;
  // let delegate1;
  // let milestoneManager1;
  // let recipient1;
  // let recipient2;
  // let reviewer1;
  // let reviewer2;
  // let campaignReviewer1;
  // let campaignReviewer2;
  // let reviewTimeoutSeconds = 5 * 24 * 60 * 60; // 5 days
  // let reviewTimeout;
  // let maxAmount = 10000000;
  // let idReceiver = 1;
  // let idGiver1;
  // let newReviewer;
  // let newRecipient;
  // let completed;

  // before(async () => {
  //   testrpc = Ganache.server({
  //     ws: true,
  //     gasLimit: 9000000,
  //     total_accounts: 11,
  //   });

  //   testrpc.listen(8545, '127.0.0.1', err => { });

  //   web3 = new Web3('ws://localhost:8545');
  //   accounts = await web3.eth.getAccounts();

  //   giver2 = accounts[3];
  //   milestoneManager1 = accounts[4];
  //   recipient1 = accounts[5];
  //   reviewer1 = accounts[6];
  //   campaignReviewer1 = accounts[7];
  //   recipient2 = accounts[8];
  //   reviewer2 = accounts[9];
  //   campaignReviewer2 = accounts[10];

  //   const deployment = await deployLP(web3);
  //   giver1 = deployment.giver1;
  //   vault = deployment.vault;
  //   liquidPledging = deployment.liquidPledging;
  //   liquidPledgingState = deployment.liquidPledgingState;

  //   // set permissions
  //   kernel = new Kernel(web3, await liquidPledging.kernel());
  //   acl = new ACL(web3, await kernel.acl());
  //   await acl.createPermission(
  //     accounts[0],
  //     vault.$address,
  //     await vault.CANCEL_PAYMENT_ROLE(),
  //     accounts[0],
  //     { $extraGas: 200000 },
  //   );
  //   await acl.createPermission(
  //     accounts[0],
  //     vault.$address,
  //     await vault.SET_AUTOPAY_ROLE(),
  //     accounts[0],
  //     { $extraGas: 200000 },
  //   );

  //   await vault.setAutopay(true, { from: accounts[0], $extraGas: 100000 });

  //   const tokenFactory = await MiniMeTokenFactory.new(web3, { gas: 3000000 });

  //   // generate token for Giver
  //   giver1Token = await MiniMeToken.new(
  //     web3,
  //     tokenFactory.$address,
  //     0,
  //     0,
  //     'Giver Token',
  //     18,
  //     'GT',
  //     true,
  //   );
  //   await giver1Token.generateTokens(giver1, web3.utils.toWei('1000'));
  //   await giver1Token.approve(liquidPledging.$address, '0xFFFFFFFFFFFFFFFF', { from: giver1 });

  //   bridge = await ForeignGivethBridge.new(
  //     web3,
  //     accounts[0],
  //     accounts[0],
  //     tokenFactory.$address,
  //     liquidPledging.$address,
  //     accounts[0],
  //     [0],
  //     [giver1Token.$address],
  //     { from: accounts[0], $extraGas: 100000 },
  //   );

  //   await kernel.setApp(
  //     await kernel.APP_ADDR_NAMESPACE(),
  //     utils.keccak256('ForeignGivethBridge'),
  //     bridge.$address,
  //     { $extraGas: 200000 },
  //   );

  //   await giver1Token.changeController(bridge.$address);
  // });

  // after(done => {
  //   testrpc.close();
  //   done();
  // });

  // it('Should deploy LiquidPledging contract', async () => {
  //   // generate random token
  //   someRandomToken = await StandardTokenTest.new(web3);
  //   await someRandomToken.mint(giver1, web3.utils.toWei('1000'));
  //   await someRandomToken.approve(liquidPledging.$address, '0xFFFFFFFFFFFFFFFF', { from: giver1 });

  //   factory = await MilestoneFactory.new(web3, kernel.$address, { $extraGas: 100000 });

  //   await acl.grantPermission(
  //     factory.$address,
  //     acl.$address,
  //     await acl.CREATE_PERMISSIONS_ROLE(),
  //     {
  //       $extraGas: 100000,
  //     },
  //   );
  //   await acl.grantPermission(
  //     factory.$address,
  //     kernel.$address,
  //     await kernel.APP_MANAGER_ROLE(),
  //     { $extraGas: 100000 },
  //   );
  //   await acl.grantPermission(
  //     factory.$address,
  //     liquidPledging.$address,
  //     await liquidPledging.PLUGIN_MANAGER_ROLE(),
  //     { $extraGas: 100000 },
  //   );

  //   const lpMilestoneApp = await LPMilestone.new(web3);
  //   await kernel.setApp(
  //     await kernel.APP_BASES_NAMESPACE(),
  //     await factory.LP_MILESTONE_APP_ID(),
  //     lpMilestoneApp.$address,
  //     { $extraGas: 100000 },
  //   );

  //   const bridgedMilestoneApp = await BridgedMilestone.new(web3);
  //   await kernel.setApp(
  //     await kernel.APP_BASES_NAMESPACE(),
  //     await factory.BRIDGED_MILESTONE_APP_ID(),
  //     bridgedMilestoneApp.$address,
  //     { $extraGas: 100000 },
  //   );

  //   await factory.newBridgedMilestone(
  //     'BridgedMilestone 1',
  //     'URL1',
  //     0,
  //     reviewer1,
  //     recipient1,
  //     milestoneManager1,
  //     maxAmount,
  //     // 0,
  //     giver1Token.$address,
  //     reviewTimeoutSeconds,
  //   );

  //   const lpState = await liquidPledgingState.getState();
  //   assert.equal(lpState.admins.length, 2);
  //   lpManager = lpState.admins[1];

  //   milestone = new BridgedMilestone(web3, lpManager.plugin);

  //   assert.equal(lpManager.type, 'Project');
  //   assert.equal(lpManager.addr, milestone.$address);
  //   assert.equal(lpManager.name, 'BridgedMilestone 1');
  //   assert.equal(lpManager.commitTime, '0');
  //   assert.equal(lpManager.canceled, false);
  // });

  // it('Should have initialized a milestone correctly', async () => {
  //   let i = 0;
  //   const pledges = [];
  //   while (i < 32) {
  //     const a = web3.eth.accounts.create();
  //     web3.eth.accounts.wallet.add(a);

  //     await web3.eth.sendTransaction({
  //       from: giver1,
  //       to: a.address,
  //       value: web3.utils.toWei('.1'),
  //     });
  //     await giver1Token.transfer(a.address, '10', { from: giver1 });
  //     await giver1Token.approve(liquidPledging.$address, '0xFFFFFFFFFFFFFFFF', { from: a.address });
  //     await liquidPledging.addGiverAndDonate(1, giver1Token.$address, 10, {
  //       from: a.address,
  //       $extraGas: 500000,
  //     });
  //     i++;

  //     const { toHex, padLeft } = web3.utils;

  //     pledges.push(`${padLeft(toHex(10), 48)}${padLeft(toHex(i * 2).substring(2), 16)}`);
  //   }

  //   await milestone.requestReview({ $extraGas: 100000, from: milestoneManager1 });
  //   await milestone.approveCompleted({ $extraGas: 100000, from: reviewer1 });

  //   const plugin = milestone;

  //   console.log(
  //     '8 ->',
  //     await plugin.$contract.methods
  //       .mWithdraw(pledges.slice(0, 8), [giver1Token.address], true)
  //       .estimateGas({ $extraGas: 100000, from: milestoneManager1 }),
  //   );
  //   console.log(
  //     '9 ->',
  //     await plugin.$contract.methods
  //       // await liquidPledging.$contract.methods
  //       .mWithdraw(pledges.slice(0, 9), [giver1Token.address], true)
  //       .estimateGas({ $extraGas: 100000, from: milestoneManager1 }),
  //   );
  //   console.log(
  //     '10 ->',
  //     // await liquidPledging.$contract.methods
  //     await plugin.$contract.methods
  //       .mWithdraw(pledges.slice(0, 10), [giver1Token.address], true)
  //       .estimateGas({ $extraGas: 100000, from: milestoneManager1 }),
  //   );
  //   console.log(
  //     '11 ->',
  //     await plugin.$contract.methods
  //       // await liquidPledging.$contract.methods
  //       .mWithdraw(pledges.slice(0, 11), [giver1Token.address], true)
  //       .estimateGas({ $extraGas: 100000, from: milestoneManager1 }),
  //   );
  //   console.log(
  //     '12 ->',
  //     await plugin.$contract.methods
  //       // await liquidPledging.$contract.methods
  //       .mWithdraw(pledges.slice(0, 12), [giver1Token.address], true)
  //       .estimateGas({ $extraGas: 100000, from: milestoneManager1 }),
  //   );
  //   console.log(
  //     '13 ->',
  //     await plugin.$contract.methods
  //       // await liquidPledging.$contract.methods
  //       .mWithdraw(pledges.slice(0, 13), [giver1Token.address], true)
  //       .estimateGas({ $extraGas: 100000, from: milestoneManager1 }),
  //   );
  //   console.log(
  //     '16 ->',
  //     await plugin.$contract.methods
  //       // await liquidPledging.$contract.methods
  //       .mWithdraw(pledges.slice(0, 16), [giver1Token.address], true)
  //       .estimateGas({ $extraGas: 100000, from: milestoneManager1 }),
  //   );
  //   console.log(
  //     '17 ->',
  //     await plugin.$contract.methods
  //       // await liquidPledging.$contract.methods
  //       .mWithdraw(pledges.slice(0, 17), [giver1Token.address], true)
  //       .estimateGas({ $extraGas: 100000, from: milestoneManager1 }),
  //   );
  //   console.log(
  //     '18 ->',
  //     await plugin.$contract.methods
  //       .mWithdraw(pledges.slice(0, 18), [giver1Token.address], true)
  //       .estimateGas({ from: milestoneManager1 }),
  //   );
  //   console.log(
  //     '19 ->',
  //     await plugin.$contract.methods
  //       .mWithdraw(pledges.slice(0, 19), [giver1Token.address], true)
  //       .estimateGas({ from: milestoneManager1 }),
  //   );
  //   console.log(
  //     '20 ->',
  //     await plugin.$contract.methods
  //       .mWithdraw(pledges.slice(0, 20), [giver1Token.address], true)
  //       .estimateGas({ from: milestoneManager1 }),
  //   );
  //   console.log(
  //     '21 ->',
  //     await plugin.$contract.methods
  //       .mWithdraw(pledges.slice(0, 21), [giver1Token.address], true)
  //       .estimateGas({ from: milestoneManager1 }),
  //   );
  //   console.log(
  //     pledges.length,
  //     '->',
  //     await plugin.$contract.methods
  //       // await liquidPledging.$contract.methods
  //       .mWithdraw(pledges, [giver1Token.address], true)
  //       .estimateGas({ from: milestoneManager1 }),
  //   );
  // });
});
