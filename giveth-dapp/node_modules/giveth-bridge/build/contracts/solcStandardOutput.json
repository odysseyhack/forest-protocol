{
  "contracts": {
    "./contracts/ForeignGivethBridge.sol": {
      "ForeignGivethBridge": {
        "abi": [
          {
            "constant": true,
            "inputs": [],
            "name": "escapeHatchCaller",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_newOwner",
                "type": "address"
              }
            ],
            "name": "changeOwnership",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "sender",
                "type": "address"
              },
              {
                "name": "mainToken",
                "type": "address"
              },
              {
                "name": "amount",
                "type": "uint256"
              },
              {
                "name": "homeTx",
                "type": "bytes32"
              },
              {
                "name": "data",
                "type": "bytes"
              }
            ],
            "name": "deposit",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [],
            "name": "unpause",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_from",
                "type": "address"
              },
              {
                "name": "_to",
                "type": "address"
              },
              {
                "name": "_amount",
                "type": "uint256"
              }
            ],
            "name": "onTransfer",
            "outputs": [
              {
                "name": "",
                "type": "bool"
              }
            ],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "paused",
            "outputs": [
              {
                "name": "",
                "type": "bool"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_dac",
                "type": "address"
              }
            ],
            "name": "removeOwnership",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_newOwnerCandidate",
                "type": "address"
              }
            ],
            "name": "proposeOwnership",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "liquidPledging",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [],
            "name": "acceptOwnership",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "mainToken",
                "type": "address"
              },
              {
                "name": "tokenName",
                "type": "string"
              },
              {
                "name": "decimals",
                "type": "uint8"
              },
              {
                "name": "tokenSymbol",
                "type": "string"
              }
            ],
            "name": "addToken",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [],
            "name": "pause",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [
              {
                "name": "_token",
                "type": "address"
              }
            ],
            "name": "isTokenEscapable",
            "outputs": [
              {
                "name": "",
                "type": "bool"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "owner",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_token",
                "type": "address"
              }
            ],
            "name": "escapeHatch",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "name": "inverseTokenMapping",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "name": "tokenMapping",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "depositor",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "newOwnerCandidate",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_newEscapeHatchCaller",
                "type": "address"
              }
            ],
            "name": "changeHatchEscapeCaller",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "recipient",
                "type": "address"
              },
              {
                "name": "sideToken",
                "type": "address"
              },
              {
                "name": "amount",
                "type": "uint256"
              }
            ],
            "name": "withdraw",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_owner",
                "type": "address"
              },
              {
                "name": "_spender",
                "type": "address"
              },
              {
                "name": "_amount",
                "type": "uint256"
              }
            ],
            "name": "onApprove",
            "outputs": [
              {
                "name": "",
                "type": "bool"
              }
            ],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "tokenFactory",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "newDepositor",
                "type": "address"
              }
            ],
            "name": "changeDepositor",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "sideToken",
                "type": "address"
              },
              {
                "name": "amount",
                "type": "uint256"
              }
            ],
            "name": "withdraw",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_owner",
                "type": "address"
              }
            ],
            "name": "proxyPayment",
            "outputs": [
              {
                "name": "",
                "type": "bool"
              }
            ],
            "payable": true,
            "stateMutability": "payable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "escapeHatchDestination",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "name": "_escapeHatchCaller",
                "type": "address"
              },
              {
                "name": "_escapeHatchDestination",
                "type": "address"
              },
              {
                "name": "_tokenFactory",
                "type": "address"
              },
              {
                "name": "_liquidPledging",
                "type": "address"
              },
              {
                "name": "_depositor",
                "type": "address"
              },
              {
                "name": "mainTokens",
                "type": "address[]"
              },
              {
                "name": "sideTokens",
                "type": "address[]"
              }
            ],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "constructor"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "name": "sender",
                "type": "address"
              },
              {
                "indexed": false,
                "name": "token",
                "type": "address"
              },
              {
                "indexed": false,
                "name": "amount",
                "type": "uint256"
              },
              {
                "indexed": false,
                "name": "homeTx",
                "type": "bytes32"
              },
              {
                "indexed": false,
                "name": "data",
                "type": "bytes"
              }
            ],
            "name": "Deposit",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "name": "recipient",
                "type": "address"
              },
              {
                "indexed": false,
                "name": "token",
                "type": "address"
              },
              {
                "indexed": false,
                "name": "amount",
                "type": "uint256"
              }
            ],
            "name": "Withdraw",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "name": "mainToken",
                "type": "address"
              },
              {
                "indexed": false,
                "name": "sideToken",
                "type": "address"
              }
            ],
            "name": "TokenAdded",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [],
            "name": "Pause",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [],
            "name": "Unpause",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": false,
                "name": "token",
                "type": "address"
              }
            ],
            "name": "EscapeHatchBlackistedToken",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": false,
                "name": "token",
                "type": "address"
              },
              {
                "indexed": false,
                "name": "amount",
                "type": "uint256"
              }
            ],
            "name": "EscapeHatchCalled",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "name": "by",
                "type": "address"
              },
              {
                "indexed": true,
                "name": "to",
                "type": "address"
              }
            ],
            "name": "OwnershipRequested",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "name": "from",
                "type": "address"
              },
              {
                "indexed": true,
                "name": "to",
                "type": "address"
              }
            ],
            "name": "OwnershipTransferred",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [],
            "name": "OwnershipRemoved",
            "type": "event"
          }
        ],
        "evm": {
          "bytecode": {
            "linkReferences": {},
            "object": "60606040526005805460ff19169055341561001957600080fd5b604051612e19380380612e1983398101604052808051919060200180519190602001805191906020018051919060200180519190602001805182019190602001805160008054600160a060020a03338116600160a060020a031992831617835560028054828e1690841617905560038054828d169316929092179091559190930192915081908190881615156100ae57600080fd5b600160a060020a03871615156100c357600080fd5b83518551146100d157600080fd5b60058054600160a060020a03808b166101000261010060a860020a03199092169190911790915560068054898316600160a060020a0319918216179091556007805492891692909116919091179055600092505b845183101561027b5784838151811061013a57fe5b90602001906020020151915083838151811061015257fe5b90602001906020020151600654909150600160a060020a038083169163095ea7b391166000196040517c010000000000000000000000000000000000000000000000000000000063ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b15156101d457600080fd5b5af115156101e157600080fd5b50505060405180515050600160a060020a0380831660008181526008602090815260408083208054958716600160a060020a03199687168117909155835260099091529081902080549093168217909255907fdffbd9ded1c09446f09377de547142dcce7dc541c8b0b028142b1eba7026b9e790839051600160a060020a03909116815260200160405180910390a2600190920191610125565b50505050505050505050612b85806102946000396000f300606060405260043610620001615763ffffffff60e060020a6000350416631f6eb6e78114620001665780632af4c31e14620001985780632b7c5dde14620001bc5780633f4ba83a14620001fa5780634a39314914620002105780635c975abb146200024f578063666a34271462000265578063710bf322146200028757806374041d1f14620002a957806379ba509714620002bf578063824f36f314620002d55780638456cb591462000316578063892db057146200032c5780638da5cb5b146200034e578063a142d6081462000364578063af95e2d51462000386578063ba27f50b14620003a8578063c7c4ff4614620003ca578063d091b55014620003e0578063d836fbe814620003f6578063d9caed121462000418578063da682aeb1462000210578063e77772fe1462000443578063e7f4eeeb1462000459578063f3fef3a3146200047b578063f48c305414620004a0578063f5b6123014620004b6575b600080fd5b34156200017257600080fd5b6200017c620004cc565b604051600160a060020a03909116815260200160405180910390f35b3415620001a457600080fd5b620001ba600160a060020a0360043516620004db565b005b3415620001c857600080fd5b620001ba600160a060020a03600480358216916024803590911691604435916064359160843591820191013562000571565b34156200020657600080fd5b620001ba62000851565b34156200021c57600080fd5b6200023b600160a060020a0360043581169060243516604435620008b7565b604051901515815260200160405180910390f35b34156200025b57600080fd5b6200023b620008c0565b34156200027157600080fd5b620001ba600160a060020a0360043516620008c9565b34156200029357600080fd5b620001ba600160a060020a036004351662000948565b3415620002b557600080fd5b6200017c620009ba565b3415620002cb57600080fd5b620001ba620009c9565b3415620002e157600080fd5b620001ba60048035600160a060020a0316906024803580820192908101359160443560ff169160643591820191013562000a4a565b34156200032257600080fd5b620001ba62000c41565b34156200033857600080fd5b6200023b600160a060020a036004351662000ca9565b34156200035a57600080fd5b6200017c62000cc8565b34156200037057600080fd5b620001ba600160a060020a036004351662000cd7565b34156200039257600080fd5b6200017c600160a060020a036004351662000f04565b3415620003b457600080fd5b6200017c600160a060020a036004351662000f1f565b3415620003d657600080fd5b6200017c62000f3a565b3415620003ec57600080fd5b6200017c62000f49565b34156200040257600080fd5b620001ba600160a060020a036004351662000f58565b34156200042457600080fd5b620001ba600160a060020a036004358116906024351660443562000fb2565b34156200044f57600080fd5b6200017c620010f3565b34156200046557600080fd5b620001ba600160a060020a036004351662001107565b34156200048757600080fd5b620001ba600160a060020a036004351660243562001145565b6200023b600160a060020a036004351662001156565b3415620004c257600080fd5b6200017c6200115c565b600254600160a060020a031681565b6000805433600160a060020a03908116911614620004f857600080fd5b600160a060020a03821615156200050e57600080fd5b5060008054600160a060020a03838116600160a060020a031980841691909117938490556001805490911690559081169116817f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60075460009033600160a060020a039081169116146200059057600080fd5b50600160a060020a0380861660009081526008602052604090205416801515620005b957600080fd5b80600160a060020a031663827f32c0308760405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b15156200060e57600080fd5b5af115156200061c57600080fd5b505050604051805150506006548590600160a060020a038084169163dd62ed3e9130911660405160e060020a63ffffffff8516028152600160a060020a03928316600482015291166024820152604401602060405180830381600087803b15156200068657600080fd5b5af115156200069457600080fd5b5050506040518051905010156200078f57600654600160a060020a038083169163095ea7b39116600060405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b15156200070157600080fd5b5af115156200070f57600080fd5b50505060405180515050600654600160a060020a038083169163095ea7b3911660001960405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b15156200077657600080fd5b5af115156200078457600080fd5b505050604051805150505b600654600160a060020a03168383604051808383808284378201915050925050506000604051808303816000865af19150501515620007cd57600080fd5b86600160a060020a03167fff628606f5860a17beddc73a7046379d2539e0f878cb934e43ce2c5150bc91a58787878787604051600160a060020a0386168152602081018590526040810184905260806060820181815290820183905260a082018484808284378201915050965050505050505060405180910390a250505050505050565b60005433600160a060020a039081169116146200086d57600080fd5b60055460ff1615156200087f57600080fd5b6005805460ff191690557f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3360405160405180910390a1565b60019392505050565b60055460ff1681565b60005433600160a060020a03908116911614620008e557600080fd5b610dac600160a060020a03821614620008fd57600080fd5b60008054600160a060020a03199081169091556001805490911690557f94e8b32e01b9eedfddd778ffbd051a7718cdc14781702884561162dca6f74dbb60405160405180910390a150565b60005433600160a060020a039081169116146200096457600080fd5b60018054600160a060020a031916600160a060020a0383811691909117918290559081169033167f13a4b3bc0d5234dd3d87c9f1557d8faefa37986da62c36ba49309e2fb2c9aec460405160405180910390a350565b600654600160a060020a031681565b60015460009033600160a060020a03908116911614620009e857600080fd5b506000805460018054600160a060020a0319808416600160a060020a03838116919091179586905591169091559081169116817f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a350565b6000805433600160a060020a0390811691161462000a6757600080fd5b600160a060020a03808816600090815260086020526040902054161562000a8d57600080fd5b6005546101009004600160a060020a03166000808888888888600162000ab26200116b565b600160a060020a03808b168252891660208201526040810188905260ff8516608082015281151560c082015260e06060820181815290820187905260a0820161010083018989808284379091018481038352868152602001905086868082843782019150509b505050505050505050505050604051809103906000f080151562000b3b57600080fd5b600654909150600160a060020a038083169163095ea7b3911660001960405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151562000b9b57600080fd5b5af1151562000ba957600080fd5b50505060405180515050600160a060020a0380881660008181526008602090815260408083208054958716600160a060020a03199687168117909155835260099091529081902080549093168217909255907fdffbd9ded1c09446f09377de547142dcce7dc541c8b0b028142b1eba7026b9e790839051600160a060020a03909116815260200160405180910390a250505050505050565b60005433600160a060020a0390811691161462000c5d57600080fd5b60055460ff161562000c6e57600080fd5b6005805460ff191660011790557f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62560405160405180910390a1565b600160a060020a031660009081526004602052604090205460ff161590565b600054600160a060020a031681565b600254600090819033600160a060020a039081169116148062000d08575060005433600160a060020a039081169116145b151562000d1457600080fd5b600160a060020a03831660009081526004602052604090205460ff161562000d3b57600080fd5b600160a060020a038316151562000dd057600354600160a060020a033081163193501682156108fc0283604051600060405180830381858888f19350505050151562000d8657600080fd5b7fa50dde912fa22ea0d215a0236093ac45b4d55d6ef0c604c319f900029c5d10f28383604051600160a060020a03909216825260208201526040908101905180910390a162000eff565b5081600160a060020a0381166370a082313060405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b151562000e2157600080fd5b5af1151562000e2f57600080fd5b5050506040518051600354909350600160a060020a03808416925063a9059cbb91168460405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151562000e9657600080fd5b5af1151562000ea457600080fd5b50505060405180519050151562000eba57600080fd5b7fa50dde912fa22ea0d215a0236093ac45b4d55d6ef0c604c319f900029c5d10f28383604051600160a060020a03909216825260208201526040908101905180910390a15b505050565b600960205260009081526040902054600160a060020a031681565b600860205260009081526040902054600160a060020a031681565b600754600160a060020a031681565b600154600160a060020a031681565b60025433600160a060020a039081169116148062000f84575060005433600160a060020a039081169116145b151562000f9057600080fd5b60028054600160a060020a031916600160a060020a0392909216919091179055565b60055460009060ff161562000fc657600080fd5b50600160a060020a0380831660009081526009602052604090205416801515806200102657506000805260086020527f5eff886ea0ce6ca488a3d6e336d6c0f75f46d19b42c06ce5ee98e42c96d256c754600160a060020a038481169116145b15156200103257600080fd5b82600160a060020a031663d3ce77fe338460405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b15156200108757600080fd5b5af115156200109557600080fd5b50505060405180515050600160a060020a0384167f9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb8284604051600160a060020a03909216825260208201526040908101905180910390a250505050565b6005546101009004600160a060020a031681565b60005433600160a060020a039081169116146200112357600080fd5b60078054600160a060020a031916600160a060020a0392909216919091179055565b6200115233838362000fb2565b5050565b50600090565b600354600160a060020a031681565b6040516119dd806200117d833901905600606060405260408051908101604052600781527f4d4d545f302e3200000000000000000000000000000000000000000000000000602082015260049080516200004d92916020019062000162565b5034156200005a57600080fd5b604051620019dd380380620019dd833981016040528080519190602001805191906020018051919060200180518201919060200180519190602001805182019190602001805160008054600160a060020a03338116600160a060020a031990921691909117909155600b8054918b166101000261010060a860020a0319909216919091179055915060019050848051620000f992916020019062000162565b506002805460ff191660ff851617905560038280516200011e92916020019062000162565b5060058054600160a060020a031916600160a060020a039790971696909617909555505050600655600b805460ff1916911515919091179055504360075562000207565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620001a557805160ff1916838001178555620001d5565b82800160010185558215620001d5579182015b82811115620001d5578251825591602001919060010190620001b8565b50620001e3929150620001e7565b5090565b6200020491905b80821115620001e35760008155600101620001ee565b90565b6117c680620002176000396000f30060606040526004361061012f5763ffffffff60e060020a60003504166306fdde0381146101c4578063095ea7b31461024e578063176345141461028457806318160ddd146102a957806323b872dd146102bc578063313ce567146102e45780633cebb8231461030d5780634ee2cd7e1461032c57806354fd4d501461034e5780636638c0871461036157806370a082311461042557806380a5400114610444578063827f32c01461045757806395d89b4114610479578063981b24d01461048c578063a9059cbb146104a2578063bef97c87146104c4578063c5bcc4f1146104d7578063cae9ca51146104ea578063d3ce77fe1461054f578063dd62ed3e14610571578063df8de3e714610596578063e77772fe146105b5578063f41e60c5146105c8578063f77c4791146105e0575b60005461014490600160a060020a03166105f3565b151561014f57600080fd5b600054600160a060020a031663f48c3054343360405160e060020a63ffffffff8516028152600160a060020a0390911660048201526024016020604051808303818588803b151561019f57600080fd5b5af115156101ac57600080fd5b505050506040518051905015156101c257600080fd5b005b34156101cf57600080fd5b6101d7610620565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156102135780820151838201526020016101fb565b50505050905090810190601f1680156102405780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561025957600080fd5b610270600160a060020a03600435166024356106be565b604051901515815260200160405180910390f35b341561028f57600080fd5b610297610816565b60405190815260200160405180910390f35b34156102b457600080fd5b61029761081c565b34156102c757600080fd5b610270600160a060020a036004358116906024351660443561082d565b34156102ef57600080fd5b6102f76108cf565b60405160ff909116815260200160405180910390f35b341561031857600080fd5b6101c2600160a060020a03600435166108d8565b341561033757600080fd5b610297600160a060020a0360043516602435610922565b341561035957600080fd5b6101d7610a4b565b341561036c57600080fd5b61040960046024813581810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284378201915050505050509190803560ff1690602001909190803590602001908201803590602001908080601f016020809104026020016040519081016040528181529291906020840183838082843750949650508435946020013515159350610ab692505050565b604051600160a060020a03909116815260200160405180910390f35b341561043057600080fd5b610297600160a060020a0360043516610ccf565b341561044f57600080fd5b610409610ce3565b341561046257600080fd5b610270600160a060020a0360043516602435610cf2565b341561048457600080fd5b6101d7610dc2565b341561049757600080fd5b610297600435610e2d565b34156104ad57600080fd5b610270600160a060020a0360043516602435610f09565b34156104cf57600080fd5b610270610f28565b34156104e257600080fd5b610297610f31565b34156104f557600080fd5b61027060048035600160a060020a03169060248035919060649060443590810190830135806020601f82018190048102016040519081016040528181529291906020840183838082843750949650610f3795505050505050565b341561055a57600080fd5b610270600160a060020a036004351660243561104e565b341561057c57600080fd5b610297600160a060020a0360043581169060243516611118565b34156105a157600080fd5b6101c2600160a060020a0360043516611143565b34156105c057600080fd5b6104096112d4565b34156105d357600080fd5b6101c260043515156112e8565b34156105eb57600080fd5b610409611316565b600080600160a060020a038316151561060f576000915061061a565b823b90506000811191505b50919050565b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156106b65780601f1061068b576101008083540402835291602001916106b6565b820191906000526020600020905b81548152906001019060200180831161069957829003601f168201915b505050505081565b600b5460009060ff1615156106d257600080fd5b8115806107025750600160a060020a03338116600090815260096020908152604080832093871683529290522054155b151561070d57600080fd5b60005461072290600160a060020a03166105f3565b156107ac57600054600160a060020a031663da682aeb33858560405160e060020a63ffffffff8616028152600160a060020a0393841660048201529190921660248201526044810191909152606401602060405180830381600087803b151561078a57600080fd5b5af1151561079757600080fd5b5050506040518051905015156107ac57600080fd5b600160a060020a03338116600081815260096020908152604080832094881680845294909152908190208590557f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a35060015b92915050565b60075481565b600061082743610e2d565b90505b90565b6000805433600160a060020a039081169116146108ba57600b5460ff16151561085557600080fd5b600160a060020a03808516600090815260096020908152604080832033909416835292905220548290101561088c575060006108c8565b600160a060020a03808516600090815260096020908152604080832033909416835292905220805483900390555b6108c5848484611325565b90505b9392505050565b60025460ff1681565b60005433600160a060020a039081169116146108f357600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600160a060020a038216600090815260086020526040812054158061097e5750600160a060020a03831660009081526008602052604081208054849290811061096757fe5b6000918252602090912001546001608060020a0316115b15610a2257600554600160a060020a031615610a1a57600554600654600160a060020a0390911690634ee2cd7e9085906109b99086906114f2565b60405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b15156109fc57600080fd5b5af11515610a0957600080fd5b505050604051805190509050610810565b506000610810565b600160a060020a0383166000908152600860205260409020610a449083611508565b9050610810565b60048054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156106b65780601f1061068b576101008083540402835291602001916106b6565b600080831515610ac4574393505b600b546101009004600160a060020a0316635b7b72c130868a8a8a8960405160e060020a63ffffffff8916028152600160a060020a038716600482019081526024820187905260ff8516606483015282151560a483015260c0604483019081529091608481019060c40187818151815260200191508051906020019080838360005b83811015610b5e578082015183820152602001610b46565b50505050905090810190601f168015610b8b5780820380516001836020036101000a031916815260200191505b50838103825285818151815260200191508051906020019080838360005b83811015610bc1578082015183820152602001610ba9565b50505050905090810190601f168015610bee5780820380516001836020036101000a031916815260200191505b5098505050505050505050602060405180830381600087803b1515610c1257600080fd5b5af11515610c1f57600080fd5b5050506040518051915050600160a060020a038116633cebb8233360405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401600060405180830381600087803b1515610c7857600080fd5b5af11515610c8557600080fd5b50505080600160a060020a03167f086c875b377f900b07ce03575813022f05dd10ed7640b5282cf6d3c3fc352ade8560405190815260200160405180910390a29695505050505050565b6000610cdb8243610922565b90505b919050565b600554600160a060020a031681565b600080548190819033600160a060020a03908116911614610d1257600080fd5b610d1a61081c565b915083820182901015610d2c57600080fd5b610d3585610ccf565b905083810181901015610d4757600080fd5b610d54600a858401611667565b600160a060020a0385166000908152600860205260409020610d7890828601611667565b84600160a060020a031660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8660405190815260200160405180910390a3506001949350505050565b60038054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156106b65780601f1061068b576101008083540402835291602001916106b6565b600a546000901580610e62575081600a6000815481101515610e4b57fe5b6000918252602090912001546001608060020a0316115b15610ef757600554600160a060020a031615610eef57600554600654600160a060020a039091169063981b24d090610e9b9085906114f2565b60405160e060020a63ffffffff84160281526004810191909152602401602060405180830381600087803b1515610ed157600080fd5b5af11515610ede57600080fd5b505050604051805190509050610cde565b506000610cde565b610f02600a83611508565b9050610cde565b600b5460009060ff161515610f1d57600080fd5b6108c8338484611325565b600b5460ff1681565b60065481565b6000610f4384846106be565b1515610f4e57600080fd5b83600160a060020a0316638f4ffcb1338530866040518563ffffffff1660e060020a0281526004018085600160a060020a0316600160a060020a0316815260200184815260200183600160a060020a0316600160a060020a0316815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610fe6578082015183820152602001610fce565b50505050905090810190601f1680156110135780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b151561103457600080fd5b5af1151561104157600080fd5b5060019695505050505050565b600080548190819033600160a060020a0390811691161461106e57600080fd5b61107661081c565b91508382101561108557600080fd5b61108e85610ccf565b90508381101561109d57600080fd5b6110aa600a858403611667565b600160a060020a03851660009081526008602052604090206110ce90858303611667565b600085600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8660405190815260200160405180910390a3506001949350505050565b600160a060020a03918216600090815260096020908152604080832093909416825291909152205490565b60008054819033600160a060020a0390811691161461116157600080fd5b600160a060020a03831615156111af57600054600160a060020a039081169030163180156108fc0290604051600060405180830381858888f1935050505015156111aa57600080fd5b6112cf565b82915081600160a060020a03166370a082313060405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b151561120057600080fd5b5af1151561120d57600080fd5b5050506040518051600054909250600160a060020a03808516925063a9059cbb91168360405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151561127357600080fd5b5af1151561128057600080fd5b50505060405180515050600054600160a060020a039081169084167ff931edb47c50b4b4104c187b5814a9aef5f709e17e2ecf9617e860cacade929c8360405190815260200160405180910390a35b505050565b600b546101009004600160a060020a031681565b60005433600160a060020a0390811691161461130357600080fd5b600b805460ff1916911515919091179055565b600054600160a060020a031681565b6000808083151561133957600192506114e9565b60065443901061134857600080fd5b600160a060020a03851615801590611372575030600160a060020a031685600160a060020a031614155b151561137d57600080fd5b6113878643610922565b91508382101561139a57600092506114e9565b6000546113af90600160a060020a03166105f3565b1561143957600054600160a060020a0316634a39314987878760405160e060020a63ffffffff8616028152600160a060020a0393841660048201529190921660248201526044810191909152606401602060405180830381600087803b151561141757600080fd5b5af1151561142457600080fd5b50505060405180519050151561143957600080fd5b600160a060020a038616600090815260086020526040902061145d90858403611667565b6114678543610922565b90508381018190101561147957600080fd5b600160a060020a038516600090815260086020526040902061149d90828601611667565b84600160a060020a031686600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8660405190815260200160405180910390a3600192505b50509392505050565b600081831061150157816108c8565b5090919050565b600080600080858054905060001415611524576000935061165e565b85548690600019810190811061153657fe5b6000918252602090912001546001608060020a031685106115935785548690600019810190811061156357fe5b60009182526020909120015470010000000000000000000000000000000090046001608060020a0316935061165e565b8560008154811015156115a257fe5b6000918252602090912001546001608060020a03168510156115c7576000935061165e565b8554600093506000190191505b828211156116245760026001838501010490508486828154811015156115f657fe5b6000918252602090912001546001608060020a0316116116185780925061161f565b6001810391505b6115d4565b858381548110151561163257fe5b60009182526020909120015470010000000000000000000000000000000090046001608060020a031693505b50505092915050565b8154600090819015806116a05750835443908590600019810190811061168957fe5b6000918252602090912001546001608060020a0316105b1561171257835484906116b6826001830161175d565b815481106116c057fe5b600091825260209091200180546001608060020a03858116700100000000000000000000000000000000024382166fffffffffffffffffffffffffffffffff1990931692909217161781559150611757565b83548490600019810190811061172457fe5b600091825260209091200180546001608060020a0380861670010000000000000000000000000000000002911617815590505b50505050565b8154818355818115116112cf576000838152602090206112cf91810190830161082a91905b808211156117965760008155600101611782565b50905600a165627a7a7230582005c9c98a3395f1477580383a230dcb712727fb2333a7981f32c68597082d28050029a165627a7a72305820d005f6f3e6f940533edf78ab987ff9823b54a9de8fdfa2098e5828199f0cc76d0029",
            "sourceMap": "918:8220:0:-;;;268:26:5;;;-1:-1:-1;;268:26:5;;;2759:991:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3373:6;993:18:9;;-1:-1:-1;;;;;1001:10:9;993:18;;-1:-1:-1;;;;;;993:18:9;;;;;;2101:17:8;:38;;;;;;;;;;;2149:22;:48;;;;;;;;;;;;;;2759:991:0;;;;;3373:6;-1:-1:-1;3373:6:0;;;;3109:18;;;;3101:27;;;;;;-1:-1:-1;;;;;3146:20:0;;;;3138:29;;;;;;3206:10;:17;3185:10;:17;:38;3177:47;;;;;;3235:12;:48;;-1:-1:-1;;;;;3235:48:0;;;;;-1:-1:-1;;;;;;3235:48:0;;;;;;;;;;3293:14;:32;;;;;-1:-1:-1;;;;;;3293:32:0;;;;;;;3335:9;:22;;;;;;;;;;;;;;;-1:-1:-1;;;3368:376:0;3389:10;:17;3385:1;:21;3368:376;;;3447:10;3458:1;3447:13;;;;;;;;;;;;;;;;3427:33;;3494:10;3505:1;3494:13;;;;;;;;;;;;;;;;3552:14;;3474:33;;-1:-1:-1;;;;;;3521:30:0;;;;;;3552:14;-1:-1:-1;;3521:56:0;;;;;;;;;-1:-1:-1;;;;;3521:56:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;;3591:23:0;;;;;;;:12;:23;;;;;;;;:35;;;;;-1:-1:-1;;;;;;3591:35:0;;;;;;;;3640:30;;:19;:30;;;;;;;:42;;;;;;;;;;3591:23;3701:32;;3617:9;;3701:32;-1:-1:-1;;;;;3701:32:0;;;;;;;;;;;;;;3408:3;;;;;3368:376;;;2759:991;;;;;;;;;;918:8220;;;;;;"
          },
          "deployedBytecode": {
            "linkReferences": {},
            "object": "606060405260043610620001615763ffffffff60e060020a6000350416631f6eb6e78114620001665780632af4c31e14620001985780632b7c5dde14620001bc5780633f4ba83a14620001fa5780634a39314914620002105780635c975abb146200024f578063666a34271462000265578063710bf322146200028757806374041d1f14620002a957806379ba509714620002bf578063824f36f314620002d55780638456cb591462000316578063892db057146200032c5780638da5cb5b146200034e578063a142d6081462000364578063af95e2d51462000386578063ba27f50b14620003a8578063c7c4ff4614620003ca578063d091b55014620003e0578063d836fbe814620003f6578063d9caed121462000418578063da682aeb1462000210578063e77772fe1462000443578063e7f4eeeb1462000459578063f3fef3a3146200047b578063f48c305414620004a0578063f5b6123014620004b6575b600080fd5b34156200017257600080fd5b6200017c620004cc565b604051600160a060020a03909116815260200160405180910390f35b3415620001a457600080fd5b620001ba600160a060020a0360043516620004db565b005b3415620001c857600080fd5b620001ba600160a060020a03600480358216916024803590911691604435916064359160843591820191013562000571565b34156200020657600080fd5b620001ba62000851565b34156200021c57600080fd5b6200023b600160a060020a0360043581169060243516604435620008b7565b604051901515815260200160405180910390f35b34156200025b57600080fd5b6200023b620008c0565b34156200027157600080fd5b620001ba600160a060020a0360043516620008c9565b34156200029357600080fd5b620001ba600160a060020a036004351662000948565b3415620002b557600080fd5b6200017c620009ba565b3415620002cb57600080fd5b620001ba620009c9565b3415620002e157600080fd5b620001ba60048035600160a060020a0316906024803580820192908101359160443560ff169160643591820191013562000a4a565b34156200032257600080fd5b620001ba62000c41565b34156200033857600080fd5b6200023b600160a060020a036004351662000ca9565b34156200035a57600080fd5b6200017c62000cc8565b34156200037057600080fd5b620001ba600160a060020a036004351662000cd7565b34156200039257600080fd5b6200017c600160a060020a036004351662000f04565b3415620003b457600080fd5b6200017c600160a060020a036004351662000f1f565b3415620003d657600080fd5b6200017c62000f3a565b3415620003ec57600080fd5b6200017c62000f49565b34156200040257600080fd5b620001ba600160a060020a036004351662000f58565b34156200042457600080fd5b620001ba600160a060020a036004358116906024351660443562000fb2565b34156200044f57600080fd5b6200017c620010f3565b34156200046557600080fd5b620001ba600160a060020a036004351662001107565b34156200048757600080fd5b620001ba600160a060020a036004351660243562001145565b6200023b600160a060020a036004351662001156565b3415620004c257600080fd5b6200017c6200115c565b600254600160a060020a031681565b6000805433600160a060020a03908116911614620004f857600080fd5b600160a060020a03821615156200050e57600080fd5b5060008054600160a060020a03838116600160a060020a031980841691909117938490556001805490911690559081169116817f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60075460009033600160a060020a039081169116146200059057600080fd5b50600160a060020a0380861660009081526008602052604090205416801515620005b957600080fd5b80600160a060020a031663827f32c0308760405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b15156200060e57600080fd5b5af115156200061c57600080fd5b505050604051805150506006548590600160a060020a038084169163dd62ed3e9130911660405160e060020a63ffffffff8516028152600160a060020a03928316600482015291166024820152604401602060405180830381600087803b15156200068657600080fd5b5af115156200069457600080fd5b5050506040518051905010156200078f57600654600160a060020a038083169163095ea7b39116600060405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b15156200070157600080fd5b5af115156200070f57600080fd5b50505060405180515050600654600160a060020a038083169163095ea7b3911660001960405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b15156200077657600080fd5b5af115156200078457600080fd5b505050604051805150505b600654600160a060020a03168383604051808383808284378201915050925050506000604051808303816000865af19150501515620007cd57600080fd5b86600160a060020a03167fff628606f5860a17beddc73a7046379d2539e0f878cb934e43ce2c5150bc91a58787878787604051600160a060020a0386168152602081018590526040810184905260806060820181815290820183905260a082018484808284378201915050965050505050505060405180910390a250505050505050565b60005433600160a060020a039081169116146200086d57600080fd5b60055460ff1615156200087f57600080fd5b6005805460ff191690557f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3360405160405180910390a1565b60019392505050565b60055460ff1681565b60005433600160a060020a03908116911614620008e557600080fd5b610dac600160a060020a03821614620008fd57600080fd5b60008054600160a060020a03199081169091556001805490911690557f94e8b32e01b9eedfddd778ffbd051a7718cdc14781702884561162dca6f74dbb60405160405180910390a150565b60005433600160a060020a039081169116146200096457600080fd5b60018054600160a060020a031916600160a060020a0383811691909117918290559081169033167f13a4b3bc0d5234dd3d87c9f1557d8faefa37986da62c36ba49309e2fb2c9aec460405160405180910390a350565b600654600160a060020a031681565b60015460009033600160a060020a03908116911614620009e857600080fd5b506000805460018054600160a060020a0319808416600160a060020a03838116919091179586905591169091559081169116817f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a350565b6000805433600160a060020a0390811691161462000a6757600080fd5b600160a060020a03808816600090815260086020526040902054161562000a8d57600080fd5b6005546101009004600160a060020a03166000808888888888600162000ab26200116b565b600160a060020a03808b168252891660208201526040810188905260ff8516608082015281151560c082015260e06060820181815290820187905260a0820161010083018989808284379091018481038352868152602001905086868082843782019150509b505050505050505050505050604051809103906000f080151562000b3b57600080fd5b600654909150600160a060020a038083169163095ea7b3911660001960405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151562000b9b57600080fd5b5af1151562000ba957600080fd5b50505060405180515050600160a060020a0380881660008181526008602090815260408083208054958716600160a060020a03199687168117909155835260099091529081902080549093168217909255907fdffbd9ded1c09446f09377de547142dcce7dc541c8b0b028142b1eba7026b9e790839051600160a060020a03909116815260200160405180910390a250505050505050565b60005433600160a060020a0390811691161462000c5d57600080fd5b60055460ff161562000c6e57600080fd5b6005805460ff191660011790557f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62560405160405180910390a1565b600160a060020a031660009081526004602052604090205460ff161590565b600054600160a060020a031681565b600254600090819033600160a060020a039081169116148062000d08575060005433600160a060020a039081169116145b151562000d1457600080fd5b600160a060020a03831660009081526004602052604090205460ff161562000d3b57600080fd5b600160a060020a038316151562000dd057600354600160a060020a033081163193501682156108fc0283604051600060405180830381858888f19350505050151562000d8657600080fd5b7fa50dde912fa22ea0d215a0236093ac45b4d55d6ef0c604c319f900029c5d10f28383604051600160a060020a03909216825260208201526040908101905180910390a162000eff565b5081600160a060020a0381166370a082313060405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b151562000e2157600080fd5b5af1151562000e2f57600080fd5b5050506040518051600354909350600160a060020a03808416925063a9059cbb91168460405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151562000e9657600080fd5b5af1151562000ea457600080fd5b50505060405180519050151562000eba57600080fd5b7fa50dde912fa22ea0d215a0236093ac45b4d55d6ef0c604c319f900029c5d10f28383604051600160a060020a03909216825260208201526040908101905180910390a15b505050565b600960205260009081526040902054600160a060020a031681565b600860205260009081526040902054600160a060020a031681565b600754600160a060020a031681565b600154600160a060020a031681565b60025433600160a060020a039081169116148062000f84575060005433600160a060020a039081169116145b151562000f9057600080fd5b60028054600160a060020a031916600160a060020a0392909216919091179055565b60055460009060ff161562000fc657600080fd5b50600160a060020a0380831660009081526009602052604090205416801515806200102657506000805260086020527f5eff886ea0ce6ca488a3d6e336d6c0f75f46d19b42c06ce5ee98e42c96d256c754600160a060020a038481169116145b15156200103257600080fd5b82600160a060020a031663d3ce77fe338460405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b15156200108757600080fd5b5af115156200109557600080fd5b50505060405180515050600160a060020a0384167f9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb8284604051600160a060020a03909216825260208201526040908101905180910390a250505050565b6005546101009004600160a060020a031681565b60005433600160a060020a039081169116146200112357600080fd5b60078054600160a060020a031916600160a060020a0392909216919091179055565b6200115233838362000fb2565b5050565b50600090565b600354600160a060020a031681565b6040516119dd806200117d833901905600606060405260408051908101604052600781527f4d4d545f302e3200000000000000000000000000000000000000000000000000602082015260049080516200004d92916020019062000162565b5034156200005a57600080fd5b604051620019dd380380620019dd833981016040528080519190602001805191906020018051919060200180518201919060200180519190602001805182019190602001805160008054600160a060020a03338116600160a060020a031990921691909117909155600b8054918b166101000261010060a860020a0319909216919091179055915060019050848051620000f992916020019062000162565b506002805460ff191660ff851617905560038280516200011e92916020019062000162565b5060058054600160a060020a031916600160a060020a039790971696909617909555505050600655600b805460ff1916911515919091179055504360075562000207565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620001a557805160ff1916838001178555620001d5565b82800160010185558215620001d5579182015b82811115620001d5578251825591602001919060010190620001b8565b50620001e3929150620001e7565b5090565b6200020491905b80821115620001e35760008155600101620001ee565b90565b6117c680620002176000396000f30060606040526004361061012f5763ffffffff60e060020a60003504166306fdde0381146101c4578063095ea7b31461024e578063176345141461028457806318160ddd146102a957806323b872dd146102bc578063313ce567146102e45780633cebb8231461030d5780634ee2cd7e1461032c57806354fd4d501461034e5780636638c0871461036157806370a082311461042557806380a5400114610444578063827f32c01461045757806395d89b4114610479578063981b24d01461048c578063a9059cbb146104a2578063bef97c87146104c4578063c5bcc4f1146104d7578063cae9ca51146104ea578063d3ce77fe1461054f578063dd62ed3e14610571578063df8de3e714610596578063e77772fe146105b5578063f41e60c5146105c8578063f77c4791146105e0575b60005461014490600160a060020a03166105f3565b151561014f57600080fd5b600054600160a060020a031663f48c3054343360405160e060020a63ffffffff8516028152600160a060020a0390911660048201526024016020604051808303818588803b151561019f57600080fd5b5af115156101ac57600080fd5b505050506040518051905015156101c257600080fd5b005b34156101cf57600080fd5b6101d7610620565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156102135780820151838201526020016101fb565b50505050905090810190601f1680156102405780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561025957600080fd5b610270600160a060020a03600435166024356106be565b604051901515815260200160405180910390f35b341561028f57600080fd5b610297610816565b60405190815260200160405180910390f35b34156102b457600080fd5b61029761081c565b34156102c757600080fd5b610270600160a060020a036004358116906024351660443561082d565b34156102ef57600080fd5b6102f76108cf565b60405160ff909116815260200160405180910390f35b341561031857600080fd5b6101c2600160a060020a03600435166108d8565b341561033757600080fd5b610297600160a060020a0360043516602435610922565b341561035957600080fd5b6101d7610a4b565b341561036c57600080fd5b61040960046024813581810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284378201915050505050509190803560ff1690602001909190803590602001908201803590602001908080601f016020809104026020016040519081016040528181529291906020840183838082843750949650508435946020013515159350610ab692505050565b604051600160a060020a03909116815260200160405180910390f35b341561043057600080fd5b610297600160a060020a0360043516610ccf565b341561044f57600080fd5b610409610ce3565b341561046257600080fd5b610270600160a060020a0360043516602435610cf2565b341561048457600080fd5b6101d7610dc2565b341561049757600080fd5b610297600435610e2d565b34156104ad57600080fd5b610270600160a060020a0360043516602435610f09565b34156104cf57600080fd5b610270610f28565b34156104e257600080fd5b610297610f31565b34156104f557600080fd5b61027060048035600160a060020a03169060248035919060649060443590810190830135806020601f82018190048102016040519081016040528181529291906020840183838082843750949650610f3795505050505050565b341561055a57600080fd5b610270600160a060020a036004351660243561104e565b341561057c57600080fd5b610297600160a060020a0360043581169060243516611118565b34156105a157600080fd5b6101c2600160a060020a0360043516611143565b34156105c057600080fd5b6104096112d4565b34156105d357600080fd5b6101c260043515156112e8565b34156105eb57600080fd5b610409611316565b600080600160a060020a038316151561060f576000915061061a565b823b90506000811191505b50919050565b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156106b65780601f1061068b576101008083540402835291602001916106b6565b820191906000526020600020905b81548152906001019060200180831161069957829003601f168201915b505050505081565b600b5460009060ff1615156106d257600080fd5b8115806107025750600160a060020a03338116600090815260096020908152604080832093871683529290522054155b151561070d57600080fd5b60005461072290600160a060020a03166105f3565b156107ac57600054600160a060020a031663da682aeb33858560405160e060020a63ffffffff8616028152600160a060020a0393841660048201529190921660248201526044810191909152606401602060405180830381600087803b151561078a57600080fd5b5af1151561079757600080fd5b5050506040518051905015156107ac57600080fd5b600160a060020a03338116600081815260096020908152604080832094881680845294909152908190208590557f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a35060015b92915050565b60075481565b600061082743610e2d565b90505b90565b6000805433600160a060020a039081169116146108ba57600b5460ff16151561085557600080fd5b600160a060020a03808516600090815260096020908152604080832033909416835292905220548290101561088c575060006108c8565b600160a060020a03808516600090815260096020908152604080832033909416835292905220805483900390555b6108c5848484611325565b90505b9392505050565b60025460ff1681565b60005433600160a060020a039081169116146108f357600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600160a060020a038216600090815260086020526040812054158061097e5750600160a060020a03831660009081526008602052604081208054849290811061096757fe5b6000918252602090912001546001608060020a0316115b15610a2257600554600160a060020a031615610a1a57600554600654600160a060020a0390911690634ee2cd7e9085906109b99086906114f2565b60405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b15156109fc57600080fd5b5af11515610a0957600080fd5b505050604051805190509050610810565b506000610810565b600160a060020a0383166000908152600860205260409020610a449083611508565b9050610810565b60048054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156106b65780601f1061068b576101008083540402835291602001916106b6565b600080831515610ac4574393505b600b546101009004600160a060020a0316635b7b72c130868a8a8a8960405160e060020a63ffffffff8916028152600160a060020a038716600482019081526024820187905260ff8516606483015282151560a483015260c0604483019081529091608481019060c40187818151815260200191508051906020019080838360005b83811015610b5e578082015183820152602001610b46565b50505050905090810190601f168015610b8b5780820380516001836020036101000a031916815260200191505b50838103825285818151815260200191508051906020019080838360005b83811015610bc1578082015183820152602001610ba9565b50505050905090810190601f168015610bee5780820380516001836020036101000a031916815260200191505b5098505050505050505050602060405180830381600087803b1515610c1257600080fd5b5af11515610c1f57600080fd5b5050506040518051915050600160a060020a038116633cebb8233360405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401600060405180830381600087803b1515610c7857600080fd5b5af11515610c8557600080fd5b50505080600160a060020a03167f086c875b377f900b07ce03575813022f05dd10ed7640b5282cf6d3c3fc352ade8560405190815260200160405180910390a29695505050505050565b6000610cdb8243610922565b90505b919050565b600554600160a060020a031681565b600080548190819033600160a060020a03908116911614610d1257600080fd5b610d1a61081c565b915083820182901015610d2c57600080fd5b610d3585610ccf565b905083810181901015610d4757600080fd5b610d54600a858401611667565b600160a060020a0385166000908152600860205260409020610d7890828601611667565b84600160a060020a031660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8660405190815260200160405180910390a3506001949350505050565b60038054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156106b65780601f1061068b576101008083540402835291602001916106b6565b600a546000901580610e62575081600a6000815481101515610e4b57fe5b6000918252602090912001546001608060020a0316115b15610ef757600554600160a060020a031615610eef57600554600654600160a060020a039091169063981b24d090610e9b9085906114f2565b60405160e060020a63ffffffff84160281526004810191909152602401602060405180830381600087803b1515610ed157600080fd5b5af11515610ede57600080fd5b505050604051805190509050610cde565b506000610cde565b610f02600a83611508565b9050610cde565b600b5460009060ff161515610f1d57600080fd5b6108c8338484611325565b600b5460ff1681565b60065481565b6000610f4384846106be565b1515610f4e57600080fd5b83600160a060020a0316638f4ffcb1338530866040518563ffffffff1660e060020a0281526004018085600160a060020a0316600160a060020a0316815260200184815260200183600160a060020a0316600160a060020a0316815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610fe6578082015183820152602001610fce565b50505050905090810190601f1680156110135780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b151561103457600080fd5b5af1151561104157600080fd5b5060019695505050505050565b600080548190819033600160a060020a0390811691161461106e57600080fd5b61107661081c565b91508382101561108557600080fd5b61108e85610ccf565b90508381101561109d57600080fd5b6110aa600a858403611667565b600160a060020a03851660009081526008602052604090206110ce90858303611667565b600085600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8660405190815260200160405180910390a3506001949350505050565b600160a060020a03918216600090815260096020908152604080832093909416825291909152205490565b60008054819033600160a060020a0390811691161461116157600080fd5b600160a060020a03831615156111af57600054600160a060020a039081169030163180156108fc0290604051600060405180830381858888f1935050505015156111aa57600080fd5b6112cf565b82915081600160a060020a03166370a082313060405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b151561120057600080fd5b5af1151561120d57600080fd5b5050506040518051600054909250600160a060020a03808516925063a9059cbb91168360405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151561127357600080fd5b5af1151561128057600080fd5b50505060405180515050600054600160a060020a039081169084167ff931edb47c50b4b4104c187b5814a9aef5f709e17e2ecf9617e860cacade929c8360405190815260200160405180910390a35b505050565b600b546101009004600160a060020a031681565b60005433600160a060020a0390811691161461130357600080fd5b600b805460ff1916911515919091179055565b600054600160a060020a031681565b6000808083151561133957600192506114e9565b60065443901061134857600080fd5b600160a060020a03851615801590611372575030600160a060020a031685600160a060020a031614155b151561137d57600080fd5b6113878643610922565b91508382101561139a57600092506114e9565b6000546113af90600160a060020a03166105f3565b1561143957600054600160a060020a0316634a39314987878760405160e060020a63ffffffff8616028152600160a060020a0393841660048201529190921660248201526044810191909152606401602060405180830381600087803b151561141757600080fd5b5af1151561142457600080fd5b50505060405180519050151561143957600080fd5b600160a060020a038616600090815260086020526040902061145d90858403611667565b6114678543610922565b90508381018190101561147957600080fd5b600160a060020a038516600090815260086020526040902061149d90828601611667565b84600160a060020a031686600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8660405190815260200160405180910390a3600192505b50509392505050565b600081831061150157816108c8565b5090919050565b600080600080858054905060001415611524576000935061165e565b85548690600019810190811061153657fe5b6000918252602090912001546001608060020a031685106115935785548690600019810190811061156357fe5b60009182526020909120015470010000000000000000000000000000000090046001608060020a0316935061165e565b8560008154811015156115a257fe5b6000918252602090912001546001608060020a03168510156115c7576000935061165e565b8554600093506000190191505b828211156116245760026001838501010490508486828154811015156115f657fe5b6000918252602090912001546001608060020a0316116116185780925061161f565b6001810391505b6115d4565b858381548110151561163257fe5b60009182526020909120015470010000000000000000000000000000000090046001608060020a031693505b50505092915050565b8154600090819015806116a05750835443908590600019810190811061168957fe5b6000918252602090912001546001608060020a0316105b1561171257835484906116b6826001830161175d565b815481106116c057fe5b600091825260209091200180546001608060020a03858116700100000000000000000000000000000000024382166fffffffffffffffffffffffffffffffff1990931692909217161781559150611757565b83548490600019810190811061172457fe5b600091825260209091200180546001608060020a0380861670010000000000000000000000000000000002911617815590505b50505050565b8154818355818115116112cf576000838152602090206112cf91810190830161082a91905b808211156117965760008155600101611782565b50905600a165627a7a7230582005c9c98a3395f1477580383a230dcb712727fb2333a7981f32c68597082d28050029a165627a7a72305820d005f6f3e6f940533edf78ab987ff9823b54a9de8fdfa2098e5828199f0cc76d0029",
            "sourceMap": "918:8220:0:-;;;;;;;;;-1:-1:-1;;;918:8220:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1181:32:8;;;;;;;;;;;;;;;-1:-1:-1;;;;;1181:32:8;;;;;;;;;;;;;;2422:246:9;;;;;;;;;;-1:-1:-1;;;;;2422:246:9;;;;;;;5624:901:0;;;;;;;;;;-1:-1:-1;;;;;5624:901:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;912:102:5;;;;;;;;;;;;8545:111:0;;;;;;;;;;-1:-1:-1;;;;;8545:111:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;268:26:5;;;;;;;;;;;;3062:182:9;;;;;;;;;;-1:-1:-1;;;;;3062:182:9;;;;;1585:185;;;;;;;;;;-1:-1:-1;;;;;1585:185:9;;;;;1059:29:0;;;;;;;;;;;;1882:242:9;;;;;;;;;;;;7034:554:0;;;;;;;;;;;;;-1:-1:-1;;;;;7034:554:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;724:100:5;;;;;;;;;;;;3215:117:8;;;;;;;;;;-1:-1:-1;;;;;3215:117:8;;;;;638:20:9;;;;;;;;;;;;3540:611:8;;;;;;;;;;-1:-1:-1;;;;;3540:611:8;;;;;1178:54:0;;;;;;;;;;-1:-1:-1;;;;;1178:54:0;;;;;1125:47;;;;;;;;;;-1:-1:-1;;;;;1125:47:0;;;;;1094:24;;;;;;;;;;;;664:32:9;;;;;;;;;;;;4520:158:8;;;;;;;;;;-1:-1:-1;;;;;4520:158:8;;;;;4627:390:0;;;;;;;;;;-1:-1:-1;;;;;4627:390:0;;;;;;;;;;;;1015:38;;;;;;;;;;;;7724:107;;;;;;;;;;-1:-1:-1;;;;;7724:107:0;;;;;4116:115;;;;;;;;;;-1:-1:-1;;;;;4116:115:0;;;;;;;8106:96;;-1:-1:-1;;;;;8106:96:0;;;;;1219:37:8;;;;;;;;;;;;1181:32;;;-1:-1:-1;;;;;1181:32:8;;:::o;2422:246:9:-;2529:16;1171:5;;1157:10;-1:-1:-1;;;;;1157:19:9;;;1171:5;;1157:19;1148:29;;;;;;-1:-1:-1;;;;;2501:16:9;;;;2493:25;;;;;;-1:-1:-1;2548:5:9;;;-1:-1:-1;;;;;2563:17:9;;;-1:-1:-1;;;;;;2563:17:9;;;;;;;;;;;2548:5;2590:23;;;;;;;2548:5;;;;2655;2548;2624:37;;;;;;;;;;2422:246;;:::o;5624:901:0:-;1537:9;;5750:17;;1523:10;-1:-1:-1;;;;;1523:23:0;;;1537:9;;1523:23;1515:32;;;;;;-1:-1:-1;;;;;;5770:23:0;;;;;;;:12;:23;;;;;;;5881:14;;;5873:23;;;;;;5960:9;-1:-1:-1;;;;;5948:37:0;;5994:4;6001:6;5948:60;;-1:-1:-1;;;5948:60:0;;;;;;-1:-1:-1;;;;;5948:60:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;6188:14:0;;6206:6;;-1:-1:-1;;;;;6140:32:0;;;;;;6181:4;;6188:14;6140:63;;-1:-1:-1;;;6140:63:0;;;;;;-1:-1:-1;;;;;6140:63:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:72;6136:275;;;6312:14;;-1:-1:-1;;;;;6281:30:0;;;;;;6312:14;;6281:49;;-1:-1:-1;;;6281:49:0;;;;;;-1:-1:-1;;;;;6281:49:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;6375:14:0;;-1:-1:-1;;;;;6344:30:0;;;;;;6375:14;-1:-1:-1;;6344:56:0;;-1:-1:-1;;;6344:56:0;;;;;;-1:-1:-1;;;;;6344:56:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;6136:275:0;6429:14;;-1:-1:-1;;;;;6429:14:0;6449:4;;6429:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6421:34;;;;;;;;6478:6;-1:-1:-1;;;;;6470:48:0;;6486:9;6497:6;6505;6513:4;;6470:48;;-1:-1:-1;;;;;6470:48:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5624:901;;;;;;;:::o;912:102:5:-;1171:5:9;;1157:10;-1:-1:-1;;;;;1157:19:9;;;1171:5;;1157:19;1148:29;;;;;;614:6:5;;;;606:15;;;;;;;;969:6;:14;;-1:-1:-1;;969:14:5;;;998:9;;;;;;;;;;912:102::o;8545:111:0:-;8645:4;8545:111;;;;;:::o;268:26:5:-;;;;;;:::o;3062:182:9:-;1171:5;;1157:10;-1:-1:-1;;;;;1157:19:9;;;1171:5;;1157:19;1148:29;;;;;;3144:5;-1:-1:-1;;;;;3136:13:9;;;3128:22;;;;;;3168:3;3160:11;;-1:-1:-1;;;;;;3160:11:9;;;;;;;3181:23;;;;;;;3214:18;;;;;;;;;;3062:182;:::o;1585:185::-;1171:5;;1157:10;-1:-1:-1;;;;;1157:19:9;;;1171:5;;1157:19;1148:29;;;;;;1666:17;:38;;-1:-1:-1;;;;;;1666:38:9;-1:-1:-1;;;;;1666:38:9;;;;;;;;;;;1745:17;;;;1733:10;1714:49;;;;;;;;;;;1585:185;:::o;1059:29:0:-;;;-1:-1:-1;;;;;1059:29:0;;:::o;1882:242:9:-;1948:17;;1977:16;;1934:10;-1:-1:-1;;;;;1934:31:9;;;1948:17;;1934:31;1926:40;;;;;;-1:-1:-1;1996:5:9;;;;2019:17;;-1:-1:-1;;;;;;2011:25:9;;;-1:-1:-1;;;;;2019:17:9;;;2011:25;;;;;;;;2046:23;;;;;1996:5;;;;2111;1996;2080:37;;;;;;;;;;1882:242;:::o;7034:554:0:-;7256:21;1171:5:9;;1157:10;-1:-1:-1;;;;;1157:19:9;;;1171:5;;1157:19;1148:29;;;;;;-1:-1:-1;;;;;7217:23:0;;;;;;;:12;:23;;;;;;;:28;7209:37;;;;;;7296:12;;;;;-1:-1:-1;;;;;7296:12:0;7310:3;;7318:9;;7329:8;7339:11;;7296:12;7280:77;;:::i;:::-;-1:-1:-1;;;;;7280:77:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;7280:77:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7385:14;;7256:101;;-1:-1:-1;;;;;;7367:17:0;;;;;;7385:14;-1:-1:-1;;7367:43:0;;-1:-1:-1;;;7367:43:0;;;;;;-1:-1:-1;;;;;7367:43:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;;7420:23:0;;;;;;;:12;:23;;;;;;;;:44;;;;;-1:-1:-1;;;;;;7420:44:0;;;;;;;;7474:39;;:19;:39;;;;;;;:51;;;;;;;;;;7420:23;7540:41;;7454:9;;7540:41;-1:-1:-1;;;;;7540:41:0;;;;;;;;;;;;;;7034:554;;;;;;;:::o;724:100:5:-;1171:5:9;;1157:10;-1:-1:-1;;;;;1157:19:9;;;1171:5;;1157:19;1148:29;;;;;;446:6:5;;;;445:7;437:16;;;;;;782:6;:13;;-1:-1:-1;;782:13:5;791:4;782:13;;;810:7;;;;;;;;;;724:100::o;3215:117:8:-;-1:-1:-1;;;;;3302:23:8;3278:4;3302:23;;;:15;:23;;;;;;;;3301:24;;3215:117::o;638:20:9:-;;;-1:-1:-1;;;;;638:20:9;;:::o;3540:611:8:-;2431:17;;3676:15;;;;2417:10;-1:-1:-1;;;;;2417:31:8;;;2431:17;;2417:31;;2416:56;;-1:-1:-1;2466:5:8;;2452:10;-1:-1:-1;;;;;2452:19:8;;;2466:5;;2452:19;2416:56;2407:66;;;;;;;;-1:-1:-1;;;;;3634:23:8;;;;;;:15;:23;;;;;;;;:30;3626:39;;;;;;-1:-1:-1;;;;;3739:13:8;;;3735:188;;;3804:22;;-1:-1:-1;;;;;3778:4:8;:12;;;;-1:-1:-1;3804:22:8;:40;;;;3778:12;3804:40;;;;;;;;;;;;;;;;;;;;;;;;;;3858:34;3876:6;3884:7;3858:34;;-1:-1:-1;;;;;3858:34:8;;;;;;;;;;;;;;;;;;;;3906:7;;3735:188;-1:-1:-1;3986:6:8;-1:-1:-1;;;;;4013:15:8;;;4029:4;4013:21;;-1:-1:-1;;;4013:21:8;;;;;;-1:-1:-1;;;;;4013:21:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4067:22;;4013:21;;-1:-1:-1;;;;;;4052:14:8;;;;-1:-1:-1;4052:14:8;;4067:22;4013:21;4052:47;;-1:-1:-1;;;4052:47:8;;;;;;-1:-1:-1;;;;;4052:47:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4044:56;;;;;;;;4110:34;4128:6;4136:7;4110:34;;-1:-1:-1;;;;;4110:34:8;;;;;;;;;;;;;;;;;;;;2483:1;3540:611;;;:::o;1178:54:0:-;;;;;;;;;;;;-1:-1:-1;;;;;1178:54:0;;:::o;1125:47::-;;;;;;;;;;;;-1:-1:-1;;;;;1125:47:0;;:::o;1094:24::-;;;-1:-1:-1;;;;;1094:24:0;;:::o;664:32:9:-;;;-1:-1:-1;;;;;664:32:9;;:::o;4520:158:8:-;2431:17;;2417:10;-1:-1:-1;;;;;2417:31:8;;;2431:17;;2417:31;;2416:56;;-1:-1:-1;2466:5:8;;2452:10;-1:-1:-1;;;;;2452:19:8;;;2466:5;;2452:19;2416:56;2407:66;;;;;;;;4630:17;:41;;-1:-1:-1;;;;;;4630:41:8;-1:-1:-1;;;;;4630:41:8;;;;;;;;;;4520:158::o;4627:390:0:-;446:6:5;;4727:17:0;;446:6:5;;445:7;437:16;;;;;;-1:-1:-1;;;;;;4747:30:0;;;;;;;:19;:30;;;;;;;4795:14;;;;:46;;-1:-1:-1;4813:15:0;;;:12;:15;;;;-1:-1:-1;;;;;4813:28:0;;;:15;;:28;4795:46;4787:55;;;;;;;;4912:9;-1:-1:-1;;;;;4900:36:0;;4937:10;4949:6;4900:56;;-1:-1:-1;;;4900:56:0;;;;;;-1:-1:-1;;;;;4900:56:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;;4972:38:0;;;4992:9;5003:6;4972:38;;-1:-1:-1;;;;;4972:38:0;;;;;;;;;;;;;;;;;;;;4627:390;;;;:::o;1015:38::-;;;;;;-1:-1:-1;;;;;1015:38:0;;:::o;7724:107::-;1171:5:9;;1157:10;-1:-1:-1;;;;;1157:19:9;;;1171:5;;1157:19;1148:29;;;;;;7800:9:0;:24;;-1:-1:-1;;;;;;7800:24:0;-1:-1:-1;;;;;7800:24:0;;;;;;;;;;7724:107::o;4116:115::-;4185:39;4194:10;4206:9;4217:6;4185:8;:39::i;:::-;4116:115;;:::o;8106:96::-;-1:-1:-1;8167:4:0;;8106:96::o;1219:37:8:-;;;-1:-1:-1;;;;;1219:37:8;;:::o;918:8220:0:-;;;;;;;;;;:::o"
          },
          "methodIdentifiers": {
            "acceptOwnership()": "79ba5097",
            "addToken(address,string,uint8,string)": "824f36f3",
            "changeDepositor(address)": "e7f4eeeb",
            "changeHatchEscapeCaller(address)": "d836fbe8",
            "changeOwnership(address)": "2af4c31e",
            "deposit(address,address,uint256,bytes32,bytes)": "2b7c5dde",
            "depositor()": "c7c4ff46",
            "escapeHatch(address)": "a142d608",
            "escapeHatchCaller()": "1f6eb6e7",
            "escapeHatchDestination()": "f5b61230",
            "inverseTokenMapping(address)": "af95e2d5",
            "isTokenEscapable(address)": "892db057",
            "liquidPledging()": "74041d1f",
            "newOwnerCandidate()": "d091b550",
            "onApprove(address,address,uint256)": "da682aeb",
            "onTransfer(address,address,uint256)": "4a393149",
            "owner()": "8da5cb5b",
            "pause()": "8456cb59",
            "paused()": "5c975abb",
            "proposeOwnership(address)": "710bf322",
            "proxyPayment(address)": "f48c3054",
            "removeOwnership(address)": "666a3427",
            "tokenFactory()": "e77772fe",
            "tokenMapping(address)": "ba27f50b",
            "unpause()": "3f4ba83a",
            "withdraw(address,address,uint256)": "d9caed12",
            "withdraw(address,uint256)": "f3fef3a3"
          }
        },
        "metadata": "{\"compiler\":{\"version\":\"0.4.21+commit.dfe3193c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[],\"name\":\"escapeHatchCaller\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"},{\"name\":\"mainToken\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"homeTx\",\"type\":\"bytes32\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"onTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dac\",\"type\":\"address\"}],\"name\":\"removeOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwnerCandidate\",\"type\":\"address\"}],\"name\":\"proposeOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"liquidPledging\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"mainToken\",\"type\":\"address\"},{\"name\":\"tokenName\",\"type\":\"string\"},{\"name\":\"decimals\",\"type\":\"uint8\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"}],\"name\":\"addToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"isTokenEscapable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"escapeHatch\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"inverseTokenMapping\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenMapping\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"depositor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwnerCandidate\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newEscapeHatchCaller\",\"type\":\"address\"}],\"name\":\"changeHatchEscapeCaller\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"sideToken\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"onApprove\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenFactory\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newDepositor\",\"type\":\"address\"}],\"name\":\"changeDepositor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sideToken\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"proxyPayment\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"escapeHatchDestination\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_escapeHatchCaller\",\"type\":\"address\"},{\"name\":\"_escapeHatchDestination\",\"type\":\"address\"},{\"name\":\"_tokenFactory\",\"type\":\"address\"},{\"name\":\"_liquidPledging\",\"type\":\"address\"},{\"name\":\"_depositor\",\"type\":\"address\"},{\"name\":\"mainTokens\",\"type\":\"address[]\"},{\"name\":\"sideTokens\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"homeTx\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"mainToken\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"sideToken\",\"type\":\"address\"}],\"name\":\"TokenAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"}],\"name\":\"EscapeHatchBlackistedToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EscapeHatchCalled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"by\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"OwnershipRemoved\",\"type\":\"event\"}],\"devdoc\":{\"methods\":{\"addToken(address,string,uint8,string)\":{\"params\":{\"decimals\":\"The number of decimals the sideToken will have.  This should be the same as the mainToken\",\"mainToken\":\"The token on the home network we are mapping\",\"tokenName\":\"The name of the MiniMeToken to be deployed\",\"tokenSymbol\":\"The symbol of the MiniMeToken to be deployed\"}},\"changeDepositor(address)\":{\"params\":{\"newDepositor\":\"The address who is allowed to make deposits\"}},\"changeHatchEscapeCaller(address)\":{\"params\":{\"_newEscapeHatchCaller\":\"The address of a trusted account or  contract to call `escapeHatch()` to send the value in this contract to  the `escapeHatchDestination`; it would be ideal that `escapeHatchCaller`  cannot move funds out of `escapeHatchDestination`\"}},\"changeOwnership(address)\":{\"details\":\"In this 2nd option for ownership transfer `changeOwnership()` can  be called and it will immediately assign ownership to the `newOwner`\",\"params\":{\"_newOwner\":\"The address of the new owner\"}},\"deposit(address,address,uint256,bytes32,bytes)\":{\"params\":{\"amount\":\"The amount to withdraw\",\"data\":\"The abi encoded data we call `liquidPledging` with. This should be some form of \\\"donate\\\" on liquidPledging (donate, donateAndCreateGiver, etc);\",\"homeTx\":\"The hash of the tx on the home network where the funds were deposited\",\"mainToken\":\"The token on the main network we are depositing\",\"sender\":\"The address on the home network that deposited the funds\"}},\"escapeHatch(address)\":{\"params\":{\"_token\":\"to transfer, use 0x0 for ether\"}},\"isTokenEscapable(address)\":{\"params\":{\"_token\":\"the token address being queried\"},\"return\":\"False if `_token` is in the blacklist and can't be taken out of  the contract via the `escapeHatch()`\"},\"onApprove(address,address,uint256)\":{\"params\":{\"_amount\":\"The amount in the `approve()` call\",\"_owner\":\"The address that calls `approve()`\",\"_spender\":\"The spender in the `approve()` call\"},\"return\":\"False if the controller does not authorize the approval\"},\"onTransfer(address,address,uint256)\":{\"params\":{\"_amount\":\"The amount of the transfer\",\"_from\":\"The origin of the transfer\",\"_to\":\"The destination of the transfer\"},\"return\":\"False if the controller does not authorize the transfer\"},\"pause()\":{\"details\":\"called by the owner to pause, triggers stopped state\"},\"proposeOwnership(address)\":{\"details\":\"In this 1st option for ownership transfer `proposeOwnership()` must  be called first by the current `owner` then `acceptOwnership()` must be  called by the `newOwnerCandidate`\",\"params\":{\"_newOwnerCandidate\":\"The address being proposed as the new owner\"}},\"proxyPayment(address)\":{\"params\":{\"_owner\":\"The address that sent the ether to create tokens\"},\"return\":\"True if the ether is accepted, false if it throws\"},\"removeOwnership(address)\":{\"details\":\"In this 3rd option for ownership transfer `removeOwnership()` can  be called and it will immediately assign ownership to the 0x0 address;  it requires a 0xdece be input as a parameter to prevent accidental use\",\"params\":{\"_dac\":\"`0xdac` has to be entered for this function to work\"}},\"unpause()\":{\"details\":\"called by the owner to unpause, returns to normal state\"},\"withdraw(address,address,uint256)\":{\"details\":\"This signals to the bridge service that we should release  tokens/eth on the home netowork to msg.sender\",\"params\":{\"amount\":\"The amount to withdraw\",\"recipient\":\"The address we should release the funds to on the  home network\",\"sideToken\":\"The token on this network we are withdrawing\"}},\"withdraw(address,uint256)\":{\"details\":\"This signals to the bridge service that we should release  tokens/eth on the home netowork to msg.sender\",\"params\":{\"amount\":\"The amount to withdraw\",\"sideToken\":\"The token on this network we are withdrawing\"}}}},\"userdoc\":{\"methods\":{\"acceptOwnership()\":{\"notice\":\"Can only be called by the `newOwnerCandidate`, accepts the  transfer of ownership\"},\"addToken(address,string,uint8,string)\":{\"notice\":\"Map a token from the home network to this network. This will deploy a new MiniMeToken \"},\"changeDepositor(address)\":{\"notice\":\"Owner can update the depositor address\"},\"changeHatchEscapeCaller(address)\":{\"notice\":\"Changes the address assigned to call `escapeHatch()`\"},\"changeOwnership(address)\":{\"notice\":\"`owner` can step down and assign some other address to this role\"},\"deposit(address,address,uint256,bytes32,bytes)\":{\"notice\":\"deposit funds from the home network to this network\"},\"escapeHatch(address)\":{\"notice\":\"The `escapeHatch()` should only be called as a last resort if a security issue is uncovered or something unexpected happened\"},\"isTokenEscapable(address)\":{\"notice\":\"Checks to see if `_token` is in the blacklist of tokens\"},\"onApprove(address,address,uint256)\":{\"notice\":\"Notifies the controller about an approval allowing the  controller to react if desired\"},\"onTransfer(address,address,uint256)\":{\"notice\":\"Notifies the controller about a token transfer allowing the  controller to react if desired\"},\"proposeOwnership(address)\":{\"notice\":\"`onlyOwner` Proposes to transfer control of the contract to a  new owner\"},\"proxyPayment(address)\":{\"notice\":\"/////////////Called when `_owner` sends ether to the MiniMe Token contract\"},\"removeOwnership(address)\":{\"notice\":\"Decentralizes the contract, this operation cannot be undone \"},\"withdraw(address,address,uint256)\":{\"notice\":\"withdraw funds to the home network\"},\"withdraw(address,uint256)\":{\"notice\":\"withdraw funds to the home network\"}}}},\"settings\":{\"compilationTarget\":{\"./contracts/ForeignGivethBridge.sol\":\"ForeignGivethBridge\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"./contracts/ForeignGivethBridge.sol\":{\"content\":\"pragma solidity ^0.4.21;\\n\\n/*\\n    Copyright 2018, RJ Ewing <perissology@protonmail.com>\\n\\n    This program is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU General Public License as published by\\n    the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    This program is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU General Public License for more details.\\n\\n    You should have received a copy of the GNU General Public License\\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n*/\\n\\nimport \\\"giveth-common-contracts/contracts/Escapable.sol\\\";\\nimport \\\"minimetoken/contracts/MiniMeToken.sol\\\";\\nimport \\\"./lib/Pausable.sol\\\";\\nimport \\\"./IForeignGivethBridge.sol\\\";\\n\\n\\ncontract ForeignGivethBridge is IForeignGivethBridge, Escapable, Pausable, TokenController {\\n    MiniMeTokenFactory public tokenFactory;\\n    address public liquidPledging;\\n    address public depositor;\\n\\n    mapping(address => address) public tokenMapping;\\n    mapping(address => address) public inverseTokenMapping;\\n\\n    event Deposit(address indexed sender, address token, uint amount, bytes32 homeTx, bytes data);\\n    event Withdraw(address indexed recipient, address token, uint amount);\\n    event TokenAdded(address indexed mainToken, address sideToken);\\n\\n    modifier onlyDepositor {\\n        require(msg.sender == depositor);\\n        _;\\n    }\\n\\n    /**\\n    * @param _escapeHatchCaller The address of a trusted account or contract to\\n    *  call `escapeHatch()` to send the ether in this contract to the\\n    *  `escapeHatchDestination` in the case on an emergency. it would be ideal \\n    *  if `escapeHatchCaller` cannot move funds out of `escapeHatchDestination`\\n    * @param _escapeHatchDestination The address of a safe location (usually a\\n    *  Multisig) to send the ether held in this contract in the case of an emergency\\n    * @param _tokenFactory Address of the MiniMeTokenFactory instance used to deploy a new sideToken\\n    * @param _liquidPledging Address of the liquidPledging instance for this bridge\\n    * @param _depositor address that can deposit into this contract\\n    * @param mainTokens (optional) used for transferring existing tokens to a new bridge deployment.\\n    *   There must be 1 mainToken for every sideToken\\n    * @param sideTokens (optional) used for transferring existing tokens to a new bridge deployment.\\n    *   There must be 1 sideToken for every mainToken. Each sidetoken must inherit Controlled.sol \\n    *   This contract will need to be set as the controller before the bridge can be used.\\n    */\\n    function ForeignGivethBridge(\\n        address _escapeHatchCaller,\\n        address _escapeHatchDestination, \\n        address _tokenFactory,\\n        address _liquidPledging,\\n        address _depositor,\\n        address[] mainTokens,\\n        address[] sideTokens\\n    ) Escapable(_escapeHatchCaller, _escapeHatchDestination) public \\n    {\\n        require(_tokenFactory != 0);\\n        require(_liquidPledging != 0);\\n        require(mainTokens.length == sideTokens.length);\\n\\n        tokenFactory = MiniMeTokenFactory(_tokenFactory);\\n        liquidPledging = _liquidPledging;\\n        depositor = _depositor;\\n\\n        for (uint i = 0; i < mainTokens.length; i++) {\\n            address mainToken = mainTokens[i];\\n            address sideToken = sideTokens[i];\\n            MiniMeToken(sideToken).approve(liquidPledging, uint(-1));\\n            tokenMapping[mainToken] = sideToken;\\n            inverseTokenMapping[sideToken] = mainToken;\\n            emit TokenAdded(mainToken, sideToken);\\n        }\\n    }\\n\\n////////////////////\\n// Public Functions \\n////////////////////\\n\\n    /**\\n    * withdraw funds to the home network\\n    *\\n    * @dev This signals to the bridge service that we should release\\n    *   tokens/eth on the home netowork to msg.sender\\n    * @param sideToken The token on this network we are withdrawing\\n    * @param amount The amount to withdraw\\n    */\\n    function withdraw(address sideToken, uint amount) external {\\n        withdraw(msg.sender, sideToken, amount);\\n    }\\n\\n    /**\\n    * withdraw funds to the home network\\n    *\\n    * @dev This signals to the bridge service that we should release\\n    *   tokens/eth on the home netowork to msg.sender\\n    * @param recipient The address we should release the funds to on the\\n    *   home network\\n    * @param sideToken The token on this network we are withdrawing\\n    * @param amount The amount to withdraw\\n    */\\n    function withdraw(address recipient, address sideToken, uint amount) whenNotPaused public {\\n        address mainToken = inverseTokenMapping[sideToken];\\n        require(mainToken != 0 || tokenMapping[0] == sideToken);\\n\\n        // burn the tokens we want to withdraw\\n        MiniMeToken(sideToken).destroyTokens(msg.sender, amount);\\n\\n        emit Withdraw(recipient, mainToken, amount);\\n    }\\n\\n///////////////////////\\n// Depositor Interface\\n///////////////////////\\n\\n    /**\\n    * deposit funds from the home network to this network\\n    *\\n    * @param sender The address on the home network that deposited the funds\\n    * @param mainToken The token on the main network we are depositing\\n    * @param amount The amount to withdraw\\n    * @param homeTx The hash of the tx on the home network where the funds were deposited\\n    * @param data The abi encoded data we call `liquidPledging` with. This should be some form\\n    *  of \\\"donate\\\" on liquidPledging (donate, donateAndCreateGiver, etc);\\n    */\\n    function deposit(address sender, address mainToken, uint amount, bytes32 homeTx, bytes data) onlyDepositor external {\\n        address sideToken = tokenMapping[mainToken];\\n        // if the mainToken isn't mapped, we can't accept the deposit\\n        require(sideToken != 0);\\n\\n        // mint tokens we are depositing\\n        MiniMeToken(sideToken).generateTokens(address(this), amount);\\n\\n        // ensure that liquidPledging still as a transfer allownce from this contract\\n        // and topup if needed\\n        if (MiniMeToken(sideToken).allowance(address(this), liquidPledging) < amount) {\\n            // need to set to 0 before we can update\\n            MiniMeToken(sideToken).approve(liquidPledging, 0);\\n            MiniMeToken(sideToken).approve(liquidPledging, uint(-1));\\n        }\\n\\n        require(liquidPledging.call(data));\\n        emit Deposit(sender, mainToken, amount, homeTx, data);\\n    }\\n\\n///////////////////\\n// Owner Interface\\n///////////////////\\n\\n    /**\\n    * Map a token from the home network to this network. This will deploy\\n    * a new MiniMeToken \\n    *\\n    * @param mainToken The token on the home network we are mapping\\n    * @param tokenName The name of the MiniMeToken to be deployed\\n    * @param decimals The number of decimals the sideToken will have.\\n    *   This should be the same as the mainToken\\n    * @param tokenSymbol The symbol of the MiniMeToken to be deployed\\n    */\\n    function addToken(address mainToken, string tokenName, uint8 decimals, string tokenSymbol) onlyOwner external {\\n        // ensure we haven't already mapped this token\\n        require(tokenMapping[mainToken] == 0);\\n        MiniMeToken sideToken = new MiniMeToken(tokenFactory, 0x0, 0, tokenName, decimals, tokenSymbol, true);\\n        sideToken.approve(liquidPledging, uint(-1));\\n        tokenMapping[mainToken] = address(sideToken);\\n        inverseTokenMapping[address(sideToken)] = mainToken;\\n        emit TokenAdded(mainToken, address(sideToken));\\n    }\\n\\n    /**\\n    * Owner can update the depositor address\\n    * @param newDepositor The address who is allowed to make deposits\\n    */\\n    function changeDepositor(address newDepositor) onlyOwner external {\\n        depositor = newDepositor;\\n    }\\n\\n////////////////\\n// TokenController\\n////////////////\\n\\n    /// @notice Called when `_owner` sends ether to the MiniMe Token contract\\n    /// @param _owner The address that sent the ether to create tokens\\n    /// @return True if the ether is accepted, false if it throws\\n    function proxyPayment(address _owner) public payable returns(bool) {\\n        return false;\\n    }\\n\\n    /// @notice Notifies the controller about a token transfer allowing the\\n    ///  controller to react if desired\\n    /// @param _from The origin of the transfer\\n    /// @param _to The destination of the transfer\\n    /// @param _amount The amount of the transfer\\n    /// @return False if the controller does not authorize the transfer\\n    function onTransfer(address _from, address _to, uint _amount) public returns(bool) {\\n        return true;\\n    }\\n\\n    /// @notice Notifies the controller about an approval allowing the\\n    ///  controller to react if desired\\n    /// @param _owner The address that calls `approve()`\\n    /// @param _spender The spender in the `approve()` call\\n    /// @param _amount The amount in the `approve()` call\\n    /// @return False if the controller does not authorize the approval\\n    function onApprove(address _owner, address _spender, uint _amount) public returns(bool) {\\n        return true;\\n    }\\n}\",\"keccak256\":\"0x9b874c40108c3d1892b77492d7665f0f764a647ddc5d1e4f9147c79c4c8ec6fd\"},\"./contracts/IForeignGivethBridge.sol\":{\"content\":\"pragma solidity ^0.4.0;\\n\\n/*\\n    Copyright 2018, RJ Ewing <perissology@protonmail.com>\\n\\n    This program is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU General Public License as published by\\n    the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    This program is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU General Public License for more details.\\n\\n    You should have received a copy of the GNU General Public License\\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n*/\\n\\ninterface IForeignGivethBridge {\\n    event Deposit(address indexed sender, address token, uint amount, bytes32 homeTx, bytes data);\\n    event Withdraw(address indexed recipient, address token, uint amount);\\n    event TokenAdded(address indexed mainToken, address sideToken);\\n\\n    function withdraw(address sideToken, uint amount) external;\\n    function withdraw(address recipient, address sideToken, uint amount) public;\\n\\n    function deposit(address sender, address mainToken, uint amount, bytes32 homeTx, bytes data) external;\\n    function addToken(address mainToken, string tokenName, uint8 decimals, string tokenSymbol) external;\\n}\",\"keccak256\":\"0x25fee627960da0977555015aba94373e56da5ddcc07d0d66724f0427344617af\"},\"./contracts/lib/Pausable.sol\":{\"content\":\"pragma solidity ^0.4.21;\\n\\nimport \\\"giveth-common-contracts/contracts/Owned.sol\\\";\\n\\n/**\\n * @title Pausable\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\n */\\ncontract Pausable is Owned {\\n    event Pause();\\n    event Unpause();\\n\\n    bool public paused = false;\\n\\n    /**\\n    * @dev Modifier to make a function callable only when the contract is not paused.\\n    */\\n    modifier whenNotPaused() {\\n        require(!paused);\\n        _;\\n    }\\n\\n    /**\\n    * @dev Modifier to make a function callable only when the contract is paused.\\n    */\\n    modifier whenPaused() {\\n        require(paused);\\n        _;\\n    }\\n\\n    /**\\n    * @dev called by the owner to pause, triggers stopped state\\n    */\\n    function pause() onlyOwner whenNotPaused public {\\n        paused = true;\\n        emit Pause();\\n    }\\n\\n    /**\\n    * @dev called by the owner to unpause, returns to normal state\\n    */\\n    function unpause() onlyOwner whenPaused public {\\n        paused = false;\\n        emit Unpause();\\n    }\\n}\",\"keccak256\":\"0xd134809350f024c16096d995915c6a348d770e1ec633723419f4f3acbd1e4b46\"},\"giveth-common-contracts/contracts/ERC20.sol\":{\"content\":\"pragma solidity ^0.4.19;\\n\\n\\n/**\\n * @title ERC20\\n * @dev A standard interface for tokens.\\n * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\\n */\\ncontract ERC20 {\\n  \\n    /// @dev Returns the total token supply\\n    function totalSupply() public constant returns (uint256 supply);\\n\\n    /// @dev Returns the account balance of the account with address _owner\\n    function balanceOf(address _owner) public constant returns (uint256 balance);\\n\\n    /// @dev Transfers _value number of tokens to address _to\\n    function transfer(address _to, uint256 _value) public returns (bool success);\\n\\n    /// @dev Transfers _value number of tokens from address _from to address _to\\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\\n\\n    /// @dev Allows _spender to withdraw from the msg.sender's account up to the _value amount\\n    function approve(address _spender, uint256 _value) public returns (bool success);\\n\\n    /// @dev Returns the amount which _spender is still allowed to withdraw from _owner\\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\\n\\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\\n\\n}\\n\",\"keccak256\":\"0xe58902b5bdf9f918c6ec8ee4da44bf87faf225098fae84671ab07b46af427338\"},\"giveth-common-contracts/contracts/Escapable.sol\":{\"content\":\"pragma solidity ^0.4.19;\\n/*\\n    Copyright 2016, Jordi Baylina\\n    Contributor: Adrià Massanet <adria@codecontext.io>\\n\\n    This program is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU General Public License as published by\\n    the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    This program is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU General Public License for more details.\\n\\n    You should have received a copy of the GNU General Public License\\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n*/\\n\\nimport \\\"./Owned.sol\\\";\\nimport \\\"./ERC20.sol\\\";\\n\\n\\n/// @dev `Escapable` is a base level contract built off of the `Owned`\\n///  contract; it creates an escape hatch function that can be called in an\\n///  emergency that will allow designated addresses to send any ether or tokens\\n///  held in the contract to an `escapeHatchDestination` as long as they were\\n///  not blacklisted\\ncontract Escapable is Owned {\\n    address public escapeHatchCaller;\\n    address public escapeHatchDestination;\\n    mapping (address=>bool) private escapeBlacklist; // Token contract addresses\\n\\n    /// @notice The Constructor assigns the `escapeHatchDestination` and the\\n    ///  `escapeHatchCaller`\\n    /// @param _escapeHatchCaller The address of a trusted account or contract\\n    ///  to call `escapeHatch()` to send the ether in this contract to the\\n    ///  `escapeHatchDestination` it would be ideal that `escapeHatchCaller`\\n    ///  cannot move funds out of `escapeHatchDestination`\\n    /// @param _escapeHatchDestination The address of a safe location (usu a\\n    ///  Multisig) to send the ether held in this contract; if a neutral address\\n    ///  is required, the WHG Multisig is an option:\\n    ///  0x8Ff920020c8AD673661c8117f2855C384758C572 \\n    function Escapable(address _escapeHatchCaller, address _escapeHatchDestination) public {\\n        escapeHatchCaller = _escapeHatchCaller;\\n        escapeHatchDestination = _escapeHatchDestination;\\n    }\\n\\n    /// @dev The addresses preassigned as `escapeHatchCaller` or `owner`\\n    ///  are the only addresses that can call a function with this modifier\\n    modifier onlyEscapeHatchCallerOrOwner {\\n        require ((msg.sender == escapeHatchCaller)||(msg.sender == owner));\\n        _;\\n    }\\n\\n    /// @notice Creates the blacklist of tokens that are not able to be taken\\n    ///  out of the contract; can only be done at the deployment, and the logic\\n    ///  to add to the blacklist will be in the constructor of a child contract\\n    /// @param _token the token contract address that is to be blacklisted \\n    function blacklistEscapeToken(address _token) internal {\\n        escapeBlacklist[_token] = true;\\n        EscapeHatchBlackistedToken(_token);\\n    }\\n\\n    /// @notice Checks to see if `_token` is in the blacklist of tokens\\n    /// @param _token the token address being queried\\n    /// @return False if `_token` is in the blacklist and can't be taken out of\\n    ///  the contract via the `escapeHatch()`\\n    function isTokenEscapable(address _token) view public returns (bool) {\\n        return !escapeBlacklist[_token];\\n    }\\n\\n    /// @notice The `escapeHatch()` should only be called as a last resort if a\\n    /// security issue is uncovered or something unexpected happened\\n    /// @param _token to transfer, use 0x0 for ether\\n    function escapeHatch(address _token) public onlyEscapeHatchCallerOrOwner {   \\n        require(escapeBlacklist[_token]==false);\\n\\n        uint256 balance;\\n\\n        /// @dev Logic for ether\\n        if (_token == 0x0) {\\n            balance = this.balance;\\n            escapeHatchDestination.transfer(balance);\\n            EscapeHatchCalled(_token, balance);\\n            return;\\n        }\\n        /// @dev Logic for tokens\\n        ERC20 token = ERC20(_token);\\n        balance = token.balanceOf(this);\\n        require(token.transfer(escapeHatchDestination, balance));\\n        EscapeHatchCalled(_token, balance);\\n    }\\n\\n    /// @notice Changes the address assigned to call `escapeHatch()`\\n    /// @param _newEscapeHatchCaller The address of a trusted account or\\n    ///  contract to call `escapeHatch()` to send the value in this contract to\\n    ///  the `escapeHatchDestination`; it would be ideal that `escapeHatchCaller`\\n    ///  cannot move funds out of `escapeHatchDestination`\\n    function changeHatchEscapeCaller(address _newEscapeHatchCaller) public onlyEscapeHatchCallerOrOwner {\\n        escapeHatchCaller = _newEscapeHatchCaller;\\n    }\\n\\n    event EscapeHatchBlackistedToken(address token);\\n    event EscapeHatchCalled(address token, uint amount);\\n}\\n\",\"keccak256\":\"0xd5d7b1a916841b21cfdee2bc9de4a178820421252b0c764070d78e846cd4511d\"},\"giveth-common-contracts/contracts/Owned.sol\":{\"content\":\"pragma solidity ^0.4.19;\\n\\n\\n/// @title Owned\\n/// @author Adrià Massanet <adria@codecontext.io>\\n/// @notice The Owned contract has an owner address, and provides basic \\n///  authorization control functions, this simplifies & the implementation of\\n///  user permissions; this contract has three work flows for a change in\\n///  ownership, the first requires the new owner to validate that they have the\\n///  ability to accept ownership, the second allows the ownership to be\\n///  directly transfered without requiring acceptance, and the third allows for\\n///  the ownership to be removed to allow for decentralization \\ncontract Owned {\\n\\n    address public owner;\\n    address public newOwnerCandidate;\\n\\n    event OwnershipRequested(address indexed by, address indexed to);\\n    event OwnershipTransferred(address indexed from, address indexed to);\\n    event OwnershipRemoved();\\n\\n    /// @dev The constructor sets the `msg.sender` as the`owner` of the contract\\n    function Owned() public {\\n        owner = msg.sender;\\n    }\\n\\n    /// @dev `owner` is the only address that can call a function with this\\n    /// modifier\\n    modifier onlyOwner() {\\n        require (msg.sender == owner);\\n        _;\\n    }\\n    \\n    /// @dev In this 1st option for ownership transfer `proposeOwnership()` must\\n    ///  be called first by the current `owner` then `acceptOwnership()` must be\\n    ///  called by the `newOwnerCandidate`\\n    /// @notice `onlyOwner` Proposes to transfer control of the contract to a\\n    ///  new owner\\n    /// @param _newOwnerCandidate The address being proposed as the new owner\\n    function proposeOwnership(address _newOwnerCandidate) public onlyOwner {\\n        newOwnerCandidate = _newOwnerCandidate;\\n        OwnershipRequested(msg.sender, newOwnerCandidate);\\n    }\\n\\n    /// @notice Can only be called by the `newOwnerCandidate`, accepts the\\n    ///  transfer of ownership\\n    function acceptOwnership() public {\\n        require(msg.sender == newOwnerCandidate);\\n\\n        address oldOwner = owner;\\n        owner = newOwnerCandidate;\\n        newOwnerCandidate = 0x0;\\n\\n        OwnershipTransferred(oldOwner, owner);\\n    }\\n\\n    /// @dev In this 2nd option for ownership transfer `changeOwnership()` can\\n    ///  be called and it will immediately assign ownership to the `newOwner`\\n    /// @notice `owner` can step down and assign some other address to this role\\n    /// @param _newOwner The address of the new owner\\n    function changeOwnership(address _newOwner) public onlyOwner {\\n        require(_newOwner != 0x0);\\n\\n        address oldOwner = owner;\\n        owner = _newOwner;\\n        newOwnerCandidate = 0x0;\\n\\n        OwnershipTransferred(oldOwner, owner);\\n    }\\n\\n    /// @dev In this 3rd option for ownership transfer `removeOwnership()` can\\n    ///  be called and it will immediately assign ownership to the 0x0 address;\\n    ///  it requires a 0xdece be input as a parameter to prevent accidental use\\n    /// @notice Decentralizes the contract, this operation cannot be undone \\n    /// @param _dac `0xdac` has to be entered for this function to work\\n    function removeOwnership(address _dac) public onlyOwner {\\n        require(_dac == 0xdac);\\n        owner = 0x0;\\n        newOwnerCandidate = 0x0;\\n        OwnershipRemoved();     \\n    }\\n} \\n\",\"keccak256\":\"0xc7d1401775fb1b41187de281757de68718fe27ba2660ba4bb194436aab7d0213\"},\"minimetoken/contracts/Controlled.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\ncontract Controlled {\\n    /// @notice The address of the controller is the only address that can call\\n    ///  a function with this modifier\\n    modifier onlyController { require(msg.sender == controller); _; }\\n\\n    address public controller;\\n\\n    function Controlled() public { controller = msg.sender;}\\n\\n    /// @notice Changes the controller of the contract\\n    /// @param _newController The new controller of the contract\\n    function changeController(address _newController) public onlyController {\\n        controller = _newController;\\n    }\\n}\\n\",\"keccak256\":\"0x770798704985a4588762ea932b913bc1df01b4625ab86c5a7278883bbde44b78\"},\"minimetoken/contracts/MiniMeToken.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\n/*\\n    Copyright 2016, Jordi Baylina\\n\\n    This program is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU General Public License as published by\\n    the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    This program is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU General Public License for more details.\\n\\n    You should have received a copy of the GNU General Public License\\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n */\\n\\n/// @title MiniMeToken Contract\\n/// @author Jordi Baylina\\n/// @dev This token contract's goal is to make it easy for anyone to clone this\\n///  token using the token distribution at a given block, this will allow DAO's\\n///  and DApps to upgrade their features in a decentralized manner without\\n///  affecting the original token\\n/// @dev It is ERC20 compliant, but still needs to under go further testing.\\n\\nimport \\\"./Controlled.sol\\\";\\nimport \\\"./TokenController.sol\\\";\\n\\ncontract ApproveAndCallFallBack {\\n    function receiveApproval(address from, uint256 _amount, address _token, bytes _data) public;\\n}\\n\\n/// @dev The actual token contract, the default controller is the msg.sender\\n///  that deploys the contract, so usually this token will be deployed by a\\n///  token controller contract, which Giveth will call a \\\"Campaign\\\"\\ncontract MiniMeToken is Controlled {\\n\\n    string public name;                //The Token's name: e.g. DigixDAO Tokens\\n    uint8 public decimals;             //Number of decimals of the smallest unit\\n    string public symbol;              //An identifier: e.g. REP\\n    string public version = 'MMT_0.2'; //An arbitrary versioning scheme\\n\\n\\n    /// @dev `Checkpoint` is the structure that attaches a block number to a\\n    ///  given value, the block number attached is the one that last changed the\\n    ///  value\\n    struct  Checkpoint {\\n\\n        // `fromBlock` is the block number that the value was generated from\\n        uint128 fromBlock;\\n\\n        // `value` is the amount of tokens at a specific block number\\n        uint128 value;\\n    }\\n\\n    // `parentToken` is the Token address that was cloned to produce this token;\\n    //  it will be 0x0 for a token that was not cloned\\n    MiniMeToken public parentToken;\\n\\n    // `parentSnapShotBlock` is the block number from the Parent Token that was\\n    //  used to determine the initial distribution of the Clone Token\\n    uint public parentSnapShotBlock;\\n\\n    // `creationBlock` is the block number that the Clone Token was created\\n    uint public creationBlock;\\n\\n    // `balances` is the map that tracks the balance of each address, in this\\n    //  contract when the balance changes the block number that the change\\n    //  occurred is also included in the map\\n    mapping (address => Checkpoint[]) balances;\\n\\n    // `allowed` tracks any extra transfer rights as in all ERC20 tokens\\n    mapping (address => mapping (address => uint256)) allowed;\\n\\n    // Tracks the history of the `totalSupply` of the token\\n    Checkpoint[] totalSupplyHistory;\\n\\n    // Flag that determines if the token is transferable or not.\\n    bool public transfersEnabled;\\n\\n    // The factory used to create new clone tokens\\n    MiniMeTokenFactory public tokenFactory;\\n\\n////////////////\\n// Constructor\\n////////////////\\n\\n    /// @notice Constructor to create a MiniMeToken\\n    /// @param _tokenFactory The address of the MiniMeTokenFactory contract that\\n    ///  will create the Clone token contracts, the token factory needs to be\\n    ///  deployed first\\n    /// @param _parentToken Address of the parent token, set to 0x0 if it is a\\n    ///  new token\\n    /// @param _parentSnapShotBlock Block of the parent token that will\\n    ///  determine the initial distribution of the clone token, set to 0 if it\\n    ///  is a new token\\n    /// @param _tokenName Name of the new token\\n    /// @param _decimalUnits Number of decimals of the new token\\n    /// @param _tokenSymbol Token Symbol for the new token\\n    /// @param _transfersEnabled If true, tokens will be able to be transferred\\n    function MiniMeToken(\\n        address _tokenFactory,\\n        address _parentToken,\\n        uint _parentSnapShotBlock,\\n        string _tokenName,\\n        uint8 _decimalUnits,\\n        string _tokenSymbol,\\n        bool _transfersEnabled\\n    ) public {\\n        tokenFactory = MiniMeTokenFactory(_tokenFactory);\\n        name = _tokenName;                                 // Set the name\\n        decimals = _decimalUnits;                          // Set the decimals\\n        symbol = _tokenSymbol;                             // Set the symbol\\n        parentToken = MiniMeToken(_parentToken);\\n        parentSnapShotBlock = _parentSnapShotBlock;\\n        transfersEnabled = _transfersEnabled;\\n        creationBlock = block.number;\\n    }\\n\\n\\n///////////////////\\n// ERC20 Methods\\n///////////////////\\n\\n    /// @notice Send `_amount` tokens to `_to` from `msg.sender`\\n    /// @param _to The address of the recipient\\n    /// @param _amount The amount of tokens to be transferred\\n    /// @return Whether the transfer was successful or not\\n    function transfer(address _to, uint256 _amount) public returns (bool success) {\\n        require(transfersEnabled);\\n        return doTransfer(msg.sender, _to, _amount);\\n    }\\n\\n    /// @notice Send `_amount` tokens to `_to` from `_from` on the condition it\\n    ///  is approved by `_from`\\n    /// @param _from The address holding the tokens being transferred\\n    /// @param _to The address of the recipient\\n    /// @param _amount The amount of tokens to be transferred\\n    /// @return True if the transfer was successful\\n    function transferFrom(address _from, address _to, uint256 _amount\\n    ) public returns (bool success) {\\n\\n        // The controller of this contract can move tokens around at will,\\n        //  this is important to recognize! Confirm that you trust the\\n        //  controller of this contract, which in most situations should be\\n        //  another open source smart contract or 0x0\\n        if (msg.sender != controller) {\\n            require(transfersEnabled);\\n\\n            // The standard ERC 20 transferFrom functionality\\n            if (allowed[_from][msg.sender] < _amount) return false;\\n            allowed[_from][msg.sender] -= _amount;\\n        }\\n        return doTransfer(_from, _to, _amount);\\n    }\\n\\n    /// @dev This is the actual transfer function in the token contract, it can\\n    ///  only be called by other functions in this contract.\\n    /// @param _from The address holding the tokens being transferred\\n    /// @param _to The address of the recipient\\n    /// @param _amount The amount of tokens to be transferred\\n    /// @return True if the transfer was successful\\n    function doTransfer(address _from, address _to, uint _amount\\n    ) internal returns(bool) {\\n\\n           if (_amount == 0) {\\n               return true;\\n           }\\n\\n           require(parentSnapShotBlock < block.number);\\n\\n           // Do not allow transfer to 0x0 or the token contract itself\\n           require((_to != 0) && (_to != address(this)));\\n\\n           // If the amount being transfered is more than the balance of the\\n           //  account the transfer returns false\\n           var previousBalanceFrom = balanceOfAt(_from, block.number);\\n           if (previousBalanceFrom < _amount) {\\n               return false;\\n           }\\n\\n           // Alerts the token controller of the transfer\\n           if (isContract(controller)) {\\n               require(TokenController(controller).onTransfer(_from, _to, _amount));\\n           }\\n\\n           // First update the balance array with the new value for the address\\n           //  sending the tokens\\n           updateValueAtNow(balances[_from], previousBalanceFrom - _amount);\\n\\n           // Then update the balance array with the new value for the address\\n           //  receiving the tokens\\n           var previousBalanceTo = balanceOfAt(_to, block.number);\\n           require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\\n           updateValueAtNow(balances[_to], previousBalanceTo + _amount);\\n\\n           // An event to make the transfer easy to find on the blockchain\\n           Transfer(_from, _to, _amount);\\n\\n           return true;\\n    }\\n\\n    /// @param _owner The address that's balance is being requested\\n    /// @return The balance of `_owner` at the current block\\n    function balanceOf(address _owner) public constant returns (uint256 balance) {\\n        return balanceOfAt(_owner, block.number);\\n    }\\n\\n    /// @notice `msg.sender` approves `_spender` to spend `_amount` tokens on\\n    ///  its behalf. This is a modified version of the ERC20 approve function\\n    ///  to be a little bit safer\\n    /// @param _spender The address of the account able to transfer the tokens\\n    /// @param _amount The amount of tokens to be approved for transfer\\n    /// @return True if the approval was successful\\n    function approve(address _spender, uint256 _amount) public returns (bool success) {\\n        require(transfersEnabled);\\n\\n        // To change the approve amount you first have to reduce the addresses`\\n        //  allowance to zero by calling `approve(_spender,0)` if it is not\\n        //  already 0 to mitigate the race condition described here:\\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n        require((_amount == 0) || (allowed[msg.sender][_spender] == 0));\\n\\n        // Alerts the token controller of the approve function call\\n        if (isContract(controller)) {\\n            require(TokenController(controller).onApprove(msg.sender, _spender, _amount));\\n        }\\n\\n        allowed[msg.sender][_spender] = _amount;\\n        Approval(msg.sender, _spender, _amount);\\n        return true;\\n    }\\n\\n    /// @dev This function makes it easy to read the `allowed[]` map\\n    /// @param _owner The address of the account that owns the token\\n    /// @param _spender The address of the account able to transfer the tokens\\n    /// @return Amount of remaining tokens of _owner that _spender is allowed\\n    ///  to spend\\n    function allowance(address _owner, address _spender\\n    ) public constant returns (uint256 remaining) {\\n        return allowed[_owner][_spender];\\n    }\\n\\n    /// @notice `msg.sender` approves `_spender` to send `_amount` tokens on\\n    ///  its behalf, and then a function is triggered in the contract that is\\n    ///  being approved, `_spender`. This allows users to use their tokens to\\n    ///  interact with contracts in one function call instead of two\\n    /// @param _spender The address of the contract able to transfer the tokens\\n    /// @param _amount The amount of tokens to be approved for transfer\\n    /// @return True if the function call was successful\\n    function approveAndCall(address _spender, uint256 _amount, bytes _extraData\\n    ) public returns (bool success) {\\n        require(approve(_spender, _amount));\\n\\n        ApproveAndCallFallBack(_spender).receiveApproval(\\n            msg.sender,\\n            _amount,\\n            this,\\n            _extraData\\n        );\\n\\n        return true;\\n    }\\n\\n    /// @dev This function makes it easy to get the total number of tokens\\n    /// @return The total number of tokens\\n    function totalSupply() public constant returns (uint) {\\n        return totalSupplyAt(block.number);\\n    }\\n\\n\\n////////////////\\n// Query balance and totalSupply in History\\n////////////////\\n\\n    /// @dev Queries the balance of `_owner` at a specific `_blockNumber`\\n    /// @param _owner The address from which the balance will be retrieved\\n    /// @param _blockNumber The block number when the balance is queried\\n    /// @return The balance at `_blockNumber`\\n    function balanceOfAt(address _owner, uint _blockNumber) public constant\\n        returns (uint) {\\n\\n        // These next few lines are used when the balance of the token is\\n        //  requested before a check point was ever created for this token, it\\n        //  requires that the `parentToken.balanceOfAt` be queried at the\\n        //  genesis block for that token as this contains initial balance of\\n        //  this token\\n        if ((balances[_owner].length == 0)\\n            || (balances[_owner][0].fromBlock > _blockNumber)) {\\n            if (address(parentToken) != 0) {\\n                return parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock));\\n            } else {\\n                // Has no parent\\n                return 0;\\n            }\\n\\n        // This will return the expected balance during normal situations\\n        } else {\\n            return getValueAt(balances[_owner], _blockNumber);\\n        }\\n    }\\n\\n    /// @notice Total amount of tokens at a specific `_blockNumber`.\\n    /// @param _blockNumber The block number when the totalSupply is queried\\n    /// @return The total amount of tokens at `_blockNumber`\\n    function totalSupplyAt(uint _blockNumber) public constant returns(uint) {\\n\\n        // These next few lines are used when the totalSupply of the token is\\n        //  requested before a check point was ever created for this token, it\\n        //  requires that the `parentToken.totalSupplyAt` be queried at the\\n        //  genesis block for this token as that contains totalSupply of this\\n        //  token at this block number.\\n        if ((totalSupplyHistory.length == 0)\\n            || (totalSupplyHistory[0].fromBlock > _blockNumber)) {\\n            if (address(parentToken) != 0) {\\n                return parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock));\\n            } else {\\n                return 0;\\n            }\\n\\n        // This will return the expected totalSupply during normal situations\\n        } else {\\n            return getValueAt(totalSupplyHistory, _blockNumber);\\n        }\\n    }\\n\\n////////////////\\n// Clone Token Method\\n////////////////\\n\\n    /// @notice Creates a new clone token with the initial distribution being\\n    ///  this token at `_snapshotBlock`\\n    /// @param _cloneTokenName Name of the clone token\\n    /// @param _cloneDecimalUnits Number of decimals of the smallest unit\\n    /// @param _cloneTokenSymbol Symbol of the clone token\\n    /// @param _snapshotBlock Block when the distribution of the parent token is\\n    ///  copied to set the initial distribution of the new clone token;\\n    ///  if the block is zero than the actual block, the current block is used\\n    /// @param _transfersEnabled True if transfers are allowed in the clone\\n    /// @return The address of the new MiniMeToken Contract\\n    function createCloneToken(\\n        string _cloneTokenName,\\n        uint8 _cloneDecimalUnits,\\n        string _cloneTokenSymbol,\\n        uint _snapshotBlock,\\n        bool _transfersEnabled\\n        ) public returns(address) {\\n        if (_snapshotBlock == 0) _snapshotBlock = block.number;\\n        MiniMeToken cloneToken = tokenFactory.createCloneToken(\\n            this,\\n            _snapshotBlock,\\n            _cloneTokenName,\\n            _cloneDecimalUnits,\\n            _cloneTokenSymbol,\\n            _transfersEnabled\\n            );\\n\\n        cloneToken.changeController(msg.sender);\\n\\n        // An event to make the token easy to find on the blockchain\\n        NewCloneToken(address(cloneToken), _snapshotBlock);\\n        return address(cloneToken);\\n    }\\n\\n////////////////\\n// Generate and destroy tokens\\n////////////////\\n\\n    /// @notice Generates `_amount` tokens that are assigned to `_owner`\\n    /// @param _owner The address that will be assigned the new tokens\\n    /// @param _amount The quantity of tokens generated\\n    /// @return True if the tokens are generated correctly\\n    function generateTokens(address _owner, uint _amount\\n    ) public onlyController returns (bool) {\\n        uint curTotalSupply = totalSupply();\\n        require(curTotalSupply + _amount >= curTotalSupply); // Check for overflow\\n        uint previousBalanceTo = balanceOf(_owner);\\n        require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\\n        updateValueAtNow(totalSupplyHistory, curTotalSupply + _amount);\\n        updateValueAtNow(balances[_owner], previousBalanceTo + _amount);\\n        Transfer(0, _owner, _amount);\\n        return true;\\n    }\\n\\n\\n    /// @notice Burns `_amount` tokens from `_owner`\\n    /// @param _owner The address that will lose the tokens\\n    /// @param _amount The quantity of tokens to burn\\n    /// @return True if the tokens are burned correctly\\n    function destroyTokens(address _owner, uint _amount\\n    ) onlyController public returns (bool) {\\n        uint curTotalSupply = totalSupply();\\n        require(curTotalSupply >= _amount);\\n        uint previousBalanceFrom = balanceOf(_owner);\\n        require(previousBalanceFrom >= _amount);\\n        updateValueAtNow(totalSupplyHistory, curTotalSupply - _amount);\\n        updateValueAtNow(balances[_owner], previousBalanceFrom - _amount);\\n        Transfer(_owner, 0, _amount);\\n        return true;\\n    }\\n\\n////////////////\\n// Enable tokens transfers\\n////////////////\\n\\n\\n    /// @notice Enables token holders to transfer their tokens freely if true\\n    /// @param _transfersEnabled True if transfers are allowed in the clone\\n    function enableTransfers(bool _transfersEnabled) public onlyController {\\n        transfersEnabled = _transfersEnabled;\\n    }\\n\\n////////////////\\n// Internal helper functions to query and set a value in a snapshot array\\n////////////////\\n\\n    /// @dev `getValueAt` retrieves the number of tokens at a given block number\\n    /// @param checkpoints The history of values being queried\\n    /// @param _block The block number to retrieve the value at\\n    /// @return The number of tokens being queried\\n    function getValueAt(Checkpoint[] storage checkpoints, uint _block\\n    ) constant internal returns (uint) {\\n        if (checkpoints.length == 0) return 0;\\n\\n        // Shortcut for the actual value\\n        if (_block >= checkpoints[checkpoints.length-1].fromBlock)\\n            return checkpoints[checkpoints.length-1].value;\\n        if (_block < checkpoints[0].fromBlock) return 0;\\n\\n        // Binary search of the value in the array\\n        uint min = 0;\\n        uint max = checkpoints.length-1;\\n        while (max > min) {\\n            uint mid = (max + min + 1)/ 2;\\n            if (checkpoints[mid].fromBlock<=_block) {\\n                min = mid;\\n            } else {\\n                max = mid-1;\\n            }\\n        }\\n        return checkpoints[min].value;\\n    }\\n\\n    /// @dev `updateValueAtNow` used to update the `balances` map and the\\n    ///  `totalSupplyHistory`\\n    /// @param checkpoints The history of data being updated\\n    /// @param _value The new number of tokens\\n    function updateValueAtNow(Checkpoint[] storage checkpoints, uint _value\\n    ) internal  {\\n        if ((checkpoints.length == 0)\\n        || (checkpoints[checkpoints.length -1].fromBlock < block.number)) {\\n               Checkpoint storage newCheckPoint = checkpoints[ checkpoints.length++ ];\\n               newCheckPoint.fromBlock =  uint128(block.number);\\n               newCheckPoint.value = uint128(_value);\\n           } else {\\n               Checkpoint storage oldCheckPoint = checkpoints[checkpoints.length-1];\\n               oldCheckPoint.value = uint128(_value);\\n           }\\n    }\\n\\n    /// @dev Internal function to determine if an address is a contract\\n    /// @param _addr The address being queried\\n    /// @return True if `_addr` is a contract\\n    function isContract(address _addr) constant internal returns(bool) {\\n        uint size;\\n        if (_addr == 0) return false;\\n        assembly {\\n            size := extcodesize(_addr)\\n        }\\n        return size>0;\\n    }\\n\\n    /// @dev Helper function to return a min betwen the two uints\\n    function min(uint a, uint b) pure internal returns (uint) {\\n        return a < b ? a : b;\\n    }\\n\\n    /// @notice The fallback function: If the contract's controller has not been\\n    ///  set to 0, then the `proxyPayment` method is called which relays the\\n    ///  ether and creates tokens as described in the token controller contract\\n    function () public payable {\\n        require(isContract(controller));\\n        require(TokenController(controller).proxyPayment.value(msg.value)(msg.sender));\\n    }\\n\\n//////////\\n// Safety Methods\\n//////////\\n\\n    /// @notice This method can be used by the controller to extract mistakenly\\n    ///  sent tokens to this contract.\\n    /// @param _token The address of the token contract that you want to recover\\n    ///  set to 0 in case you want to extract ether.\\n    function claimTokens(address _token) public onlyController {\\n        if (_token == 0x0) {\\n            controller.transfer(this.balance);\\n            return;\\n        }\\n\\n        MiniMeToken token = MiniMeToken(_token);\\n        uint balance = token.balanceOf(this);\\n        token.transfer(controller, balance);\\n        ClaimedTokens(_token, controller, balance);\\n    }\\n\\n////////////////\\n// Events\\n////////////////\\n    event ClaimedTokens(address indexed _token, address indexed _controller, uint _amount);\\n    event Transfer(address indexed _from, address indexed _to, uint256 _amount);\\n    event NewCloneToken(address indexed _cloneToken, uint _snapshotBlock);\\n    event Approval(\\n        address indexed _owner,\\n        address indexed _spender,\\n        uint256 _amount\\n        );\\n\\n}\\n\\n\\n////////////////\\n// MiniMeTokenFactory\\n////////////////\\n\\n/// @dev This contract is used to generate clone contracts from a contract.\\n///  In solidity this is the way to create a contract from a contract of the\\n///  same class\\ncontract MiniMeTokenFactory {\\n\\n    /// @notice Update the DApp by creating a new token with new functionalities\\n    ///  the msg.sender becomes the controller of this clone token\\n    /// @param _parentToken Address of the token being cloned\\n    /// @param _snapshotBlock Block of the parent token that will\\n    ///  determine the initial distribution of the clone token\\n    /// @param _tokenName Name of the new token\\n    /// @param _decimalUnits Number of decimals of the new token\\n    /// @param _tokenSymbol Token Symbol for the new token\\n    /// @param _transfersEnabled If true, tokens will be able to be transferred\\n    /// @return The address of the new token contract\\n    function createCloneToken(\\n        address _parentToken,\\n        uint _snapshotBlock,\\n        string _tokenName,\\n        uint8 _decimalUnits,\\n        string _tokenSymbol,\\n        bool _transfersEnabled\\n    ) public returns (MiniMeToken) {\\n        MiniMeToken newToken = new MiniMeToken(\\n            this,\\n            _parentToken,\\n            _snapshotBlock,\\n            _tokenName,\\n            _decimalUnits,\\n            _tokenSymbol,\\n            _transfersEnabled\\n            );\\n\\n        newToken.changeController(msg.sender);\\n        return newToken;\\n    }\\n}\\n\",\"keccak256\":\"0x3dba5ff0dd1de9ebff6cd48898e78f7ce7c9996d345c702dca6a3a7d69750ed4\"},\"minimetoken/contracts/TokenController.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\n/// @dev The token controller contract must implement these functions\\ncontract TokenController {\\n    /// @notice Called when `_owner` sends ether to the MiniMe Token contract\\n    /// @param _owner The address that sent the ether to create tokens\\n    /// @return True if the ether is accepted, false if it throws\\n    function proxyPayment(address _owner) public payable returns(bool);\\n\\n    /// @notice Notifies the controller about a token transfer allowing the\\n    ///  controller to react if desired\\n    /// @param _from The origin of the transfer\\n    /// @param _to The destination of the transfer\\n    /// @param _amount The amount of the transfer\\n    /// @return False if the controller does not authorize the transfer\\n    function onTransfer(address _from, address _to, uint _amount) public returns(bool);\\n\\n    /// @notice Notifies the controller about an approval allowing the\\n    ///  controller to react if desired\\n    /// @param _owner The address that calls `approve()`\\n    /// @param _spender The spender in the `approve()` call\\n    /// @param _amount The amount in the `approve()` call\\n    /// @return False if the controller does not authorize the approval\\n    function onApprove(address _owner, address _spender, uint _amount) public\\n        returns(bool);\\n}\\n\",\"keccak256\":\"0xf8bf7de20c0412ab90ec43c1432508a8316e17bd246adffa737e0d779413ff5e\"}},\"version\":1}"
      }
    },
    "./contracts/GivethBridge.sol": {
      "GivethBridge": {
        "abi": [
          {
            "constant": true,
            "inputs": [],
            "name": "maxSecurityGuardDelay",
            "outputs": [
              {
                "name": "",
                "type": "uint256"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "token",
                "type": "address"
              },
              {
                "name": "accepted",
                "type": "bool"
              }
            ],
            "name": "whitelistToken",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [],
            "name": "checkIn",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "giver",
                "type": "address"
              },
              {
                "name": "receiverId",
                "type": "uint64"
              },
              {
                "name": "token",
                "type": "address"
              },
              {
                "name": "_amount",
                "type": "uint256"
              }
            ],
            "name": "donateAndCreateGiver",
            "outputs": [],
            "payable": true,
            "stateMutability": "payable",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_token",
                "type": "address"
              },
              {
                "name": "_amount",
                "type": "uint256"
              }
            ],
            "name": "escapeFunds",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_newTimeLock",
                "type": "uint256"
              }
            ],
            "name": "setTimelock",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "escapeHatchCaller",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_newOwner",
                "type": "address"
              }
            ],
            "name": "changeOwnership",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "securityGuardLastCheckin",
            "outputs": [
              {
                "name": "",
                "type": "uint256"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [],
            "name": "unpause",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "giverId",
                "type": "uint64"
              },
              {
                "name": "receiverId",
                "type": "uint64"
              },
              {
                "name": "token",
                "type": "address"
              },
              {
                "name": "_amount",
                "type": "uint256"
              }
            ],
            "name": "donate",
            "outputs": [],
            "payable": true,
            "stateMutability": "payable",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_idPayment",
                "type": "uint256"
              }
            ],
            "name": "disburseAuthorizedPayment",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "paused",
            "outputs": [
              {
                "name": "",
                "type": "bool"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_dac",
                "type": "address"
              }
            ],
            "name": "removeOwnership",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "allowed",
                "type": "bool"
              }
            ],
            "name": "setAllowDisbursePaymentWhenPaused",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "numberOfAuthorizedPayments",
            "outputs": [
              {
                "name": "",
                "type": "uint256"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_newOwnerCandidate",
                "type": "address"
              }
            ],
            "name": "proposeOwnership",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_spender",
                "type": "address"
              },
              {
                "name": "_authorize",
                "type": "bool"
              }
            ],
            "name": "authorizeSpender",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [],
            "name": "acceptOwnership",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_idPayment",
                "type": "uint256"
              }
            ],
            "name": "cancelPayment",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [],
            "name": "pause",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_idPayment",
                "type": "uint256"
              },
              {
                "name": "_delay",
                "type": "uint256"
              }
            ],
            "name": "delayPayment",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "allowDisbursePaymentWhenPaused",
            "outputs": [
              {
                "name": "",
                "type": "bool"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_idPayments",
                "type": "uint256[]"
              }
            ],
            "name": "disburseAuthorizedPayments",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [
              {
                "name": "_token",
                "type": "address"
              }
            ],
            "name": "isTokenEscapable",
            "outputs": [
              {
                "name": "",
                "type": "bool"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "owner",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "giver",
                "type": "address"
              },
              {
                "name": "receiverId",
                "type": "uint64"
              }
            ],
            "name": "donateAndCreateGiver",
            "outputs": [],
            "payable": true,
            "stateMutability": "payable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [
              {
                "name": "",
                "type": "uint256"
              }
            ],
            "name": "authorizedPayments",
            "outputs": [
              {
                "name": "name",
                "type": "string"
              },
              {
                "name": "reference",
                "type": "bytes32"
              },
              {
                "name": "spender",
                "type": "address"
              },
              {
                "name": "earliestPayTime",
                "type": "uint256"
              },
              {
                "name": "canceled",
                "type": "bool"
              },
              {
                "name": "paid",
                "type": "bool"
              },
              {
                "name": "recipient",
                "type": "address"
              },
              {
                "name": "token",
                "type": "address"
              },
              {
                "name": "amount",
                "type": "uint256"
              },
              {
                "name": "securityGuardDelay",
                "type": "uint256"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_token",
                "type": "address"
              }
            ],
            "name": "escapeHatch",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "securityGuard",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_newSecurityGuard",
                "type": "address"
              }
            ],
            "name": "setSecurityGuard",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [],
            "name": "depositEscapedFunds",
            "outputs": [],
            "payable": true,
            "stateMutability": "payable",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "giverId",
                "type": "uint64"
              },
              {
                "name": "receiverId",
                "type": "uint64"
              }
            ],
            "name": "donate",
            "outputs": [],
            "payable": true,
            "stateMutability": "payable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "timeLock",
            "outputs": [
              {
                "name": "",
                "type": "uint256"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "newOwnerCandidate",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_newEscapeHatchCaller",
                "type": "address"
              }
            ],
            "name": "changeHatchEscapeCaller",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "name": "allowedSpenders",
            "outputs": [
              {
                "name": "",
                "type": "bool"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_maxSecurityGuardDelay",
                "type": "uint256"
              }
            ],
            "name": "setMaxSecurityGuardDelay",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "absoluteMinTimeLock",
            "outputs": [
              {
                "name": "",
                "type": "uint256"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_name",
                "type": "string"
              },
              {
                "name": "_reference",
                "type": "bytes32"
              },
              {
                "name": "_recipient",
                "type": "address"
              },
              {
                "name": "_token",
                "type": "address"
              },
              {
                "name": "_amount",
                "type": "uint256"
              },
              {
                "name": "_paymentDelay",
                "type": "uint256"
              }
            ],
            "name": "authorizePayment",
            "outputs": [
              {
                "name": "",
                "type": "uint256"
              }
            ],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "escapeHatchDestination",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "name": "_escapeHatchCaller",
                "type": "address"
              },
              {
                "name": "_escapeHatchDestination",
                "type": "address"
              },
              {
                "name": "_absoluteMinTimeLock",
                "type": "uint256"
              },
              {
                "name": "_timeLock",
                "type": "uint256"
              },
              {
                "name": "_securityGuard",
                "type": "address"
              },
              {
                "name": "_maxSecurityGuardDelay",
                "type": "uint256"
              }
            ],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "constructor"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": false,
                "name": "giverId",
                "type": "uint64"
              },
              {
                "indexed": false,
                "name": "receiverId",
                "type": "uint64"
              },
              {
                "indexed": false,
                "name": "token",
                "type": "address"
              },
              {
                "indexed": false,
                "name": "amount",
                "type": "uint256"
              }
            ],
            "name": "Donate",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": false,
                "name": "giver",
                "type": "address"
              },
              {
                "indexed": false,
                "name": "receiverId",
                "type": "uint64"
              },
              {
                "indexed": false,
                "name": "token",
                "type": "address"
              },
              {
                "indexed": false,
                "name": "amount",
                "type": "uint256"
              }
            ],
            "name": "DonateAndCreateGiver",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": false,
                "name": "token",
                "type": "address"
              },
              {
                "indexed": false,
                "name": "amount",
                "type": "uint256"
              }
            ],
            "name": "EscapeFundsCalled",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "name": "idPayment",
                "type": "uint256"
              },
              {
                "indexed": true,
                "name": "recipient",
                "type": "address"
              },
              {
                "indexed": false,
                "name": "amount",
                "type": "uint256"
              },
              {
                "indexed": false,
                "name": "token",
                "type": "address"
              },
              {
                "indexed": false,
                "name": "reference",
                "type": "bytes32"
              }
            ],
            "name": "PaymentAuthorized",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "name": "idPayment",
                "type": "uint256"
              },
              {
                "indexed": true,
                "name": "recipient",
                "type": "address"
              },
              {
                "indexed": false,
                "name": "amount",
                "type": "uint256"
              },
              {
                "indexed": false,
                "name": "token",
                "type": "address"
              }
            ],
            "name": "PaymentExecuted",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "name": "idPayment",
                "type": "uint256"
              }
            ],
            "name": "PaymentCanceled",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "name": "spender",
                "type": "address"
              },
              {
                "indexed": false,
                "name": "authorized",
                "type": "bool"
              }
            ],
            "name": "SpenderAuthorization",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [],
            "name": "Pause",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [],
            "name": "Unpause",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": false,
                "name": "token",
                "type": "address"
              }
            ],
            "name": "EscapeHatchBlackistedToken",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": false,
                "name": "token",
                "type": "address"
              },
              {
                "indexed": false,
                "name": "amount",
                "type": "uint256"
              }
            ],
            "name": "EscapeHatchCalled",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "name": "by",
                "type": "address"
              },
              {
                "indexed": true,
                "name": "to",
                "type": "address"
              }
            ],
            "name": "OwnershipRequested",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "name": "from",
                "type": "address"
              },
              {
                "indexed": true,
                "name": "to",
                "type": "address"
              }
            ],
            "name": "OwnershipTransferred",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [],
            "name": "OwnershipRemoved",
            "type": "event"
          }
        ],
        "evm": {
          "bytecode": {
            "linkReferences": {},
            "object": "",
            "sourceMap": "1250:7781:1:-;;;268:26:5;;;-1:-1:-1;;268:26:5;;;2755:497:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;993:5:9;:18;;-1:-1:-1;;;;;1001:10:9;993:18;;-1:-1:-1;;;;;;993:18:9;;;;;;2101:17:8;:38;;;;;;;;;;;;;;;2149:22;:48;;;;;;;;;;;;;;;5231:19:6;:42;;;;5283:8;:20;;;;-1:-1:-1;;5313:13:6;:30;;;;;;;;;;;;;;;;;5353:21;:46;;;;3197:17:1;;:14;2755:497;3197:17;;:24;;-1:-1:-1;;3197:24:1;993:18:9;3197:24:1;;;1250:7781;;;;;;"
          },
          "deployedBytecode": {
            "linkReferences": {},
            "object": "6060604052600436106101df5763ffffffff60e060020a6000350416630b2e742381146101e45780630ffb1d8b14610209578063183ff0851461022f5780631870c10f146102425780631b28591c1461026d5780631e891c0a1461028f5780631f6eb6e7146102a55780632af4c31e146102d45780633f487b8b146102f35780633f4ba83a146103065780634c4316c71461031957806352892478146103435780635c975abb14610359578063666a342714610380578063672f412c1461039f57806368b8c5a1146103b7578063710bf322146103ca578063793c0fd4146103e957806379ba50971461040d5780638422927d146104205780638456cb5914610436578063846a5dde14610449578063859bcc7114610462578063863da00014610475578063892db057146104c45780638da5cb5b146104e357806391f5c3a8146104f6578063a0927a6a14610517578063a142d608146105fb578063b2ca3ec41461061a578063bb2a51d11461062d578063bd541ad01461064c578063bde60ac914610654578063d085835a1461066f578063d091b55014610682578063d836fbe814610695578063d8528af0146106b4578063da4793ac146106d3578063ea8a66c7146106e9578063f37b74ca146106fc578063f5b6123014610736575b600080fd5b34156101ef57600080fd5b6101f7610749565b60405190815260200160405180910390f35b341561021457600080fd5b61022d600160a060020a0360043516602435151561074f565b005b341561023a57600080fd5b61022d6107a5565b61022d600160a060020a0360043581169067ffffffffffffffff6024351690604435166064356107cd565b341561027857600080fd5b61022d600160a060020a0360043516602435610881565b341561029a57600080fd5b61022d6004356109ca565b34156102b057600080fd5b6102b86109f9565b604051600160a060020a03909116815260200160405180910390f35b34156102df57600080fd5b61022d600160a060020a0360043516610a08565b34156102fe57600080fd5b6101f7610a9c565b341561031157600080fd5b61022d610aa2565b61022d67ffffffffffffffff60043581169060243516600160a060020a0360443516606435610b06565b341561034e57600080fd5b61022d600435610bbb565b341561036457600080fd5b61036c610c33565b604051901515815260200160405180910390f35b341561038b57600080fd5b61022d600160a060020a0360043516610c3c565b34156103aa57600080fd5b61022d6004351515610cb9565b34156103c257600080fd5b6101f7610cf8565b34156103d557600080fd5b61022d600160a060020a0360043516610cff565b34156103f457600080fd5b61022d600160a060020a03600435166024351515610d70565b341561041857600080fd5b61022d610dea565b341561042b57600080fd5b61022d600435610e6a565b341561044157600080fd5b61022d610f1e565b341561045457600080fd5b61022d600435602435610f5d565b341561046d57600080fd5b61036c611013565b341561048057600080fd5b61022d600460248135818101908301358060208181020160405190810160405280939291908181526020018383602002808284375094965061101c95505050505050565b34156104cf57600080fd5b61036c600160a060020a036004351661105a565b34156104ee57600080fd5b6102b8611079565b61022d600160a060020a036004351667ffffffffffffffff60243516611088565b341561052257600080fd5b61052d600435611095565b604051602081018a9052600160a060020a03808a16604083015260608201899052871515608083015286151560a083015285811660c0830152841660e082015261010081018390526101208101829052610140808252819081018c818151815260200191508051906020019080838360005b838110156105b757808201518382015260200161059f565b50505050905090810190601f1680156105e45780820380516001836020036101000a031916815260200191505b509b50505050505050505050505060405180910390f35b341561060657600080fd5b61022d600160a060020a03600435166111a9565b341561062557600080fd5b6102b86113ca565b341561063857600080fd5b61022d600160a060020a03600435166113d9565b61022d611416565b61022d67ffffffffffffffff60043581169060243516611431565b341561067a57600080fd5b6101f761143e565b341561068d57600080fd5b6102b8611444565b34156106a057600080fd5b61022d600160a060020a0360043516611453565b34156106bf57600080fd5b61036c600160a060020a03600435166114ab565b34156106de57600080fd5b61022d6004356114c0565b34156106f457600080fd5b6101f76114e0565b341561070757600080fd5b6101f7602460048035828101929101359035600160a060020a036044358116906064351660843560a4356114e6565b341561074157600080fd5b6102b8611698565b600a5481565b60055460ff161561075f57600080fd5b60005433600160a060020a0390811691161461077a57600080fd5b600160a060020a03919091166000908152600e60205260409020805460ff1916911515919091179055565b60075433600160a060020a039081169116146107c057600080fd5b6107c86116a7565b600d55565b60055460009060ff16156107e057600080fd5b600160a060020a03851615156107f557600080fd5b67ffffffffffffffff8416151561080b57600080fd5b61081583836116ab565b90507f300ed237d4114d1c2df9984e698721646d6c45633d6c1c5430450cdecf61571d85858584604051600160a060020a03948516815267ffffffffffffffff909316602084015292166040808301919091526060820192909252608001905180910390a15050505050565b60025460009033600160a060020a03908116911614806108af575060005433600160a060020a039081169116145b15156108ba57600080fd5b600160a060020a038316151561090257600354600160a060020a031682156108fc0283604051600060405180830381858888f1935050505015156108fd57600080fd5b610981565b506003548290600160a060020a038083169163a9059cbb91168460405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151561095f57600080fd5b5af1151561096c57600080fd5b50505060405180519050151561098157600080fd5b7f4ccddcd1a4e33721aee316370fb3e014294985be0755a68c88009b31e1dc4ae38383604051600160a060020a03909216825260208201526040908101905180910390a1505050565b60005433600160a060020a039081169116146109e557600080fd5b6008548110156109f457600080fd5b600955565b600254600160a060020a031681565b6000805433600160a060020a03908116911614610a2457600080fd5b600160a060020a0382161515610a3957600080fd5b5060008054600160a060020a03838116600160a060020a031980841691909117938490556001805490911690559081169116817f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600d5481565b60005433600160a060020a03908116911614610abd57600080fd5b60055460ff161515610ace57600080fd5b6005805460ff191690557f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3360405160405180910390a1565b60055460009060ff1615610b1957600080fd5b67ffffffffffffffff85161515610b2f57600080fd5b67ffffffffffffffff84161515610b4557600080fd5b610b4f83836116ab565b90507fc77b8feedf86922981aed41179f4a071d80467c7f17c5c13837269e363ac545b8585858460405167ffffffffffffffff9485168152929093166020830152600160a060020a03166040808301919091526060820192909252608001905180910390a15050505050565b60055460009060ff161580610bd25750600b5460ff165b1515610bdd57600080fd5b6006548210610beb57600080fd5b6006805483908110610bf957fe5b9060005260206000209060080201905060095481600301540361070801600d5410151515610c2657600080fd5b610c2f8261178c565b5050565b60055460ff1681565b60005433600160a060020a03908116911614610c5757600080fd5b610dac600160a060020a03821614610c6e57600080fd5b60008054600160a060020a03199081169091556001805490911690557f94e8b32e01b9eedfddd778ffbd051a7718cdc14781702884561162dca6f74dbb60405160405180910390a150565b60005433600160a060020a03908116911614610cd457600080fd5b60055460ff161515610ce557600080fd5b600b805460ff1916911515919091179055565b6006545b90565b60005433600160a060020a03908116911614610d1a57600080fd5b60018054600160a060020a031916600160a060020a0383811691909117918290559081169033167f13a4b3bc0d5234dd3d87c9f1557d8faefa37986da62c36ba49309e2fb2c9aec460405160405180910390a350565b60005433600160a060020a03908116911614610d8b57600080fd5b600160a060020a0382166000818152600c602052604090819020805460ff19168415151790557f801f568efbc3346a6ae3d0c3eb335a30d64e0d3cf08f1c39626d62cd5c82728190839051901515815260200160405180910390a25050565b60015460009033600160a060020a03908116911614610e0857600080fd5b506000805460018054600160a060020a0319808416600160a060020a03838116919091179586905591169091559081169116817f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a350565b6000805433600160a060020a03908116911614610e8657600080fd5b6006548210610e9457600080fd5b6006805483908110610ea257fe5b60009182526020909120600890910201600481015490915060ff1615610ec757600080fd5b6004810154610100900460ff1615610ede57600080fd5b60048101805460ff19166001179055817ffdf197ed54809861dafe0b4d391843652730ac67274c1e9e46db7687dccaa30160405160405180910390a25050565b60005433600160a060020a03908116911614610f3957600080fd5b60055460ff1615610f4957600080fd5b600b805460ff19169055610f5b6119ad565b565b60075460009033600160a060020a03908116911614610f7b57600080fd5b6006548310610f8957600080fd5b670de0b6b3a7640000821115610f9e57600080fd5b6006805484908110610fac57fe5b90600052602060002090600802019050600a548282600701540111151515610fd357600080fd5b6004810154610100900460ff1615610fea57600080fd5b600481015460ff1615610ffc57600080fd5b600781018054830190556003018054909101905550565b600b5460ff1681565b6000805b82518210156110555782828151811061103557fe5b90602001906020020151905061104a81610bbb565b600190910190611020565b505050565b600160a060020a031660009081526004602052604090205460ff161590565b600054600160a060020a031681565b610c2f82826000806107cd565b60068054829081106110a357fe5b9060005260206000209060080201600091509050806000018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561114f5780601f106111245761010080835404028352916020019161114f565b820191906000526020600020905b81548152906001019060200180831161113257829003601f168201915b5050505060018301546002840154600385015460048601546005870154600688015460079098015496979496600160a060020a039485169650929460ff80841695610100850490911694620100009094048116939216918a565b600254600090819033600160a060020a03908116911614806111d9575060005433600160a060020a039081169116145b15156111e457600080fd5b600160a060020a03831660009081526004602052604090205460ff161561120a57600080fd5b600160a060020a038316151561129c57600354600160a060020a033081163193501682156108fc0283604051600060405180830381858888f19350505050151561125357600080fd5b7fa50dde912fa22ea0d215a0236093ac45b4d55d6ef0c604c319f900029c5d10f28383604051600160a060020a03909216825260208201526040908101905180910390a1611055565b5081600160a060020a0381166370a082313060405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b15156112ec57600080fd5b5af115156112f957600080fd5b5050506040518051600354909350600160a060020a03808416925063a9059cbb91168460405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151561135f57600080fd5b5af1151561136c57600080fd5b50505060405180519050151561138157600080fd5b7fa50dde912fa22ea0d215a0236093ac45b4d55d6ef0c604c319f900029c5d10f28383604051600160a060020a03909216825260208201526040908101905180910390a1505050565b600754600160a060020a031681565b60005433600160a060020a039081169116146113f457600080fd5b60078054600160a060020a031916600160a060020a0392909216919091179055565b60035433600160a060020a03908116911614610f5b57600080fd5b610c2f8282600080610b06565b60095481565b600154600160a060020a031681565b60025433600160a060020a039081169116148061147e575060005433600160a060020a039081169116145b151561148957600080fd5b60028054600160a060020a031916600160a060020a0392909216919091179055565b600c6020526000908152604090205460ff1681565b60005433600160a060020a039081169116146114db57600080fd5b600a55565b60085481565b6005546000908190819060ff16156114fd57600080fd5b600160a060020a0333166000908152600c602052604090205460ff16151561152457600080fd5b60068054925082906115399060018301611a13565b50600680548390811061154857fe5b60009182526020909120600890910201600281018054600160a060020a03191633600160a060020a03161790559050670de0b6b3a764000084111561158c57600080fd5b6009548410156115a7576009546115a16116a7565b016115b2565b836115b06116a7565b015b600382015560048101805475ffffffffffffffffffffffffffffffffffffffff0000191662010000600160a060020a038a1602179055600681018590556115fa818b8b611a3f565b5060018101889055600581018054600160a060020a031916600160a060020a038881169190911791829055600483015460068401546201000090910482169285927fd11935115aa93b9f1f616d0d7702f4593572daa610390123241b3785430281c49291168c604051928352600160a060020a0390911660208301526040808301919091526060909101905180910390a35098975050505050505050565b600354600160a060020a031681565b4290565b600160a060020a0382166000908152600e602052604081205460ff1615156116d257600080fd5b5080600160a060020a03831615156116e75750345b600081116116f457600080fd5b600160a060020a038316156117865782600160a060020a03166323b872dd33308460405160e060020a63ffffffff8616028152600160a060020a0393841660048201529190921660248201526044810191909152606401602060405180830381600087803b151561176457600080fd5b5af1151561177157600080fd5b50505060405180519050151561178657600080fd5b92915050565b60055460009060ff1615806117a35750600b5460ff165b15156117ae57600080fd5b60065482106117bc57600080fd5b60068054839081106117ca57fe5b60009182526020808320600260089093020191820154600160a060020a03168352600c905260409091205490915060ff16151561180657600080fd5b80600301546118136116a7565b101561181e57600080fd5b600481015460ff161561183057600080fd5b6004810154610100900460ff161561184757600080fd5b60048101805461ff0019166101001790556005810154600160a060020a031615156118b3576004810154600682015462010000909104600160a060020a0316906108fc81150290604051600060405180830381858888f1935050505015156118ae57600080fd5b611941565b600581015460048201546006830154600160a060020a039283169263a9059cbb92620100009004169060405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151561191f57600080fd5b5af1151561192c57600080fd5b50505060405180519050151561194157600080fd5b600481015460068201546005830154600160a060020a036201000090930483169285927f354f3c0c8efabe1a1a07cf222842b008ef284ac185e63bdf8245be8cd2d97f5192909116604051918252600160a060020a031660208201526040908101905180910390a35050565b60005433600160a060020a039081169116146119c857600080fd5b60055460ff16156119d857600080fd5b6005805460ff191660011790557f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62560405160405180910390a1565b815481835581811511611055576008028160080283600052602060002091820191016110559190611abd565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611a805782800160ff19823516178555611aad565b82800160010185558215611aad579182015b82811115611aad578235825591602001919060010190611a92565b50611ab9929150611b3d565b5090565b610cfc91905b80821115611ab9576000611ad78282611b57565b50600060018201819055600282018054600160a060020a03199081169091556003830182905560048301805475ffffffffffffffffffffffffffffffffffffffffffff191690556005830180549091169055600682018190556007820155600801611ac3565b610cfc91905b80821115611ab95760008155600101611b43565b50805460018160011615610100020316600290046000825580601f10611b7d5750611b9b565b601f016020900490600052602060002090810190611b9b9190611b3d565b505600a165627a7a723058202c93896a99ed00f70c3be01dbfcc817d0371f619dedcd25175f540c4e980677a0029",
            "sourceMap": "1250:7781:1:-;;;;;;;;;-1:-1:-1;;;1250:7781:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2486:33:6;;;;;;;;;;;;;;;;;;;;;;;;;;;7389:136:1;;;;;;;;;;-1:-1:-1;;;;;7389:136:1;;;;;;;;;;;3561:100:4;;;;;;;;;;;;4938:317:1;;-1:-1:-1;;;;;4938:317:1;;;;;;;;;;;;;;;;;7836:429;;;;;;;;;;-1:-1:-1;;;;;7836:429:1;;;;;;;10982:153:6;;;;;;;;;;;;;;1181:32:8;;;;;;;;;;;;;;;-1:-1:-1;;;;;1181:32:8;;;;;;;;;;;;;;2422:246:9;;;;;;;;;;-1:-1:-1;;;;;2422:246:9;;;;;921:36:4;;;;;;;;;;;;912:102:5;;;;;;;;;;;;6861:294:1;;;;;;;;;;;-1:-1:-1;;;;;6861:294:1;;;;;;;2068:848:4;;;;;;;;;;;;;;268:26:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3062:182:9;;;;;;;;;;-1:-1:-1;;;;;3062:182:9;;;;;12212:142:6;;;;;;;;;;;;;;;;5615:114;;;;;;;;;;;;1585:185:9;;;;;;;;;;-1:-1:-1;;;;;1585:185:9;;;;;10267:192:6;;;;;;;;;;-1:-1:-1;;;;;10267:192:6;;;;;;;;;1882:242:9;;;;;;;;;;;;9710:311:6;;;;;;;;;;;;;;11688:126;;;;;;;;;;;;9076:473;;;;;;;;;;;;;;;;2525:42;;;;;;;;;;;;8585:233;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;8585:233:6;;-1:-1:-1;8585:233:6;;-1:-1:-1;;;;;;8585:233:6;3215:117:8;;;;;;;;;;-1:-1:-1;;;;;3215:117:8;;;;;638:20:9;;;;;;;;;;;;3924:143:1;;-1:-1:-1;;;;;3924:143:1;;;;;;;;;2347:35:6;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2347:35:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;2347:35:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3540:611:8;;;;;;;;;;-1:-1:-1;;;;;3540:611:8;;;;;2389:28:6;;;;;;;;;;;;10596:122;;;;;;;;;;-1:-1:-1;;;;;10596:122:6;;;;;8385:110:1;;;;5887:118;;;;;;;;;;;;;2460:20:6;;;;;;;;;;;;664:32:9;;;;;;;;;;;;4520:158:8;;;;;;;;;;-1:-1:-1;;;;;4520:158:8;;;;;2687:48:6;;;;;;;;;;-1:-1:-1;;;;;2687:48:6;;;;;11395:145;;;;;;;;;;;;;;2423:31;;;;;;;;;;;;6304:1195;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;6304:1195:6;;;;;;;;;;;;;;1219:37:8;;;;;;;;;;;;2486:33:6;;;;:::o;7389:136:1:-;446:6:5;;;;445:7;437:16;;;;;;1171:5:9;;1157:10;-1:-1:-1;;;;;1157:19:9;;;1171:5;;1157:19;1148:29;;;;;;-1:-1:-1;;;;;7486:21:1;;;;;;;;:14;:21;;;;;:32;;-1:-1:-1;;7486:32:1;;;;;;;;;;7389:136::o;3561:100:4:-;3378:13:6;;3364:10;-1:-1:-1;;;;;3364:27:6;;;3378:13;;3364:27;3356:36;;;;;;3644:10:4;:8;:10::i;:::-;3617:24;:37;3561:100::o;4938:317:1:-;446:6:5;;5133:11:1;;446:6:5;;445:7;437:16;;;;;;-1:-1:-1;;;;;5078:10:1;;;;5070:19;;;;;;5107:15;;;;;5099:24;;;;;;5147:32;5164:5;5171:7;5147:16;:32::i;:::-;5133:46;;5194:54;5215:5;5222:10;5234:5;5241:6;5194:54;;-1:-1:-1;;;;;5194:54:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4938:317;;;;;:::o;7836:429::-;2431:17:8;;8102:11:1;;2417:10:8;-1:-1:-1;;;;;2417:31:8;;;2431:17;;2417:31;;2416:56;;-1:-1:-1;2466:5:8;;2452:10;-1:-1:-1;;;;;2452:19:8;;;2466:5;;2452:19;2416:56;2407:66;;;;;;;;-1:-1:-1;;;;;7971:11:1;;;7967:243;;;7998:22;;-1:-1:-1;;;;;7998:22:1;:40;;;;8030:7;7998:40;;;;;;;;;;;;;;;;;;;;;;;;;;7967:243;;;-1:-1:-1;8166:22:1;;8122:6;;-1:-1:-1;;;;;8151:14:1;;;;;;8166:22;8190:7;8151:47;;-1:-1:-1;;;8151:47:1;;;;;;-1:-1:-1;;;;;8151:47:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8143:56;;;;;;;;8224:34;8242:6;8250:7;8224:34;;-1:-1:-1;;;;;8224:34:1;;;;;;;;;;;;;;;;;;;;7836:429;;;:::o;10982:153:6:-;1171:5:9;;1157:10;-1:-1:-1;;;;;1157:19:9;;;1171:5;;1157:19;1148:29;;;;;;11075:19:6;;11059:35;;;11051:44;;;;;;11105:8;:23;10982:153::o;1181:32:8:-;;;-1:-1:-1;;;;;1181:32:8;;:::o;2422:246:9:-;2529:16;1171:5;;1157:10;-1:-1:-1;;;;;1157:19:9;;;1171:5;;1157:19;1148:29;;;;;;-1:-1:-1;;;;;2501:16:9;;;;2493:25;;;;;;-1:-1:-1;2548:5:9;;;-1:-1:-1;;;;;2563:17:9;;;-1:-1:-1;;;;;;2563:17:9;;;;;;;;;;;2548:5;2590:23;;;;;;;2548:5;;;;2655;2548;2624:37;;;;;;;;;;2422:246;;:::o;921:36:4:-;;;;:::o;912:102:5:-;1171:5:9;;1157:10;-1:-1:-1;;;;;1157:19:9;;;1171:5;;1157:19;1148:29;;;;;;614:6:5;;;;606:15;;;;;;;;969:6;:14;;-1:-1:-1;;969:14:5;;;998:9;;;;;;;;;;912:102::o;6861:294:1:-;446:6:5;;7045:11:1;;446:6:5;;445:7;437:16;;;;;;6988:12:1;;;;;6980:21;;;;;;7019:15;;;;;7011:24;;;;;;7059:32;7076:5;7083:7;7059:16;:32::i;:::-;7045:46;;7106:42;7113:7;7122:10;7134:5;7141:6;7106:42;;;;;;;;;;;;;;;;-1:-1:-1;;;;;7106:42:1;;;;;;;;;;;;;;;;;;;;;;;;;6861:294;;;;;:::o;2068:848:4:-;3669:6:6;;2293:17:4;;3669:6:6;;3668:7;;:41;;-1:-1:-1;3679:30:6;;;;3668:41;3660:50;;;;;;;;2256:18:4;:25;2243:38;;2235:47;;;;;;2313:18;:30;;2332:10;;2313:30;;;;;;;;;;;;;;;;2293:50;;2833:8;;2813:1;:17;;;:28;2844:10;2813:41;2785:24;;:69;;2777:78;;;;;;;;2866:43;2898:10;2866:31;:43::i;:::-;2068:848;;:::o;268:26:5:-;;;;;;:::o;3062:182:9:-;1171:5;;1157:10;-1:-1:-1;;;;;1157:19:9;;;1171:5;;1157:19;1148:29;;;;;;3144:5;-1:-1:-1;;;;;3136:13:9;;;3128:22;;;;;;3168:3;3160:11;;-1:-1:-1;;;;;;3160:11:9;;;;;;;3181:23;;;;;;;3214:18;;;;;;;;;;3062:182;:::o;12212:142:6:-;1171:5:9;;1157:10;-1:-1:-1;;;;;1157:19:9;;;1171:5;;1157:19;1148:29;;;;;;614:6:5;;;;606:15;;;;;;;;12307:30:6;:40;;-1:-1:-1;;12307:40:6;;;;;;;;;;12212:142::o;5615:114::-;5697:18;:25;5615:114;;:::o;1585:185:9:-;1171:5;;1157:10;-1:-1:-1;;;;;1157:19:9;;;1171:5;;1157:19;1148:29;;;;;;1666:17;:38;;-1:-1:-1;;;;;;1666:38:9;-1:-1:-1;;;;;1666:38:9;;;;;;;;;;;1745:17;;;;1733:10;1714:49;;;;;;;;;;;1585:185;:::o;10267:192:6:-;1171:5:9;;1157:10;-1:-1:-1;;;;;1157:19:9;;;1171:5;;1157:19;1148:29;;;;;;-1:-1:-1;;;;;10357:25:6;;;;;;:15;:25;;;;;;;:38;;-1:-1:-1;;10357:38:6;;;;;;;10410:42;;10357:38;;10410:42;;;;;;;;;;;;;;;10267:192;;:::o;1882:242:9:-;1948:17;;1977:16;;1934:10;-1:-1:-1;;;;;1934:31:9;;;1948:17;;1934:31;1926:40;;;;;;-1:-1:-1;1996:5:9;;;;2019:17;;-1:-1:-1;;;;;;2011:25:9;;;-1:-1:-1;;;;;2019:17:9;;;2011:25;;;;;;;;2046:23;;;;;1996:5;;;;2111;1996;2080:37;;;;;;;;;;1882:242;:::o;9710:311:6:-;9837:17;1171:5:9;;1157:10;-1:-1:-1;;;;;1157:19:9;;;1171:5;;1157:19;1148:29;;;;;;9800:18:6;:25;9787:38;;9779:47;;;;;;9857:18;:30;;9876:10;;9857:30;;;;;;;;;;;;;;;;;;;9907:10;;;;9857:30;;-1:-1:-1;9907:10:6;;9906:11;9898:20;;;;;;9937:6;;;;;;;;;9936:7;9928:16;;;;;;9955:10;;;:17;;-1:-1:-1;;9955:17:6;9968:4;9955:17;;;10003:10;9987:27;;;;;;;;;;9710:311;;:::o;11688:126::-;1171:5:9;;1157:10;-1:-1:-1;;;;;1157:19:9;;;1171:5;;1157:19;1148:29;;;;;;446:6:5;;;;445:7;437:16;;;;;;11746:30:6;:38;;-1:-1:-1;;11746:38:6;;;11794:13;:11;:13::i;:::-;11688:126::o;9076:473::-;3378:13;;9284:17;;3364:10;-1:-1:-1;;;;;3364:27:6;;;3378:13;;3364:27;3356:36;;;;;;9186:18;:25;9173:38;;9165:47;;;;;;9266:6;9256:16;;;9248:25;;;;;;9304:18;:30;;9323:10;;9304:30;;;;;;;;;;;;;;;;9284:50;;9386:21;;9376:6;9353:1;:20;;;:29;:54;;9345:63;;;;;;;;9427:6;;;;;;;;;9426:7;9418:16;;;;;;9453:10;;;;;;9452:11;9444:20;;;;;;9475;;;:30;;;;;;9515:17;;:27;;;;;;;-1:-1:-1;9076:473:6:o;2525:42::-;;;;;;:::o;8585:233::-;8663:6;;8658:154;8679:11;:18;8675:1;:22;8658:154;;;8736:11;8748:1;8736:14;;;;;;;;;;;;;;;;8718:32;;8764:37;8790:10;8764:25;:37::i;:::-;8699:3;;;;;8658:154;;;8585:233;;;:::o;3215:117:8:-;-1:-1:-1;;;;;3302:23:8;3278:4;3302:23;;;:15;:23;;;;;;;;3301:24;;3215:117::o;638:20:9:-;;;-1:-1:-1;;;;;638:20:9;;:::o;3924:143:1:-;4015:45;4036:5;4043:10;4055:1;4058;4015:20;:45::i;2347:35:6:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;2347:35:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2347:35:6;;;;-1:-1:-1;2347:35:6;;;;;;;;;;;;;;;;;;;;;;;;;:::o;3540:611:8:-;2431:17;;3676:15;;;;2417:10;-1:-1:-1;;;;;2417:31:8;;;2431:17;;2417:31;;2416:56;;-1:-1:-1;2466:5:8;;2452:10;-1:-1:-1;;;;;2452:19:8;;;2466:5;;2452:19;2416:56;2407:66;;;;;;;;-1:-1:-1;;;;;3634:23:8;;;;;;:15;:23;;;;;;;;:30;3626:39;;;;;;-1:-1:-1;;;;;3739:13:8;;;3735:188;;;3804:22;;-1:-1:-1;;;;;3778:4:8;:12;;;;-1:-1:-1;3804:22:8;:40;;;;3778:12;3804:40;;;;;;;;;;;;;;;;;;;;;;;;;;3858:34;3876:6;3884:7;3858:34;;-1:-1:-1;;;;;3858:34:8;;;;;;;;;;;;;;;;;;;;3906:7;;3735:188;-1:-1:-1;3986:6:8;-1:-1:-1;;;;;4013:15:8;;;4029:4;4013:21;;-1:-1:-1;;;4013:21:8;;;;;;-1:-1:-1;;;;;4013:21:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4067:22;;4013:21;;-1:-1:-1;;;;;;4052:14:8;;;;-1:-1:-1;4052:14:8;;4067:22;4013:21;4052:47;;-1:-1:-1;;;4052:47:8;;;;;;-1:-1:-1;;;;;4052:47:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4044:56;;;;;;;;4110:34;4128:6;4136:7;4110:34;;-1:-1:-1;;;;;4110:34:8;;;;;;;;;;;;;;;;;;;;3540:611;;;:::o;2389:28:6:-;;;-1:-1:-1;;;;;2389:28:6;;:::o;10596:122::-;1171:5:9;;1157:10;-1:-1:-1;;;;;1157:19:9;;;1171:5;;1157:19;1148:29;;;;;;10678:13:6;:33;;-1:-1:-1;;;;;;10678:33:6;-1:-1:-1;;;;;10678:33:6;;;;;;;;;;10596:122::o;8385:110:1:-;8465:22;;8451:10;-1:-1:-1;;;;;8451:36:1;;;8465:22;;8451:36;8443:45;;;;;5887:118;5965:33;5972:7;5981:10;5993:1;5996;5965:6;:33::i;2460:20:6:-;;;;:::o;664:32:9:-;;;-1:-1:-1;;;;;664:32:9;;:::o;4520:158:8:-;2431:17;;2417:10;-1:-1:-1;;;;;2417:31:8;;;2431:17;;2417:31;;2416:56;;-1:-1:-1;2466:5:8;;2452:10;-1:-1:-1;;;;;2452:19:8;;;2466:5;;2452:19;2416:56;2407:66;;;;;;;;4630:17;:41;;-1:-1:-1;;;;;;4630:41:8;-1:-1:-1;;;;;4630:41:8;;;;;;;;;;4520:158::o;2687:48:6:-;;;;;;;;;;;;;;;:::o;11395:145::-;1171:5:9;;1157:10;-1:-1:-1;;;;;1157:19:9;;;1171:5;;1157:19;1148:29;;;;;;11487:21:6;:46;11395:145::o;2423:31::-;;;;:::o;6304:1195::-;446:6:5;;6519:4:6;;;;;;446:6:5;;445:7;437:16;;;;;;-1:-1:-1;;;;;6625:10:6;6609:27;;;;;:15;:27;;;;;;;;6601:36;;;;;;;;6664:18;:25;;;-1:-1:-1;6664:25:6;;6726:27;;;;;;:::i;:::-;-1:-1:-1;6843:18:6;:29;;6862:9;;6843:29;;;;;;;;;;;;;;;;;;;6882:9;;;:22;;-1:-1:-1;;;;;;6882:22:6;6894:10;-1:-1:-1;;;;;6882:22:6;;;;6843:29;-1:-1:-1;6971:6:6;6954:23;;;6946:32;;;;;;7107:8;;7090:13;:25;;:142;;7224:8;;7211:10;:8;:10::i;:::-;:21;7090:142;;;7163:13;7150:10;:8;:10::i;:::-;:26;7090:142;7070:17;;;:162;7242:11;;;:24;;-1:-1:-1;;7242:24:6;;-1:-1:-1;;;;;7242:24:6;;;;;;7276:8;;;:18;;;7304:14;7070:17;7313:5;;7304:14;:::i;:::-;-1:-1:-1;7328:11:6;;;:24;;;7362:7;;;:16;;-1:-1:-1;;;;;;7362:16:6;-1:-1:-1;;;;;7362:16:6;;;;;;;;;;;7422:11;;;;7435:8;;;;7422:11;;;;;;;7411:9;;7393:73;;7435:8;7445:7;7328:24;7393:73;;;;;-1:-1:-1;;;;;7393:73:6;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;7483:9:6;6304:1195;-1:-1:-1;;;;;;;;6304:1195:6:o;1219:37:8:-;;;-1:-1:-1;;;;;1219:37:8;;:::o;12397:76:6:-;12463:3;12397:76;:::o;8637:392:1:-;-1:-1:-1;;;;;8740:21:1;;8709:11;8740:21;;;:14;:21;;;;;;;;8732:30;;;;;;;;-1:-1:-1;8781:7:1;-1:-1:-1;;;;;8827:10:1;;;8823:59;;;-1:-1:-1;8862:9:1;8823:59;8909:1;8900:10;;8892:19;;;;;;-1:-1:-1;;;;;8926:10:1;;;8922:101;;8966:5;-1:-1:-1;;;;;8960:25:1;;8986:10;8998:4;9004:6;8960:51;;-1:-1:-1;;;8960:51:1;;;;;;-1:-1:-1;;;;;8960:51:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8952:60;;;;;;;;8637:392;;;;:::o;7685:822:6:-;3669:6;;7910:17;;3669:6;;3668:7;;:41;;-1:-1:-1;3679:30:6;;;;3668:41;3660:50;;;;;;;;7873:18;:25;7860:38;;7852:47;;;;;;7930:18;:30;;7949:10;;7930:30;;;;;;;;;;;;;;8054:9;7930:30;;;;;8054:9;;;;-1:-1:-1;;;;;8054:9:6;8038:26;;:15;:26;;;;;;;7930:30;;-1:-1:-1;8038:26:6;;8030:35;;;;;;;;8097:1;:17;;;8083:10;:8;:10::i;:::-;:31;;8075:40;;;;;;8134:10;;;;;;8133:11;8125:20;;;;;;8164:6;;;;;;;;;8163:7;8155:16;;;;;;8182:6;;;:13;;-1:-1:-1;;8182:13:6;;;;;8271:7;;;;-1:-1:-1;;;;;8271:7:6;:12;8267:159;;;8299:11;;;;8320:8;;;;8299:11;;;;-1:-1:-1;;;;;8299:11:6;;:30;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8267:159;;;8374:7;;;;8392:11;;;;8405:8;;;;-1:-1:-1;;;;;8374:7:6;;;;8368:23;;8392:11;;;;;8368:46;;-1:-1:-1;;;8368:46:6;;;;;;-1:-1:-1;;;;;8368:46:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8360:55;;;;;;;;8469:11;;;;8482:8;;;;8492:7;;;;-1:-1:-1;;;;;8469:11:6;;;;;;;8457:10;;8441:59;;8482:8;;8492:7;8441:59;;;;;-1:-1:-1;;;;;8441:59:6;;;;;;;;;;;;;;;;7685:822;;:::o;724:100:5:-;1171:5:9;;1157:10;-1:-1:-1;;;;;1157:19:9;;;1171:5;;1157:19;1148:29;;;;;;446:6:5;;;;445:7;437:16;;;;;;782:6;:13;;-1:-1:-1;;782:13:5;791:4;782:13;;;810:7;;;;;;;;;;724:100::o;1250:7781:1:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1250:7781:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1250:7781:1;;;-1:-1:-1;1250:7781:1;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;1250:7781:1;;;;;;;;;;;;-1:-1:-1;;;;;;1250:7781:1;;;;;;;;;;;;;;;;;-1:-1:-1;;1250:7781:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::o"
          },
          "methodIdentifiers": {
            "absoluteMinTimeLock()": "ea8a66c7",
            "acceptOwnership()": "79ba5097",
            "allowDisbursePaymentWhenPaused()": "859bcc71",
            "allowedSpenders(address)": "d8528af0",
            "authorizePayment(string,bytes32,address,address,uint256,uint256)": "f37b74ca",
            "authorizeSpender(address,bool)": "793c0fd4",
            "authorizedPayments(uint256)": "a0927a6a",
            "cancelPayment(uint256)": "8422927d",
            "changeHatchEscapeCaller(address)": "d836fbe8",
            "changeOwnership(address)": "2af4c31e",
            "checkIn()": "183ff085",
            "delayPayment(uint256,uint256)": "846a5dde",
            "depositEscapedFunds()": "bd541ad0",
            "disburseAuthorizedPayment(uint256)": "52892478",
            "disburseAuthorizedPayments(uint256[])": "863da000",
            "donate(uint64,uint64)": "bde60ac9",
            "donate(uint64,uint64,address,uint256)": "4c4316c7",
            "donateAndCreateGiver(address,uint64)": "91f5c3a8",
            "donateAndCreateGiver(address,uint64,address,uint256)": "1870c10f",
            "escapeFunds(address,uint256)": "1b28591c",
            "escapeHatch(address)": "a142d608",
            "escapeHatchCaller()": "1f6eb6e7",
            "escapeHatchDestination()": "f5b61230",
            "isTokenEscapable(address)": "892db057",
            "maxSecurityGuardDelay()": "0b2e7423",
            "newOwnerCandidate()": "d091b550",
            "numberOfAuthorizedPayments()": "68b8c5a1",
            "owner()": "8da5cb5b",
            "pause()": "8456cb59",
            "paused()": "5c975abb",
            "proposeOwnership(address)": "710bf322",
            "removeOwnership(address)": "666a3427",
            "securityGuard()": "b2ca3ec4",
            "securityGuardLastCheckin()": "3f487b8b",
            "setAllowDisbursePaymentWhenPaused(bool)": "672f412c",
            "setMaxSecurityGuardDelay(uint256)": "da4793ac",
            "setSecurityGuard(address)": "bb2a51d1",
            "setTimelock(uint256)": "1e891c0a",
            "timeLock()": "d085835a",
            "unpause()": "3f4ba83a",
            "whitelistToken(address,bool)": "0ffb1d8b"
          }
        },
        "metadata": "{\"compiler\":{\"version\":\"0.4.21+commit.dfe3193c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[],\"name\":\"maxSecurityGuardDelay\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"accepted\",\"type\":\"bool\"}],\"name\":\"whitelistToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"checkIn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"giver\",\"type\":\"address\"},{\"name\":\"receiverId\",\"type\":\"uint64\"},{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"donateAndCreateGiver\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"escapeFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newTimeLock\",\"type\":\"uint256\"}],\"name\":\"setTimelock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"escapeHatchCaller\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"securityGuardLastCheckin\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"giverId\",\"type\":\"uint64\"},{\"name\":\"receiverId\",\"type\":\"uint64\"},{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"donate\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_idPayment\",\"type\":\"uint256\"}],\"name\":\"disburseAuthorizedPayment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dac\",\"type\":\"address\"}],\"name\":\"removeOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"setAllowDisbursePaymentWhenPaused\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numberOfAuthorizedPayments\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwnerCandidate\",\"type\":\"address\"}],\"name\":\"proposeOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_authorize\",\"type\":\"bool\"}],\"name\":\"authorizeSpender\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_idPayment\",\"type\":\"uint256\"}],\"name\":\"cancelPayment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_idPayment\",\"type\":\"uint256\"},{\"name\":\"_delay\",\"type\":\"uint256\"}],\"name\":\"delayPayment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allowDisbursePaymentWhenPaused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_idPayments\",\"type\":\"uint256[]\"}],\"name\":\"disburseAuthorizedPayments\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"isTokenEscapable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"giver\",\"type\":\"address\"},{\"name\":\"receiverId\",\"type\":\"uint64\"}],\"name\":\"donateAndCreateGiver\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"authorizedPayments\",\"outputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"reference\",\"type\":\"bytes32\"},{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"earliestPayTime\",\"type\":\"uint256\"},{\"name\":\"canceled\",\"type\":\"bool\"},{\"name\":\"paid\",\"type\":\"bool\"},{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"securityGuardDelay\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"escapeHatch\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"securityGuard\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newSecurityGuard\",\"type\":\"address\"}],\"name\":\"setSecurityGuard\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"depositEscapedFunds\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"giverId\",\"type\":\"uint64\"},{\"name\":\"receiverId\",\"type\":\"uint64\"}],\"name\":\"donate\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"timeLock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwnerCandidate\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newEscapeHatchCaller\",\"type\":\"address\"}],\"name\":\"changeHatchEscapeCaller\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowedSpenders\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_maxSecurityGuardDelay\",\"type\":\"uint256\"}],\"name\":\"setMaxSecurityGuardDelay\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"absoluteMinTimeLock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_reference\",\"type\":\"bytes32\"},{\"name\":\"_recipient\",\"type\":\"address\"},{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_paymentDelay\",\"type\":\"uint256\"}],\"name\":\"authorizePayment\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"escapeHatchDestination\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_escapeHatchCaller\",\"type\":\"address\"},{\"name\":\"_escapeHatchDestination\",\"type\":\"address\"},{\"name\":\"_absoluteMinTimeLock\",\"type\":\"uint256\"},{\"name\":\"_timeLock\",\"type\":\"uint256\"},{\"name\":\"_securityGuard\",\"type\":\"address\"},{\"name\":\"_maxSecurityGuardDelay\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"giverId\",\"type\":\"uint64\"},{\"indexed\":false,\"name\":\"receiverId\",\"type\":\"uint64\"},{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Donate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"giver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"receiverId\",\"type\":\"uint64\"},{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DonateAndCreateGiver\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EscapeFundsCalled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"idPayment\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"reference\",\"type\":\"bytes32\"}],\"name\":\"PaymentAuthorized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"idPayment\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"}],\"name\":\"PaymentExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"idPayment\",\"type\":\"uint256\"}],\"name\":\"PaymentCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"authorized\",\"type\":\"bool\"}],\"name\":\"SpenderAuthorization\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"}],\"name\":\"EscapeHatchBlackistedToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EscapeHatchCalled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"by\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"OwnershipRemoved\",\"type\":\"event\"}],\"devdoc\":{\"methods\":{\"authorizePayment(string,bytes32,address,address,uint256,uint256)\":{\"params\":{\"_amount\":\"Amount to be paid in wei\",\"_name\":\"Brief description of the payment that is authorized\",\"_paymentDelay\":\"Number of seconds the payment is to be delayed, if  this value is below `timeLock` then the `timeLock` determines the delay\",\"_recipient\":\"Destination of the payment\",\"_reference\":\"External reference of the payment\"},\"return\":\"The Payment ID number for the new authorized payment\"},\"authorizeSpender(address,bool)\":{\"params\":{\"_authorize\":\"`true` if authorizing and `false` if unauthorizing\",\"_spender\":\"The address of the contract being authorized/unauthorized\"}},\"cancelPayment(uint256)\":{\"params\":{\"_idPayment\":\"ID of the payment to be canceled.\"}},\"changeHatchEscapeCaller(address)\":{\"params\":{\"_newEscapeHatchCaller\":\"The address of a trusted account or  contract to call `escapeHatch()` to send the value in this contract to  the `escapeHatchDestination`; it would be ideal that `escapeHatchCaller`  cannot move funds out of `escapeHatchDestination`\"}},\"changeOwnership(address)\":{\"details\":\"In this 2nd option for ownership transfer `changeOwnership()` can  be called and it will immediately assign ownership to the `newOwner`\",\"params\":{\"_newOwner\":\"The address of the new owner\"}},\"delayPayment(uint256,uint256)\":{\"params\":{\"_delay\":\"The number of seconds to delay the payment\",\"_idPayment\":\"ID of the payment to be delayed\"}},\"disburseAuthorizedPayment(uint256)\":{\"params\":{\"_idPayment\":\"The payment ID to be disbursed\"}},\"donate(uint64,uint64)\":{\"params\":{\"giverId\":\"The adminId of the liquidPledging pledge admin who is donating\",\"receiverId\":\"The adminId of the liquidPledging pledge admin receiving the donation\"}},\"donate(uint64,uint64,address,uint256)\":{\"params\":{\"_amount\":\"The amount of the token to donate. If donating ETH, then 0x0 as the msg.value will be used instead.\",\"giverId\":\"The adminId of the liquidPledging pledge admin who is donating\",\"receiverId\":\"The adminId of the liquidPledging pledge admin receiving the donation\",\"token\":\"The token to donate. If donating ETH, then 0x0. Note: the token must be whitelisted\"}},\"donateAndCreateGiver(address,uint64)\":{\"params\":{\"giver\":\"The address to create a 'giver' pledge admin for in the liquidPledging contract\",\"receiverId\":\"The adminId of the liquidPledging pledge admin receiving the donation\"}},\"donateAndCreateGiver(address,uint64,address,uint256)\":{\"params\":{\"_amount\":\"The amount of the token to donate. If donating ETH, then 0x0 as the msg.value will be used instead.\",\"giver\":\"The address to create a 'giver' pledge admin for in the liquidPledging contract\",\"receiverId\":\"The adminId of the liquidPledging pledge admin receiving the donation\",\"token\":\"The token to donate. If donating ETH, then 0x0. Note: the token must be whitelisted\"}},\"escapeFunds(address,uint256)\":{\"params\":{\"_amount\":\"the amount to transfer\",\"_token\":\"the token to transfer. 0x0 for ETH\"}},\"escapeHatch(address)\":{\"params\":{\"_token\":\"to transfer, use 0x0 for ether\"}},\"isTokenEscapable(address)\":{\"params\":{\"_token\":\"the token address being queried\"},\"return\":\"False if `_token` is in the blacklist and can't be taken out of  the contract via the `escapeHatch()`\"},\"numberOfAuthorizedPayments()\":{\"return\":\"The number of payments ever authorized even if they were canceled\"},\"pause()\":{\"details\":\"called by the owner to pause the contract. Triggers a stopped state   and resets allowDisbursePaymentWhenPaused to false\"},\"proposeOwnership(address)\":{\"details\":\"In this 1st option for ownership transfer `proposeOwnership()` must  be called first by the current `owner` then `acceptOwnership()` must be  called by the `newOwnerCandidate`\",\"params\":{\"_newOwnerCandidate\":\"The address being proposed as the new owner\"}},\"removeOwnership(address)\":{\"details\":\"In this 3rd option for ownership transfer `removeOwnership()` can  be called and it will immediately assign ownership to the 0x0 address;  it requires a 0xdece be input as a parameter to prevent accidental use\",\"params\":{\"_dac\":\"`0xdac` has to be entered for this function to work\"}},\"setAllowDisbursePaymentWhenPaused(bool)\":{\"details\":\"only callable whenPaused b/c pausing the contract will reset `allowDisbursePaymentWhenPaused` to false\",\"params\":{\"allowed\":\"`true` if allowing payments to be disbursed when paused, otherwise 'false'\"}},\"setMaxSecurityGuardDelay(uint256)\":{\"params\":{\"_maxSecurityGuardDelay\":\"The new maximum delay in seconds that  `securityGuard` can delay the payment's execution in total\"}},\"setSecurityGuard(address)\":{\"params\":{\"_newSecurityGuard\":\"Address of the new security guard\"}},\"setTimelock(uint256)\":{\"params\":{\"_newTimeLock\":\"Sets the new minimum default `timeLock` in seconds;  pending payments maintain their `earliestPayTime`\"}},\"unpause()\":{\"details\":\"called by the owner to unpause, returns to normal state\"},\"whitelistToken(address,bool)\":{\"params\":{\"accepted\":\"Wether or not to accept this token for donations\",\"token\":\"The address of the token to update\"}}}},\"userdoc\":{\"methods\":{\"acceptOwnership()\":{\"notice\":\"Can only be called by the `newOwnerCandidate`, accepts the  transfer of ownership\"},\"authorizePayment(string,bytes32,address,address,uint256,uint256)\":{\"notice\":\"/////only `allowedSpenders[]` Creates a new `Payment`\"},\"authorizeSpender(address,bool)\":{\"notice\":\"`onlyOwner` Adds a spender to the `allowedSpenders[]` white list\"},\"cancelPayment(uint256)\":{\"notice\":\"////`onlyOwner` Cancel a payment all together\"},\"changeHatchEscapeCaller(address)\":{\"notice\":\"Changes the address assigned to call `escapeHatch()`\"},\"changeOwnership(address)\":{\"notice\":\"`owner` can step down and assign some other address to this role\"},\"checkIn()\":{\"notice\":\"`onlySecurityGuard` can checkin. If they fail to checkin, payments will not be allowed to be disbursed, unless the payment has an `earliestPayTime` <= `securityGuardLastCheckin`.To reduce the risk of a front-running attack on payments, it is important that this is called with a resonable gasPrice set for the current network congestion. If this tx is not mined, within 30 mins of being sent, it is possible that a payment can be authorized w/o the securityGuard's knowledge\"},\"delayPayment(uint256,uint256)\":{\"notice\":\"//////`onlySecurityGuard` Delays a payment for a set number of seconds\"},\"depositEscapedFunds()\":{\"notice\":\"Allow the escapeHatchDestination to deposit eth into this contract w/o calling donate method\"},\"disburseAuthorizedPayment(uint256)\":{\"notice\":\"Disburse an authorizedPayment to the recipient if all checks pass.\"},\"disburseAuthorizedPayments(uint256[])\":{\"notice\":\"convience function to disburse multiple payments in a single tx\"},\"donate(uint64,uint64)\":{\"notice\":\"It is not recommened to call this function outside of the giveth dapp (giveth.io) this function is bridged to a side chain. If for some reason the sidechain tx fails, the donation will end up in the givers control inside LiquidPledging contract. If you do not use the dapp, there will be no way of notifying the sender/giver that the giver has to take action (withdraw/donate) in the dapp\"},\"donate(uint64,uint64,address,uint256)\":{\"notice\":\"It is not recommened to call this function outside of the giveth dapp (giveth.io) this function is bridged to a side chain. If for some reason the sidechain tx fails, the donation will end up in the givers control inside LiquidPledging contract. If you do not use the dapp, there will be no way of notifying the sender/giver that the giver has to take action (withdraw/donate) in the dapp\"},\"donateAndCreateGiver(address,uint64)\":{\"notice\":\"It is not recommened to call this function outside of the giveth dapp (giveth.io) this function is bridged to a side chain. If for some reason the sidechain tx fails, the donation will end up in the givers control inside LiquidPledging contract. If you do not use the dapp, there will be no way of notifying the sender/giver that the giver has to take action (withdraw/donate) in the dapp\"},\"donateAndCreateGiver(address,uint64,address,uint256)\":{\"notice\":\"It is not recommened to call this function outside of the giveth dapp (giveth.io) this function is bridged to a side chain. If for some reason the sidechain tx fails, the donation will end up in the givers control inside LiquidPledging contract. If you do not use the dapp, there will be no way of notifying the sender/giver that the giver has to take action (withdraw/donate) in the dapp\"},\"escapeFunds(address,uint256)\":{\"notice\":\"Transfer tokens/eth to the escapeHatchDestination. Used as a safety mechanism to prevent the bridge from holding too much value    * before being thoroughly battle-tested.\"},\"escapeHatch(address)\":{\"notice\":\"The `escapeHatch()` should only be called as a last resort if a security issue is uncovered or something unexpected happened\"},\"isTokenEscapable(address)\":{\"notice\":\"Checks to see if `_token` is in the blacklist of tokens\"},\"numberOfAuthorizedPayments()\":{\"notice\":\"//////States the total number of authorized payments in this contract\"},\"proposeOwnership(address)\":{\"notice\":\"`onlyOwner` Proposes to transfer control of the contract to a  new owner\"},\"removeOwnership(address)\":{\"notice\":\"Decentralizes the contract, this operation cannot be undone \"},\"setAllowDisbursePaymentWhenPaused(bool)\":{\"notice\":\"Owner can allow payment disbursement when the contract is paused. This is so the bridge can be upgraded without having to migrate any existing authorizedPayments\"},\"setMaxSecurityGuardDelay(uint256)\":{\"notice\":\"`onlyOwner` Changes the maximum number of seconds `securityGuard` can delay a payment\"},\"setSecurityGuard(address)\":{\"notice\":\"`onlyOwner` Sets the address of `securityGuard`\"},\"setTimelock(uint256)\":{\"notice\":\"`onlyOwner` Changes `timeLock`; the new `timeLock` cannot be  lower than `absoluteMinTimeLock`\"},\"whitelistToken(address,bool)\":{\"notice\":\"The `owner` can call this function to add/remove a token from the whitelist\"}}}},\"settings\":{\"compilationTarget\":{\"./contracts/GivethBridge.sol\":\"GivethBridge\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"./contracts/GivethBridge.sol\":{\"content\":\"pragma solidity ^0.4.21;\\n\\n/*\\n    Copyright 2017, RJ Ewing <perissology@protonmail.com>\\n\\n    This program is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU General Public License as published by\\n    the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    This program is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU General Public License for more details.\\n\\n    You should have received a copy of the GNU General Public License\\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n*/\\n\\nimport \\\"giveth-common-contracts/contracts/ERC20.sol\\\";\\nimport \\\"./lib/FailClosedVault.sol\\\";\\n\\n\\n/**\\n* @notice It is not recommened to call this function outside of the giveth dapp (giveth.io)\\n* this function is bridged to a side chain. If for some reason the sidechain tx fails, the donation\\n* will end up in the givers control inside LiquidPledging contract. If you do not use the dapp, there\\n* will be no way of notifying the sender/giver that the giver has to take action (withdraw/donate) in\\n* the dapp\\n*/\\ncontract GivethBridge is FailClosedVault {\\n\\n    mapping(address => bool) tokenWhitelist;\\n\\n    event Donate(uint64 giverId, uint64 receiverId, address token, uint amount);\\n    event DonateAndCreateGiver(address giver, uint64 receiverId, address token, uint amount);\\n    event EscapeFundsCalled(address token, uint amount);\\n\\n    //== constructor\\n\\n    /**\\n    * @param _escapeHatchCaller The address of a trusted account or contract to\\n    *  call `escapeHatch()` to send the ether in this contract to the\\n    *  `escapeHatchDestination` in the case on an emergency. it would be ideal \\n    *  if `escapeHatchCaller` cannot move funds out of `escapeHatchDestination`\\n    * @param _escapeHatchDestination The address of a safe location (usually a\\n    *  Multisig) to send the ether held in this contract in the case of an emergency\\n    * @param _absoluteMinTimeLock The minimum number of seconds `timelock` can\\n    *  be set to, if set to 0 the `owner` can remove the `timeLock` completely\\n    * @param _timeLock Minimum number of seconds that payments are delayed\\n    *  after they are authorized (a security precaution)\\n    * @param _securityGuard Address that will be able to delay the payments\\n    *  beyond the initial timelock requirements; can be set to 0x0 to remove\\n    *  the `securityGuard` functionality\\n    * @param _maxSecurityGuardDelay The maximum number of seconds in total\\n    *   that `securityGuard` can delay a payment so that the owner can cancel\\n    *   the payment if needed\\n    */\\n    function GivethBridge(\\n        address _escapeHatchCaller,\\n        address _escapeHatchDestination,\\n        uint _absoluteMinTimeLock,\\n        uint _timeLock,\\n        address _securityGuard,\\n        uint _maxSecurityGuardDelay\\n    ) FailClosedVault(\\n        _escapeHatchCaller,\\n        _escapeHatchDestination,\\n        _absoluteMinTimeLock,\\n        _timeLock,\\n        _securityGuard,\\n        _maxSecurityGuardDelay\\n    ) public\\n    {\\n        tokenWhitelist[0] = true; // enable eth transfers\\n    }\\n\\n    //== public methods\\n\\n    /**\\n    * @notice It is not recommened to call this function outside of the giveth dapp (giveth.io)\\n    * this function is bridged to a side chain. If for some reason the sidechain tx fails, the donation\\n    * will end up in the givers control inside LiquidPledging contract. If you do not use the dapp, there\\n    * will be no way of notifying the sender/giver that the giver has to take action (withdraw/donate) in\\n    * the dapp\\n    *\\n    * @param giver The address to create a 'giver' pledge admin for in the liquidPledging contract\\n    * @param receiverId The adminId of the liquidPledging pledge admin receiving the donation\\n    */\\n    function donateAndCreateGiver(address giver, uint64 receiverId) payable external {\\n        donateAndCreateGiver(giver, receiverId, 0, 0);\\n    }\\n\\n    /**\\n    * @notice It is not recommened to call this function outside of the giveth dapp (giveth.io)\\n    * this function is bridged to a side chain. If for some reason the sidechain tx fails, the donation\\n    * will end up in the givers control inside LiquidPledging contract. If you do not use the dapp, there\\n    * will be no way of notifying the sender/giver that the giver has to take action (withdraw/donate) in\\n    * the dapp\\n    *\\n    * @param giver The address to create a 'giver' pledge admin for in the liquidPledging contract\\n    * @param receiverId The adminId of the liquidPledging pledge admin receiving the donation\\n    * @param token The token to donate. If donating ETH, then 0x0. Note: the token must be whitelisted\\n    * @param _amount The amount of the token to donate. If donating ETH, then 0x0 as the msg.value will be used instead.\\n    */\\n    function donateAndCreateGiver(address giver, uint64 receiverId, address token, uint _amount) whenNotPaused payable public {\\n        require(giver != 0);\\n        require(receiverId != 0);\\n        uint amount = _receiveDonation(token, _amount);\\n        emit DonateAndCreateGiver(giver, receiverId, token, amount);\\n    }\\n\\n    /**\\n    * @notice It is not recommened to call this function outside of the giveth dapp (giveth.io)\\n    * this function is bridged to a side chain. If for some reason the sidechain tx fails, the donation\\n    * will end up in the givers control inside LiquidPledging contract. If you do not use the dapp, there\\n    * will be no way of notifying the sender/giver that the giver has to take action (withdraw/donate) in\\n    * the dapp\\n    *\\n    * @param giverId The adminId of the liquidPledging pledge admin who is donating\\n    * @param receiverId The adminId of the liquidPledging pledge admin receiving the donation\\n    */\\n    function donate(uint64 giverId, uint64 receiverId) payable external {\\n        donate(giverId, receiverId, 0, 0);\\n    }\\n\\n    /**\\n    * @notice It is not recommened to call this function outside of the giveth dapp (giveth.io)\\n    * this function is bridged to a side chain. If for some reason the sidechain tx fails, the donation\\n    * will end up in the givers control inside LiquidPledging contract. If you do not use the dapp, there\\n    * will be no way of notifying the sender/giver that the giver has to take action (withdraw/donate) in\\n    * the dapp\\n    *\\n    * @param giverId The adminId of the liquidPledging pledge admin who is donating\\n    * @param receiverId The adminId of the liquidPledging pledge admin receiving the donation\\n    * @param token The token to donate. If donating ETH, then 0x0. Note: the token must be whitelisted\\n    * @param _amount The amount of the token to donate. If donating ETH, then 0x0 as the msg.value will be used instead.\\n    */\\n    function donate(uint64 giverId, uint64 receiverId, address token, uint _amount) whenNotPaused payable public {\\n        require(giverId != 0);\\n        require(receiverId != 0);\\n        uint amount = _receiveDonation(token, _amount);\\n        emit Donate(giverId, receiverId, token, amount);\\n    }\\n\\n    /**\\n    * The `owner` can call this function to add/remove a token from the whitelist\\n    *\\n    * @param token The address of the token to update\\n    * @param accepted Wether or not to accept this token for donations\\n    */\\n    function whitelistToken(address token, bool accepted) whenNotPaused onlyOwner external {\\n        tokenWhitelist[token] = accepted;\\n    }\\n\\n    /**\\n    * Transfer tokens/eth to the escapeHatchDestination.\\n    * Used as a safety mechanism to prevent the bridge from holding too much value\\n    *\\n    * before being thoroughly battle-tested.\\n    * @param _token the token to transfer. 0x0 for ETH\\n    * @param _amount the amount to transfer\\n    */\\n    function escapeFunds(address _token, uint _amount) external onlyEscapeHatchCallerOrOwner {\\n        // @dev Logic for ether\\n        if (_token == 0) {\\n            escapeHatchDestination.transfer(_amount);\\n        // @dev Logic for tokens\\n        } else {\\n            ERC20 token = ERC20(_token);\\n            require(token.transfer(escapeHatchDestination, _amount));\\n        }\\n        emit EscapeFundsCalled(_token, _amount);\\n    }\\n\\n    /**\\n    * Allow the escapeHatchDestination to deposit eth into this contract w/o calling donate method\\n    */\\n    function depositEscapedFunds() external payable {\\n        require(msg.sender == escapeHatchDestination);\\n    }\\n\\n    //== internal methods\\n\\n    /**\\n    * @dev used to actually receive the donation. Will transfer the token to to this contract\\n    */\\n    function _receiveDonation(address token, uint _amount) internal returns(uint amount) {\\n        require(tokenWhitelist[token]);\\n        amount = _amount;\\n\\n        // eth donation\\n        if (token == 0) {\\n            amount = msg.value;\\n        }\\n\\n        require(amount > 0);\\n\\n        if (token != 0) {\\n            require(ERC20(token).transferFrom(msg.sender, this, amount));\\n        }\\n    }\\n}\",\"keccak256\":\"0xd061316db9fd3c2ca1beeea0d5194d1c6fcc1b52de3c7fba4c8e449218203847\"},\"./contracts/lib/FailClosedVault.sol\":{\"content\":\"pragma solidity ^0.4.21;\\n\\n/*\\n    Copyright 2018, RJ Ewing\\n\\n    This program is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU General Public License as published by\\n    the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    This program is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU General Public License for more details.\\n\\n    You should have received a copy of the GNU General Public License\\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n */\\n\\nimport \\\"./Vault.sol\\\";\\n\\n/**\\n* @dev `FailClosedVault` is a version of the vault that requires\\n*  the securityGuard to \\\"see\\\" each payment before it can be collected\\n*/\\ncontract FailClosedVault is Vault {\\n    uint public securityGuardLastCheckin;\\n\\n    /**\\n    * @param _absoluteMinTimeLock For this version of the vault, it is recommended\\n    *   that this value is > 24hrs. If not, it will require the securityGuard to checkIn\\n    *   multiple times a day. Also consider that `securityGuardLastCheckin >= payment.earliestPayTime - timelock + 30mins);`\\n    *   is the condition to allow payments to be payed. The additional 30 mins is to reduce (not eliminate)\\n    *   the risk of front-running\\n    */\\n    function FailClosedVault(\\n        address _escapeHatchCaller,\\n        address _escapeHatchDestination,\\n        uint _absoluteMinTimeLock,\\n        uint _timeLock,\\n        address _securityGuard,\\n        uint _maxSecurityGuardDelay\\n    ) Vault(\\n        _escapeHatchCaller,\\n        _escapeHatchDestination, \\n        _absoluteMinTimeLock,\\n        _timeLock,\\n        _securityGuard,\\n        _maxSecurityGuardDelay\\n    ) public {\\n    }\\n\\n/////////////////////\\n// Spender Interface\\n/////////////////////\\n\\n    /**\\n    * Disburse an authorizedPayment to the recipient if all checks pass.\\n    *\\n    * @param _idPayment The payment ID to be disbursed\\n    */\\n    function disburseAuthorizedPayment(uint _idPayment) disbursementsAllowed public {\\n        // Check that the `_idPayment` has been added to the payments struct\\n        require(_idPayment < authorizedPayments.length);\\n\\n        Payment storage p = authorizedPayments[_idPayment];\\n        // The current minimum delay for a payment is `timeLock`. Thus the following ensuress\\n        // that the `securityGuard` has checked in after the payment was created\\n        // @notice earliestPayTime is updated when a payment is delayed. Which may require\\n        // another checkIn before the payment can be collected.\\n        // @notice We add 30 mins to this to reduce (not eliminate) the risk of front-running\\n        require(securityGuardLastCheckin >= p.earliestPayTime - timeLock + 30 minutes);\\n\\n        super.disburseAuthorizedPayment(_idPayment);\\n    }\\n\\n///////////////////////////\\n// SecurityGuard Interface\\n///////////////////////////\\n\\n    /**\\n    * @notice `onlySecurityGuard` can checkin. If they fail to checkin,\\n    * payments will not be allowed to be disbursed, unless the payment has\\n    * an `earliestPayTime` <= `securityGuardLastCheckin`.\\n    * @notice To reduce the risk of a front-running attack on payments, it\\n    * is important that this is called with a resonable gasPrice set for the\\n    * current network congestion. If this tx is not mined, within 30 mins\\n    * of being sent, it is possible that a payment can be authorized w/o the\\n    * securityGuard's knowledge\\n    */\\n    function checkIn() onlySecurityGuard external {\\n        securityGuardLastCheckin = _getTime();\\n    }\\n}\",\"keccak256\":\"0x62fc5761fc90bd42b4c504be4cb94f05343bd678452f5ed1e794b1e98a5174d1\"},\"./contracts/lib/Pausable.sol\":{\"content\":\"pragma solidity ^0.4.21;\\n\\nimport \\\"giveth-common-contracts/contracts/Owned.sol\\\";\\n\\n/**\\n * @title Pausable\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\n */\\ncontract Pausable is Owned {\\n    event Pause();\\n    event Unpause();\\n\\n    bool public paused = false;\\n\\n    /**\\n    * @dev Modifier to make a function callable only when the contract is not paused.\\n    */\\n    modifier whenNotPaused() {\\n        require(!paused);\\n        _;\\n    }\\n\\n    /**\\n    * @dev Modifier to make a function callable only when the contract is paused.\\n    */\\n    modifier whenPaused() {\\n        require(paused);\\n        _;\\n    }\\n\\n    /**\\n    * @dev called by the owner to pause, triggers stopped state\\n    */\\n    function pause() onlyOwner whenNotPaused public {\\n        paused = true;\\n        emit Pause();\\n    }\\n\\n    /**\\n    * @dev called by the owner to unpause, returns to normal state\\n    */\\n    function unpause() onlyOwner whenPaused public {\\n        paused = false;\\n        emit Unpause();\\n    }\\n}\",\"keccak256\":\"0xd134809350f024c16096d995915c6a348d770e1ec633723419f4f3acbd1e4b46\"},\"./contracts/lib/Vault.sol\":{\"content\":\"pragma solidity ^0.4.21;\\n\\n/*\\n    Copyright 2018, Jordi Baylina, RJ Ewing\\n\\n    This program is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU General Public License as published by\\n    the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    This program is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU General Public License for more details.\\n\\n    You should have received a copy of the GNU General Public License\\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n */\\n\\n/// @title Vault Contract\\n/// @author Jordi Baylina, RJ Ewing\\n/// @notice This contract holds funds for Campaigns and automates payments. For\\n///  this iteration the funds will come straight from the Giveth Multisig as a\\n///  safety precaution, but once fully tested and optimized this contract will\\n///  be a safe place to store funds equipped with optional variable time delays\\n///  to allow for an optional escape hatch\\n\\nimport \\\"giveth-common-contracts/contracts/Escapable.sol\\\";\\nimport \\\"./Pausable.sol\\\";\\n\\n/// @dev `Vault` is a higher level contract built off of the `Escapable`\\n///  contract that holds funds for Campaigns and automates payments.\\ncontract Vault is Escapable, Pausable {\\n\\n    /// @dev `Payment` is a public structure that describes the details of\\n    ///  each payment making it easy to track the movement of funds\\n    ///  transparently\\n    struct Payment {\\n        string name;              // What is the purpose of this payment\\n        bytes32 reference;        // Reference of the payment.\\n        address spender;          // Who is sending the funds\\n        uint earliestPayTime;     // The earliest a payment can be made (Unix Time)\\n        bool canceled;            // If True then the payment has been canceled\\n        bool paid;                // If True then the payment has been paid\\n        address recipient;        // Who is receiving the funds\\n        address token;            // Token this payment represents\\n        uint amount;              // The amount of wei sent in the payment\\n        uint securityGuardDelay;  // The seconds `securityGuard` can delay payment\\n    }\\n\\n    Payment[] public authorizedPayments;\\n\\n    address public securityGuard;\\n    uint public absoluteMinTimeLock;\\n    uint public timeLock;\\n    uint public maxSecurityGuardDelay;\\n    bool public allowDisbursePaymentWhenPaused;\\n\\n    /// @dev The white list of approved addresses allowed to set up && receive\\n    ///  payments from this vault\\n    mapping (address => bool) public allowedSpenders;\\n\\n    // @dev Events to make the payment movements easy to find on the blockchain\\n    event PaymentAuthorized(uint indexed idPayment, address indexed recipient, uint amount, address token, bytes32 reference);\\n    event PaymentExecuted(uint indexed idPayment, address indexed recipient, uint amount, address token);\\n    event PaymentCanceled(uint indexed idPayment);\\n    event SpenderAuthorization(address indexed spender, bool authorized);\\n\\n    /// @dev The address assigned the role of `securityGuard` is the only\\n    ///  addresses that can call a function with this modifier\\n    modifier onlySecurityGuard { \\n        require(msg.sender == securityGuard);\\n        _;\\n    }\\n\\n    /// By default, we dis-allow payment disburements if the contract is paused.\\n    /// However, to facilitate a migration of the bridge, we can allow\\n    /// disbursements when paused if explicitly set\\n    modifier disbursementsAllowed {\\n        require(!paused || allowDisbursePaymentWhenPaused);\\n        _;\\n    }\\n\\n    /// @notice The Constructor creates the Vault on the blockchain\\n    /// @param _escapeHatchCaller The address of a trusted account or contract to\\n    ///  call `escapeHatch()` to send the ether in this contract to the\\n    ///  `escapeHatchDestination` it would be ideal if `escapeHatchCaller` cannot move\\n    ///  funds out of `escapeHatchDestination`\\n    /// @param _escapeHatchDestination The address of a safe location (usu a\\n    ///  Multisig) to send the ether held in this contract in an emergency\\n    /// @param _absoluteMinTimeLock The minimum number of seconds `timelock` can\\n    ///  be set to, if set to 0 the `owner` can remove the `timeLock` completely\\n    /// @param _timeLock Initial number of seconds that payments are delayed\\n    ///  after they are authorized (a security precaution)\\n    /// @param _securityGuard Address that will be able to delay the payments\\n    ///  beyond the initial timelock requirements; can be set to 0x0 to remove\\n    ///  the `securityGuard` functionality\\n    /// @param _maxSecurityGuardDelay The maximum number of seconds in total\\n    ///   that `securityGuard` can delay a payment so that the owner can cancel\\n    ///   the payment if needed\\n    function Vault(\\n        address _escapeHatchCaller,\\n        address _escapeHatchDestination,\\n        uint _absoluteMinTimeLock,\\n        uint _timeLock,\\n        address _securityGuard,\\n        uint _maxSecurityGuardDelay\\n    ) Escapable(_escapeHatchCaller, _escapeHatchDestination) public\\n    {\\n        absoluteMinTimeLock = _absoluteMinTimeLock;\\n        timeLock = _timeLock;\\n        securityGuard = _securityGuard;\\n        maxSecurityGuardDelay = _maxSecurityGuardDelay;\\n    }\\n\\n/////////\\n// Helper functions\\n/////////\\n\\n    /// @notice States the total number of authorized payments in this contract\\n    /// @return The number of payments ever authorized even if they were canceled\\n    function numberOfAuthorizedPayments() public view returns (uint) {\\n        return authorizedPayments.length;\\n    }\\n\\n////////\\n// Spender Interface\\n////////\\n\\n    /// @notice only `allowedSpenders[]` Creates a new `Payment`\\n    /// @param _name Brief description of the payment that is authorized\\n    /// @param _reference External reference of the payment\\n    /// @param _recipient Destination of the payment\\n    /// @param _amount Amount to be paid in wei\\n    /// @param _paymentDelay Number of seconds the payment is to be delayed, if\\n    ///  this value is below `timeLock` then the `timeLock` determines the delay\\n    /// @return The Payment ID number for the new authorized payment\\n    function authorizePayment(\\n        string _name,\\n        bytes32 _reference,\\n        address _recipient,\\n        address _token,\\n        uint _amount,\\n        uint _paymentDelay\\n    ) whenNotPaused external returns(uint) {\\n\\n        // Fail if you arent on the `allowedSpenders` white list\\n        require(allowedSpenders[msg.sender]);\\n        uint idPayment = authorizedPayments.length;       // Unique Payment ID\\n        authorizedPayments.length++;\\n\\n        // The following lines fill out the payment struct\\n        Payment storage p = authorizedPayments[idPayment];\\n        p.spender = msg.sender;\\n\\n        // Overflow protection\\n        require(_paymentDelay <= 10**18);\\n\\n        // Determines the earliest the recipient can receive payment (Unix time)\\n        p.earliestPayTime = _paymentDelay >= timeLock ?\\n                                _getTime() + _paymentDelay :\\n                                _getTime() + timeLock;\\n        p.recipient = _recipient;\\n        p.amount = _amount;\\n        p.name = _name;\\n        p.reference = _reference;\\n        p.token = _token;\\n        emit PaymentAuthorized(idPayment, p.recipient, p.amount, p.token, p.reference);\\n        return idPayment;\\n    }\\n\\n    /// Anyone can call this function to disburse the payment to \\n    ///  the recipient after `earliestPayTime` has passed\\n    /// @param _idPayment The payment ID to be executed\\n    function disburseAuthorizedPayment(uint _idPayment) disbursementsAllowed public {\\n        // Check that the `_idPayment` has been added to the payments struct\\n        require(_idPayment < authorizedPayments.length);\\n\\n        Payment storage p = authorizedPayments[_idPayment];\\n\\n        // Checking for reasons not to execute the payment\\n        require(allowedSpenders[p.spender]);\\n        require(_getTime() >= p.earliestPayTime);\\n        require(!p.canceled);\\n        require(!p.paid);\\n\\n        p.paid = true; // Set the payment to being paid\\n\\n        // Make the payment\\n        if (p.token == 0) {\\n            p.recipient.transfer(p.amount);\\n        } else {\\n            require(ERC20(p.token).transfer(p.recipient, p.amount));\\n        }\\n\\n        emit PaymentExecuted(_idPayment, p.recipient, p.amount, p.token);\\n    }\\n\\n    /// convience function to disburse multiple payments in a single tx\\n    function disburseAuthorizedPayments(uint[] _idPayments) public {\\n        for (uint i = 0; i < _idPayments.length; i++) {\\n            uint _idPayment = _idPayments[i];\\n            disburseAuthorizedPayment(_idPayment);\\n        }\\n    }\\n\\n/////////\\n// SecurityGuard Interface\\n/////////\\n\\n    /// @notice `onlySecurityGuard` Delays a payment for a set number of seconds\\n    /// @param _idPayment ID of the payment to be delayed\\n    /// @param _delay The number of seconds to delay the payment\\n    function delayPayment(uint _idPayment, uint _delay) onlySecurityGuard external {\\n        require(_idPayment < authorizedPayments.length);\\n\\n        // Overflow test\\n        require(_delay <= 10**18);\\n\\n        Payment storage p = authorizedPayments[_idPayment];\\n\\n        require(p.securityGuardDelay + _delay <= maxSecurityGuardDelay);\\n        require(!p.paid);\\n        require(!p.canceled);\\n\\n        p.securityGuardDelay += _delay;\\n        p.earliestPayTime += _delay;\\n    }\\n\\n////////\\n// Owner Interface\\n///////\\n\\n    /// @notice `onlyOwner` Cancel a payment all together\\n    /// @param _idPayment ID of the payment to be canceled.\\n    function cancelPayment(uint _idPayment) onlyOwner external {\\n        require(_idPayment < authorizedPayments.length);\\n\\n        Payment storage p = authorizedPayments[_idPayment];\\n\\n        require(!p.canceled);\\n        require(!p.paid);\\n\\n        p.canceled = true;\\n        emit PaymentCanceled(_idPayment);\\n    }\\n\\n    /// @notice `onlyOwner` Adds a spender to the `allowedSpenders[]` white list\\n    /// @param _spender The address of the contract being authorized/unauthorized\\n    /// @param _authorize `true` if authorizing and `false` if unauthorizing\\n    function authorizeSpender(address _spender, bool _authorize) onlyOwner external {\\n        allowedSpenders[_spender] = _authorize;\\n        emit SpenderAuthorization(_spender, _authorize);\\n    }\\n\\n    /// @notice `onlyOwner` Sets the address of `securityGuard`\\n    /// @param _newSecurityGuard Address of the new security guard\\n    function setSecurityGuard(address _newSecurityGuard) onlyOwner external {\\n        securityGuard = _newSecurityGuard;\\n    }\\n\\n    /// @notice `onlyOwner` Changes `timeLock`; the new `timeLock` cannot be\\n    ///  lower than `absoluteMinTimeLock`\\n    /// @param _newTimeLock Sets the new minimum default `timeLock` in seconds;\\n    ///  pending payments maintain their `earliestPayTime`\\n    function setTimelock(uint _newTimeLock) onlyOwner external {\\n        require(_newTimeLock >= absoluteMinTimeLock);\\n        timeLock = _newTimeLock;\\n    }\\n\\n    /// @notice `onlyOwner` Changes the maximum number of seconds\\n    /// `securityGuard` can delay a payment\\n    /// @param _maxSecurityGuardDelay The new maximum delay in seconds that\\n    ///  `securityGuard` can delay the payment's execution in total\\n    function setMaxSecurityGuardDelay(uint _maxSecurityGuardDelay) onlyOwner external {\\n        maxSecurityGuardDelay = _maxSecurityGuardDelay;\\n    }\\n\\n    /// @dev called by the owner to pause the contract. Triggers a stopped state \\n    ///  and resets allowDisbursePaymentWhenPaused to false\\n    function pause() onlyOwner whenNotPaused public {\\n        allowDisbursePaymentWhenPaused = false;\\n        super.pause();\\n    }\\n\\n    /// Owner can allow payment disbursement when the contract is paused. This is so the\\n    /// bridge can be upgraded without having to migrate any existing authorizedPayments\\n    /// @dev only callable whenPaused b/c pausing the contract will reset `allowDisbursePaymentWhenPaused` to false\\n    /// @param allowed `true` if allowing payments to be disbursed when paused, otherwise 'false'\\n    function setAllowDisbursePaymentWhenPaused(bool allowed) onlyOwner whenPaused public {\\n        allowDisbursePaymentWhenPaused = allowed;\\n    }\\n\\n    // for overidding during testing\\n    function _getTime() internal view returns (uint) {\\n        return now;\\n    }\\n\\n}\",\"keccak256\":\"0x519df8e782548ae72e234de6f5c294def03beb3a3f9308093908311ba0bcd64a\"},\"giveth-common-contracts/contracts/ERC20.sol\":{\"content\":\"pragma solidity ^0.4.19;\\n\\n\\n/**\\n * @title ERC20\\n * @dev A standard interface for tokens.\\n * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\\n */\\ncontract ERC20 {\\n  \\n    /// @dev Returns the total token supply\\n    function totalSupply() public constant returns (uint256 supply);\\n\\n    /// @dev Returns the account balance of the account with address _owner\\n    function balanceOf(address _owner) public constant returns (uint256 balance);\\n\\n    /// @dev Transfers _value number of tokens to address _to\\n    function transfer(address _to, uint256 _value) public returns (bool success);\\n\\n    /// @dev Transfers _value number of tokens from address _from to address _to\\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\\n\\n    /// @dev Allows _spender to withdraw from the msg.sender's account up to the _value amount\\n    function approve(address _spender, uint256 _value) public returns (bool success);\\n\\n    /// @dev Returns the amount which _spender is still allowed to withdraw from _owner\\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\\n\\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\\n\\n}\\n\",\"keccak256\":\"0xe58902b5bdf9f918c6ec8ee4da44bf87faf225098fae84671ab07b46af427338\"},\"giveth-common-contracts/contracts/Escapable.sol\":{\"content\":\"pragma solidity ^0.4.19;\\n/*\\n    Copyright 2016, Jordi Baylina\\n    Contributor: Adrià Massanet <adria@codecontext.io>\\n\\n    This program is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU General Public License as published by\\n    the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    This program is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU General Public License for more details.\\n\\n    You should have received a copy of the GNU General Public License\\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n*/\\n\\nimport \\\"./Owned.sol\\\";\\nimport \\\"./ERC20.sol\\\";\\n\\n\\n/// @dev `Escapable` is a base level contract built off of the `Owned`\\n///  contract; it creates an escape hatch function that can be called in an\\n///  emergency that will allow designated addresses to send any ether or tokens\\n///  held in the contract to an `escapeHatchDestination` as long as they were\\n///  not blacklisted\\ncontract Escapable is Owned {\\n    address public escapeHatchCaller;\\n    address public escapeHatchDestination;\\n    mapping (address=>bool) private escapeBlacklist; // Token contract addresses\\n\\n    /// @notice The Constructor assigns the `escapeHatchDestination` and the\\n    ///  `escapeHatchCaller`\\n    /// @param _escapeHatchCaller The address of a trusted account or contract\\n    ///  to call `escapeHatch()` to send the ether in this contract to the\\n    ///  `escapeHatchDestination` it would be ideal that `escapeHatchCaller`\\n    ///  cannot move funds out of `escapeHatchDestination`\\n    /// @param _escapeHatchDestination The address of a safe location (usu a\\n    ///  Multisig) to send the ether held in this contract; if a neutral address\\n    ///  is required, the WHG Multisig is an option:\\n    ///  0x8Ff920020c8AD673661c8117f2855C384758C572 \\n    function Escapable(address _escapeHatchCaller, address _escapeHatchDestination) public {\\n        escapeHatchCaller = _escapeHatchCaller;\\n        escapeHatchDestination = _escapeHatchDestination;\\n    }\\n\\n    /// @dev The addresses preassigned as `escapeHatchCaller` or `owner`\\n    ///  are the only addresses that can call a function with this modifier\\n    modifier onlyEscapeHatchCallerOrOwner {\\n        require ((msg.sender == escapeHatchCaller)||(msg.sender == owner));\\n        _;\\n    }\\n\\n    /// @notice Creates the blacklist of tokens that are not able to be taken\\n    ///  out of the contract; can only be done at the deployment, and the logic\\n    ///  to add to the blacklist will be in the constructor of a child contract\\n    /// @param _token the token contract address that is to be blacklisted \\n    function blacklistEscapeToken(address _token) internal {\\n        escapeBlacklist[_token] = true;\\n        EscapeHatchBlackistedToken(_token);\\n    }\\n\\n    /// @notice Checks to see if `_token` is in the blacklist of tokens\\n    /// @param _token the token address being queried\\n    /// @return False if `_token` is in the blacklist and can't be taken out of\\n    ///  the contract via the `escapeHatch()`\\n    function isTokenEscapable(address _token) view public returns (bool) {\\n        return !escapeBlacklist[_token];\\n    }\\n\\n    /// @notice The `escapeHatch()` should only be called as a last resort if a\\n    /// security issue is uncovered or something unexpected happened\\n    /// @param _token to transfer, use 0x0 for ether\\n    function escapeHatch(address _token) public onlyEscapeHatchCallerOrOwner {   \\n        require(escapeBlacklist[_token]==false);\\n\\n        uint256 balance;\\n\\n        /// @dev Logic for ether\\n        if (_token == 0x0) {\\n            balance = this.balance;\\n            escapeHatchDestination.transfer(balance);\\n            EscapeHatchCalled(_token, balance);\\n            return;\\n        }\\n        /// @dev Logic for tokens\\n        ERC20 token = ERC20(_token);\\n        balance = token.balanceOf(this);\\n        require(token.transfer(escapeHatchDestination, balance));\\n        EscapeHatchCalled(_token, balance);\\n    }\\n\\n    /// @notice Changes the address assigned to call `escapeHatch()`\\n    /// @param _newEscapeHatchCaller The address of a trusted account or\\n    ///  contract to call `escapeHatch()` to send the value in this contract to\\n    ///  the `escapeHatchDestination`; it would be ideal that `escapeHatchCaller`\\n    ///  cannot move funds out of `escapeHatchDestination`\\n    function changeHatchEscapeCaller(address _newEscapeHatchCaller) public onlyEscapeHatchCallerOrOwner {\\n        escapeHatchCaller = _newEscapeHatchCaller;\\n    }\\n\\n    event EscapeHatchBlackistedToken(address token);\\n    event EscapeHatchCalled(address token, uint amount);\\n}\\n\",\"keccak256\":\"0xd5d7b1a916841b21cfdee2bc9de4a178820421252b0c764070d78e846cd4511d\"},\"giveth-common-contracts/contracts/Owned.sol\":{\"content\":\"pragma solidity ^0.4.19;\\n\\n\\n/// @title Owned\\n/// @author Adrià Massanet <adria@codecontext.io>\\n/// @notice The Owned contract has an owner address, and provides basic \\n///  authorization control functions, this simplifies & the implementation of\\n///  user permissions; this contract has three work flows for a change in\\n///  ownership, the first requires the new owner to validate that they have the\\n///  ability to accept ownership, the second allows the ownership to be\\n///  directly transfered without requiring acceptance, and the third allows for\\n///  the ownership to be removed to allow for decentralization \\ncontract Owned {\\n\\n    address public owner;\\n    address public newOwnerCandidate;\\n\\n    event OwnershipRequested(address indexed by, address indexed to);\\n    event OwnershipTransferred(address indexed from, address indexed to);\\n    event OwnershipRemoved();\\n\\n    /// @dev The constructor sets the `msg.sender` as the`owner` of the contract\\n    function Owned() public {\\n        owner = msg.sender;\\n    }\\n\\n    /// @dev `owner` is the only address that can call a function with this\\n    /// modifier\\n    modifier onlyOwner() {\\n        require (msg.sender == owner);\\n        _;\\n    }\\n    \\n    /// @dev In this 1st option for ownership transfer `proposeOwnership()` must\\n    ///  be called first by the current `owner` then `acceptOwnership()` must be\\n    ///  called by the `newOwnerCandidate`\\n    /// @notice `onlyOwner` Proposes to transfer control of the contract to a\\n    ///  new owner\\n    /// @param _newOwnerCandidate The address being proposed as the new owner\\n    function proposeOwnership(address _newOwnerCandidate) public onlyOwner {\\n        newOwnerCandidate = _newOwnerCandidate;\\n        OwnershipRequested(msg.sender, newOwnerCandidate);\\n    }\\n\\n    /// @notice Can only be called by the `newOwnerCandidate`, accepts the\\n    ///  transfer of ownership\\n    function acceptOwnership() public {\\n        require(msg.sender == newOwnerCandidate);\\n\\n        address oldOwner = owner;\\n        owner = newOwnerCandidate;\\n        newOwnerCandidate = 0x0;\\n\\n        OwnershipTransferred(oldOwner, owner);\\n    }\\n\\n    /// @dev In this 2nd option for ownership transfer `changeOwnership()` can\\n    ///  be called and it will immediately assign ownership to the `newOwner`\\n    /// @notice `owner` can step down and assign some other address to this role\\n    /// @param _newOwner The address of the new owner\\n    function changeOwnership(address _newOwner) public onlyOwner {\\n        require(_newOwner != 0x0);\\n\\n        address oldOwner = owner;\\n        owner = _newOwner;\\n        newOwnerCandidate = 0x0;\\n\\n        OwnershipTransferred(oldOwner, owner);\\n    }\\n\\n    /// @dev In this 3rd option for ownership transfer `removeOwnership()` can\\n    ///  be called and it will immediately assign ownership to the 0x0 address;\\n    ///  it requires a 0xdece be input as a parameter to prevent accidental use\\n    /// @notice Decentralizes the contract, this operation cannot be undone \\n    /// @param _dac `0xdac` has to be entered for this function to work\\n    function removeOwnership(address _dac) public onlyOwner {\\n        require(_dac == 0xdac);\\n        owner = 0x0;\\n        newOwnerCandidate = 0x0;\\n        OwnershipRemoved();     \\n    }\\n} \\n\",\"keccak256\":\"0xc7d1401775fb1b41187de281757de68718fe27ba2660ba4bb194436aab7d0213\"}},\"version\":1}"
      }
    },
    "./contracts/GivethBridgeMock.sol": {
      "GivethBridgeMock": {
        "abi": [
          {
            "constant": true,
            "inputs": [],
            "name": "maxSecurityGuardDelay",
            "outputs": [
              {
                "name": "",
                "type": "uint256"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "token",
                "type": "address"
              },
              {
                "name": "accepted",
                "type": "bool"
              }
            ],
            "name": "whitelistToken",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [],
            "name": "checkIn",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "giver",
                "type": "address"
              },
              {
                "name": "receiverId",
                "type": "uint64"
              },
              {
                "name": "token",
                "type": "address"
              },
              {
                "name": "_amount",
                "type": "uint256"
              }
            ],
            "name": "donateAndCreateGiver",
            "outputs": [],
            "payable": true,
            "stateMutability": "payable",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_token",
                "type": "address"
              },
              {
                "name": "_amount",
                "type": "uint256"
              }
            ],
            "name": "escapeFunds",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_newTimeLock",
                "type": "uint256"
              }
            ],
            "name": "setTimelock",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "escapeHatchCaller",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_newOwner",
                "type": "address"
              }
            ],
            "name": "changeOwnership",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "securityGuardLastCheckin",
            "outputs": [
              {
                "name": "",
                "type": "uint256"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [],
            "name": "unpause",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "giverId",
                "type": "uint64"
              },
              {
                "name": "receiverId",
                "type": "uint64"
              },
              {
                "name": "token",
                "type": "address"
              },
              {
                "name": "_amount",
                "type": "uint256"
              }
            ],
            "name": "donate",
            "outputs": [],
            "payable": true,
            "stateMutability": "payable",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_idPayment",
                "type": "uint256"
              }
            ],
            "name": "disburseAuthorizedPayment",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "paused",
            "outputs": [
              {
                "name": "",
                "type": "bool"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_dac",
                "type": "address"
              }
            ],
            "name": "removeOwnership",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "allowed",
                "type": "bool"
              }
            ],
            "name": "setAllowDisbursePaymentWhenPaused",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "numberOfAuthorizedPayments",
            "outputs": [
              {
                "name": "",
                "type": "uint256"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_newOwnerCandidate",
                "type": "address"
              }
            ],
            "name": "proposeOwnership",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_spender",
                "type": "address"
              },
              {
                "name": "_authorize",
                "type": "bool"
              }
            ],
            "name": "authorizeSpender",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [],
            "name": "acceptOwnership",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_idPayment",
                "type": "uint256"
              }
            ],
            "name": "cancelPayment",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [],
            "name": "pause",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_idPayment",
                "type": "uint256"
              },
              {
                "name": "_delay",
                "type": "uint256"
              }
            ],
            "name": "delayPayment",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "allowDisbursePaymentWhenPaused",
            "outputs": [
              {
                "name": "",
                "type": "bool"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_idPayments",
                "type": "uint256[]"
              }
            ],
            "name": "disburseAuthorizedPayments",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [
              {
                "name": "_token",
                "type": "address"
              }
            ],
            "name": "isTokenEscapable",
            "outputs": [
              {
                "name": "",
                "type": "bool"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "owner",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "giver",
                "type": "address"
              },
              {
                "name": "receiverId",
                "type": "uint64"
              }
            ],
            "name": "donateAndCreateGiver",
            "outputs": [],
            "payable": true,
            "stateMutability": "payable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "mock_time",
            "outputs": [
              {
                "name": "",
                "type": "uint256"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [
              {
                "name": "",
                "type": "uint256"
              }
            ],
            "name": "authorizedPayments",
            "outputs": [
              {
                "name": "name",
                "type": "string"
              },
              {
                "name": "reference",
                "type": "bytes32"
              },
              {
                "name": "spender",
                "type": "address"
              },
              {
                "name": "earliestPayTime",
                "type": "uint256"
              },
              {
                "name": "canceled",
                "type": "bool"
              },
              {
                "name": "paid",
                "type": "bool"
              },
              {
                "name": "recipient",
                "type": "address"
              },
              {
                "name": "token",
                "type": "address"
              },
              {
                "name": "amount",
                "type": "uint256"
              },
              {
                "name": "securityGuardDelay",
                "type": "uint256"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_token",
                "type": "address"
              }
            ],
            "name": "escapeHatch",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_t",
                "type": "uint256"
              }
            ],
            "name": "setMockedTime",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "securityGuard",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_newSecurityGuard",
                "type": "address"
              }
            ],
            "name": "setSecurityGuard",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [],
            "name": "depositEscapedFunds",
            "outputs": [],
            "payable": true,
            "stateMutability": "payable",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "giverId",
                "type": "uint64"
              },
              {
                "name": "receiverId",
                "type": "uint64"
              }
            ],
            "name": "donate",
            "outputs": [],
            "payable": true,
            "stateMutability": "payable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "timeLock",
            "outputs": [
              {
                "name": "",
                "type": "uint256"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "newOwnerCandidate",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_newEscapeHatchCaller",
                "type": "address"
              }
            ],
            "name": "changeHatchEscapeCaller",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "name": "allowedSpenders",
            "outputs": [
              {
                "name": "",
                "type": "bool"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_maxSecurityGuardDelay",
                "type": "uint256"
              }
            ],
            "name": "setMaxSecurityGuardDelay",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "absoluteMinTimeLock",
            "outputs": [
              {
                "name": "",
                "type": "uint256"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_name",
                "type": "string"
              },
              {
                "name": "_reference",
                "type": "bytes32"
              },
              {
                "name": "_recipient",
                "type": "address"
              },
              {
                "name": "_token",
                "type": "address"
              },
              {
                "name": "_amount",
                "type": "uint256"
              },
              {
                "name": "_paymentDelay",
                "type": "uint256"
              }
            ],
            "name": "authorizePayment",
            "outputs": [
              {
                "name": "",
                "type": "uint256"
              }
            ],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "escapeHatchDestination",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "name": "_escapeHatchCaller",
                "type": "address"
              },
              {
                "name": "_escapeHatchDestination",
                "type": "address"
              },
              {
                "name": "_absoluteMinTimeLock",
                "type": "uint256"
              },
              {
                "name": "_timeLock",
                "type": "uint256"
              },
              {
                "name": "_securityGuard",
                "type": "address"
              },
              {
                "name": "_maxSecurityGuardDelay",
                "type": "uint256"
              }
            ],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "constructor"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": false,
                "name": "giverId",
                "type": "uint64"
              },
              {
                "indexed": false,
                "name": "receiverId",
                "type": "uint64"
              },
              {
                "indexed": false,
                "name": "token",
                "type": "address"
              },
              {
                "indexed": false,
                "name": "amount",
                "type": "uint256"
              }
            ],
            "name": "Donate",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": false,
                "name": "giver",
                "type": "address"
              },
              {
                "indexed": false,
                "name": "receiverId",
                "type": "uint64"
              },
              {
                "indexed": false,
                "name": "token",
                "type": "address"
              },
              {
                "indexed": false,
                "name": "amount",
                "type": "uint256"
              }
            ],
            "name": "DonateAndCreateGiver",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": false,
                "name": "token",
                "type": "address"
              },
              {
                "indexed": false,
                "name": "amount",
                "type": "uint256"
              }
            ],
            "name": "EscapeFundsCalled",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "name": "idPayment",
                "type": "uint256"
              },
              {
                "indexed": true,
                "name": "recipient",
                "type": "address"
              },
              {
                "indexed": false,
                "name": "amount",
                "type": "uint256"
              },
              {
                "indexed": false,
                "name": "token",
                "type": "address"
              },
              {
                "indexed": false,
                "name": "reference",
                "type": "bytes32"
              }
            ],
            "name": "PaymentAuthorized",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "name": "idPayment",
                "type": "uint256"
              },
              {
                "indexed": true,
                "name": "recipient",
                "type": "address"
              },
              {
                "indexed": false,
                "name": "amount",
                "type": "uint256"
              },
              {
                "indexed": false,
                "name": "token",
                "type": "address"
              }
            ],
            "name": "PaymentExecuted",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "name": "idPayment",
                "type": "uint256"
              }
            ],
            "name": "PaymentCanceled",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "name": "spender",
                "type": "address"
              },
              {
                "indexed": false,
                "name": "authorized",
                "type": "bool"
              }
            ],
            "name": "SpenderAuthorization",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [],
            "name": "Pause",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [],
            "name": "Unpause",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": false,
                "name": "token",
                "type": "address"
              }
            ],
            "name": "EscapeHatchBlackistedToken",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": false,
                "name": "token",
                "type": "address"
              },
              {
                "indexed": false,
                "name": "amount",
                "type": "uint256"
              }
            ],
            "name": "EscapeHatchCalled",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "name": "by",
                "type": "address"
              },
              {
                "indexed": true,
                "name": "to",
                "type": "address"
              }
            ],
            "name": "OwnershipRequested",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "name": "from",
                "type": "address"
              },
              {
                "indexed": true,
                "name": "to",
                "type": "address"
              }
            ],
            "name": "OwnershipTransferred",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [],
            "name": "OwnershipRemoved",
            "type": "event"
          }
        ],
        "evm": {
          "bytecode": {
            "linkReferences": {},
            "object": "60606040526005805460ff19169055341561001957600080fd5b60405160c080611d0e83398101604052808051919060200180519190602001805191906020018051919060200180519190602001805160008054600160a060020a03338116600160a060020a0319928316178355600280549b82169b83169b909b17909a5560038054998b1699821699909917909855600896909655600994909455505060078054959091169490931693909317909155600a919091558052600e6020527fe710864318d4a32f37d6ce54cb3fadbef648dd12d8dbdf53973564d56b7f881c805460ff19166001179055611c16806100f86000396000f3006060604052600436106101f55763ffffffff60e060020a6000350416630b2e742381146101fa5780630ffb1d8b1461021f578063183ff085146102455780631870c10f146102585780631b28591c146102835780631e891c0a146102a55780631f6eb6e7146102bb5780632af4c31e146102ea5780633f487b8b146103095780633f4ba83a1461031c5780634c4316c71461032f57806352892478146103595780635c975abb1461036f578063666a342714610396578063672f412c146103b557806368b8c5a1146103cd578063710bf322146103e0578063793c0fd4146103ff57806379ba5097146104235780638422927d146104365780638456cb591461044c578063846a5dde1461045f578063859bcc7114610478578063863da0001461048b578063892db057146104da5780638da5cb5b146104f957806391f5c3a81461050c5780639da47a6b1461052d578063a0927a6a14610540578063a142d60814610624578063ab8be23114610643578063b2ca3ec414610659578063bb2a51d11461066c578063bd541ad01461068b578063bde60ac914610693578063d085835a146106ae578063d091b550146106c1578063d836fbe8146106d4578063d8528af0146106f3578063da4793ac14610712578063ea8a66c714610728578063f37b74ca1461073b578063f5b6123014610775575b600080fd5b341561020557600080fd5b61020d610788565b60405190815260200160405180910390f35b341561022a57600080fd5b610243600160a060020a0360043516602435151561078e565b005b341561025057600080fd5b6102436107e4565b610243600160a060020a0360043581169067ffffffffffffffff60243516906044351660643561080c565b341561028e57600080fd5b610243600160a060020a03600435166024356108c0565b34156102b057600080fd5b610243600435610a09565b34156102c657600080fd5b6102ce610a38565b604051600160a060020a03909116815260200160405180910390f35b34156102f557600080fd5b610243600160a060020a0360043516610a47565b341561031457600080fd5b61020d610adb565b341561032757600080fd5b610243610ae1565b61024367ffffffffffffffff60043581169060243516600160a060020a0360443516606435610b45565b341561036457600080fd5b610243600435610bfa565b341561037a57600080fd5b610382610c72565b604051901515815260200160405180910390f35b34156103a157600080fd5b610243600160a060020a0360043516610c7b565b34156103c057600080fd5b6102436004351515610cf8565b34156103d857600080fd5b61020d610d37565b34156103eb57600080fd5b610243600160a060020a0360043516610d3e565b341561040a57600080fd5b610243600160a060020a03600435166024351515610daf565b341561042e57600080fd5b610243610e29565b341561044157600080fd5b610243600435610ea9565b341561045757600080fd5b610243610f5d565b341561046a57600080fd5b610243600435602435610f9c565b341561048357600080fd5b610382611052565b341561049657600080fd5b610243600460248135818101908301358060208181020160405190810160405280939291908181526020018383602002808284375094965061105b95505050505050565b34156104e557600080fd5b610382600160a060020a0360043516611099565b341561050457600080fd5b6102ce6110b8565b610243600160a060020a036004351667ffffffffffffffff602435166110c7565b341561053857600080fd5b61020d6110d4565b341561054b57600080fd5b6105566004356110da565b604051602081018a9052600160a060020a03808a16604083015260608201899052871515608083015286151560a083015285811660c0830152841660e082015261010081018390526101208101829052610140808252819081018c818151815260200191508051906020019080838360005b838110156105e05780820151838201526020016105c8565b50505050905090810190601f16801561060d5780820380516001836020036101000a031916815260200191505b509b50505050505050505050505060405180910390f35b341561062f57600080fd5b610243600160a060020a03600435166111ee565b341561064e57600080fd5b61024360043561140f565b341561066457600080fd5b6102ce611414565b341561067757600080fd5b610243600160a060020a0360043516611423565b610243611460565b61024367ffffffffffffffff6004358116906024351661147b565b34156106b957600080fd5b61020d611488565b34156106cc57600080fd5b6102ce61148e565b34156106df57600080fd5b610243600160a060020a036004351661149d565b34156106fe57600080fd5b610382600160a060020a03600435166114f5565b341561071d57600080fd5b61024360043561150a565b341561073357600080fd5b61020d61152a565b341561074657600080fd5b61020d602460048035828101929101359035600160a060020a036044358116906064351660843560a435611530565b341561078057600080fd5b6102ce6116e2565b600a5481565b60055460ff161561079e57600080fd5b60005433600160a060020a039081169116146107b957600080fd5b600160a060020a03919091166000908152600e60205260409020805460ff1916911515919091179055565b60075433600160a060020a039081169116146107ff57600080fd5b6108076116f1565b600d55565b60055460009060ff161561081f57600080fd5b600160a060020a038516151561083457600080fd5b67ffffffffffffffff8416151561084a57600080fd5b61085483836116f7565b90507f300ed237d4114d1c2df9984e698721646d6c45633d6c1c5430450cdecf61571d85858584604051600160a060020a03948516815267ffffffffffffffff909316602084015292166040808301919091526060820192909252608001905180910390a15050505050565b60025460009033600160a060020a03908116911614806108ee575060005433600160a060020a039081169116145b15156108f957600080fd5b600160a060020a038316151561094157600354600160a060020a031682156108fc0283604051600060405180830381858888f19350505050151561093c57600080fd5b6109c0565b506003548290600160a060020a038083169163a9059cbb91168460405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151561099e57600080fd5b5af115156109ab57600080fd5b5050506040518051905015156109c057600080fd5b7f4ccddcd1a4e33721aee316370fb3e014294985be0755a68c88009b31e1dc4ae38383604051600160a060020a03909216825260208201526040908101905180910390a1505050565b60005433600160a060020a03908116911614610a2457600080fd5b600854811015610a3357600080fd5b600955565b600254600160a060020a031681565b6000805433600160a060020a03908116911614610a6357600080fd5b600160a060020a0382161515610a7857600080fd5b5060008054600160a060020a03838116600160a060020a031980841691909117938490556001805490911690559081169116817f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600d5481565b60005433600160a060020a03908116911614610afc57600080fd5b60055460ff161515610b0d57600080fd5b6005805460ff191690557f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3360405160405180910390a1565b60055460009060ff1615610b5857600080fd5b67ffffffffffffffff85161515610b6e57600080fd5b67ffffffffffffffff84161515610b8457600080fd5b610b8e83836116f7565b90507fc77b8feedf86922981aed41179f4a071d80467c7f17c5c13837269e363ac545b8585858460405167ffffffffffffffff9485168152929093166020830152600160a060020a03166040808301919091526060820192909252608001905180910390a15050505050565b60055460009060ff161580610c115750600b5460ff165b1515610c1c57600080fd5b6006548210610c2a57600080fd5b6006805483908110610c3857fe5b9060005260206000209060080201905060095481600301540361070801600d5410151515610c6557600080fd5b610c6e826117d8565b5050565b60055460ff1681565b60005433600160a060020a03908116911614610c9657600080fd5b610dac600160a060020a03821614610cad57600080fd5b60008054600160a060020a03199081169091556001805490911690557f94e8b32e01b9eedfddd778ffbd051a7718cdc14781702884561162dca6f74dbb60405160405180910390a150565b60005433600160a060020a03908116911614610d1357600080fd5b60055460ff161515610d2457600080fd5b600b805460ff1916911515919091179055565b6006545b90565b60005433600160a060020a03908116911614610d5957600080fd5b60018054600160a060020a031916600160a060020a0383811691909117918290559081169033167f13a4b3bc0d5234dd3d87c9f1557d8faefa37986da62c36ba49309e2fb2c9aec460405160405180910390a350565b60005433600160a060020a03908116911614610dca57600080fd5b600160a060020a0382166000818152600c602052604090819020805460ff19168415151790557f801f568efbc3346a6ae3d0c3eb335a30d64e0d3cf08f1c39626d62cd5c82728190839051901515815260200160405180910390a25050565b60015460009033600160a060020a03908116911614610e4757600080fd5b506000805460018054600160a060020a0319808416600160a060020a03838116919091179586905591169091559081169116817f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a350565b6000805433600160a060020a03908116911614610ec557600080fd5b6006548210610ed357600080fd5b6006805483908110610ee157fe5b60009182526020909120600890910201600481015490915060ff1615610f0657600080fd5b6004810154610100900460ff1615610f1d57600080fd5b60048101805460ff19166001179055817ffdf197ed54809861dafe0b4d391843652730ac67274c1e9e46db7687dccaa30160405160405180910390a25050565b60005433600160a060020a03908116911614610f7857600080fd5b60055460ff1615610f8857600080fd5b600b805460ff19169055610f9a6119f9565b565b60075460009033600160a060020a03908116911614610fba57600080fd5b6006548310610fc857600080fd5b670de0b6b3a7640000821115610fdd57600080fd5b6006805484908110610feb57fe5b90600052602060002090600802019050600a54828260070154011115151561101257600080fd5b6004810154610100900460ff161561102957600080fd5b600481015460ff161561103b57600080fd5b600781018054830190556003018054909101905550565b600b5460ff1681565b6000805b82518210156110945782828151811061107457fe5b90602001906020020151905061108981610bfa565b60019091019061105f565b505050565b600160a060020a031660009081526004602052604090205460ff161590565b600054600160a060020a031681565b610c6e828260008061080c565b600f5481565b60068054829081106110e857fe5b9060005260206000209060080201600091509050806000018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156111945780601f1061116957610100808354040283529160200191611194565b820191906000526020600020905b81548152906001019060200180831161117757829003601f168201915b5050505060018301546002840154600385015460048601546005870154600688015460079098015496979496600160a060020a039485169650929460ff80841695610100850490911694620100009094048116939216918a565b600254600090819033600160a060020a039081169116148061121e575060005433600160a060020a039081169116145b151561122957600080fd5b600160a060020a03831660009081526004602052604090205460ff161561124f57600080fd5b600160a060020a03831615156112e157600354600160a060020a033081163193501682156108fc0283604051600060405180830381858888f19350505050151561129857600080fd5b7fa50dde912fa22ea0d215a0236093ac45b4d55d6ef0c604c319f900029c5d10f28383604051600160a060020a03909216825260208201526040908101905180910390a1611094565b5081600160a060020a0381166370a082313060405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b151561133157600080fd5b5af1151561133e57600080fd5b5050506040518051600354909350600160a060020a03808416925063a9059cbb91168460405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b15156113a457600080fd5b5af115156113b157600080fd5b5050506040518051905015156113c657600080fd5b7fa50dde912fa22ea0d215a0236093ac45b4d55d6ef0c604c319f900029c5d10f28383604051600160a060020a03909216825260208201526040908101905180910390a1505050565b600f55565b600754600160a060020a031681565b60005433600160a060020a0390811691161461143e57600080fd5b60078054600160a060020a031916600160a060020a0392909216919091179055565b60035433600160a060020a03908116911614610f9a57600080fd5b610c6e8282600080610b45565b60095481565b600154600160a060020a031681565b60025433600160a060020a03908116911614806114c8575060005433600160a060020a039081169116145b15156114d357600080fd5b60028054600160a060020a031916600160a060020a0392909216919091179055565b600c6020526000908152604090205460ff1681565b60005433600160a060020a0390811691161461152557600080fd5b600a55565b60085481565b6005546000908190819060ff161561154757600080fd5b600160a060020a0333166000908152600c602052604090205460ff16151561156e57600080fd5b60068054925082906115839060018301611a5f565b50600680548390811061159257fe5b60009182526020909120600890910201600281018054600160a060020a03191633600160a060020a03161790559050670de0b6b3a76400008411156115d657600080fd5b6009548410156115f1576009546115eb6116f1565b016115fc565b836115fa6116f1565b015b600382015560048101805475ffffffffffffffffffffffffffffffffffffffff0000191662010000600160a060020a038a160217905560068101859055611644818b8b611a8b565b5060018101889055600581018054600160a060020a031916600160a060020a038881169190911791829055600483015460068401546201000090910482169285927fd11935115aa93b9f1f616d0d7702f4593572daa610390123241b3785430281c49291168c604051928352600160a060020a0390911660208301526040808301919091526060909101905180910390a35098975050505050505050565b600354600160a060020a031681565b600f5490565b600160a060020a0382166000908152600e602052604081205460ff16151561171e57600080fd5b5080600160a060020a03831615156117335750345b6000811161174057600080fd5b600160a060020a038316156117d25782600160a060020a03166323b872dd33308460405160e060020a63ffffffff8616028152600160a060020a0393841660048201529190921660248201526044810191909152606401602060405180830381600087803b15156117b057600080fd5b5af115156117bd57600080fd5b5050506040518051905015156117d257600080fd5b92915050565b60055460009060ff1615806117ef5750600b5460ff165b15156117fa57600080fd5b600654821061180857600080fd5b600680548390811061181657fe5b60009182526020808320600260089093020191820154600160a060020a03168352600c905260409091205490915060ff16151561185257600080fd5b806003015461185f6116f1565b101561186a57600080fd5b600481015460ff161561187c57600080fd5b6004810154610100900460ff161561189357600080fd5b60048101805461ff0019166101001790556005810154600160a060020a031615156118ff576004810154600682015462010000909104600160a060020a0316906108fc81150290604051600060405180830381858888f1935050505015156118fa57600080fd5b61198d565b600581015460048201546006830154600160a060020a039283169263a9059cbb92620100009004169060405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151561196b57600080fd5b5af1151561197857600080fd5b50505060405180519050151561198d57600080fd5b600481015460068201546005830154600160a060020a036201000090930483169285927f354f3c0c8efabe1a1a07cf222842b008ef284ac185e63bdf8245be8cd2d97f5192909116604051918252600160a060020a031660208201526040908101905180910390a35050565b60005433600160a060020a03908116911614611a1457600080fd5b60055460ff1615611a2457600080fd5b6005805460ff191660011790557f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62560405160405180910390a1565b815481835581811511611094576008028160080283600052602060002091820191016110949190611b09565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611acc5782800160ff19823516178555611af9565b82800160010185558215611af9579182015b82811115611af9578235825591602001919060010190611ade565b50611b05929150611b89565b5090565b610d3b91905b80821115611b05576000611b238282611ba3565b50600060018201819055600282018054600160a060020a03199081169091556003830182905560048301805475ffffffffffffffffffffffffffffffffffffffffffff191690556005830180549091169055600682018190556007820155600801611b0f565b610d3b91905b80821115611b055760008155600101611b8f565b50805460018160011615610100020316600290046000825580601f10611bc95750611be7565b601f016020900490600052602060002090810190611be79190611b89565b505600a165627a7a723058209d72bc232401de2a610a7c4c679fa69a6a354bbe686368cc487ebf7e49fa353c0029",
            "sourceMap": "904:947:2:-;;;268:26:5;;;-1:-1:-1;;268:26:5;;;981:440:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;993:5:9;:18;;-1:-1:-1;;;;;1001:10:9;993:18;;-1:-1:-1;;;;;;993:18:9;;;;;;2101:17:8;:38;;;;;;;;;;;;;;;2149:22;:48;;;;;;;;;;;;;;;5231:19:6;:42;;;;5283:8;:20;;;;-1:-1:-1;;5313:13:6;:30;;;;;;;;;;;;;;;;;5353:21;:46;;;;3197:17:1;;:14;981:440:2;3197:17:1;;:24;;-1:-1:-1;;3197:24:1;993:18:9;3197:24:1;;;904:947:2;;;;;;"
          },
          "deployedBytecode": {
            "linkReferences": {},
            "object": "6060604052600436106101f55763ffffffff60e060020a6000350416630b2e742381146101fa5780630ffb1d8b1461021f578063183ff085146102455780631870c10f146102585780631b28591c146102835780631e891c0a146102a55780631f6eb6e7146102bb5780632af4c31e146102ea5780633f487b8b146103095780633f4ba83a1461031c5780634c4316c71461032f57806352892478146103595780635c975abb1461036f578063666a342714610396578063672f412c146103b557806368b8c5a1146103cd578063710bf322146103e0578063793c0fd4146103ff57806379ba5097146104235780638422927d146104365780638456cb591461044c578063846a5dde1461045f578063859bcc7114610478578063863da0001461048b578063892db057146104da5780638da5cb5b146104f957806391f5c3a81461050c5780639da47a6b1461052d578063a0927a6a14610540578063a142d60814610624578063ab8be23114610643578063b2ca3ec414610659578063bb2a51d11461066c578063bd541ad01461068b578063bde60ac914610693578063d085835a146106ae578063d091b550146106c1578063d836fbe8146106d4578063d8528af0146106f3578063da4793ac14610712578063ea8a66c714610728578063f37b74ca1461073b578063f5b6123014610775575b600080fd5b341561020557600080fd5b61020d610788565b60405190815260200160405180910390f35b341561022a57600080fd5b610243600160a060020a0360043516602435151561078e565b005b341561025057600080fd5b6102436107e4565b610243600160a060020a0360043581169067ffffffffffffffff60243516906044351660643561080c565b341561028e57600080fd5b610243600160a060020a03600435166024356108c0565b34156102b057600080fd5b610243600435610a09565b34156102c657600080fd5b6102ce610a38565b604051600160a060020a03909116815260200160405180910390f35b34156102f557600080fd5b610243600160a060020a0360043516610a47565b341561031457600080fd5b61020d610adb565b341561032757600080fd5b610243610ae1565b61024367ffffffffffffffff60043581169060243516600160a060020a0360443516606435610b45565b341561036457600080fd5b610243600435610bfa565b341561037a57600080fd5b610382610c72565b604051901515815260200160405180910390f35b34156103a157600080fd5b610243600160a060020a0360043516610c7b565b34156103c057600080fd5b6102436004351515610cf8565b34156103d857600080fd5b61020d610d37565b34156103eb57600080fd5b610243600160a060020a0360043516610d3e565b341561040a57600080fd5b610243600160a060020a03600435166024351515610daf565b341561042e57600080fd5b610243610e29565b341561044157600080fd5b610243600435610ea9565b341561045757600080fd5b610243610f5d565b341561046a57600080fd5b610243600435602435610f9c565b341561048357600080fd5b610382611052565b341561049657600080fd5b610243600460248135818101908301358060208181020160405190810160405280939291908181526020018383602002808284375094965061105b95505050505050565b34156104e557600080fd5b610382600160a060020a0360043516611099565b341561050457600080fd5b6102ce6110b8565b610243600160a060020a036004351667ffffffffffffffff602435166110c7565b341561053857600080fd5b61020d6110d4565b341561054b57600080fd5b6105566004356110da565b604051602081018a9052600160a060020a03808a16604083015260608201899052871515608083015286151560a083015285811660c0830152841660e082015261010081018390526101208101829052610140808252819081018c818151815260200191508051906020019080838360005b838110156105e05780820151838201526020016105c8565b50505050905090810190601f16801561060d5780820380516001836020036101000a031916815260200191505b509b50505050505050505050505060405180910390f35b341561062f57600080fd5b610243600160a060020a03600435166111ee565b341561064e57600080fd5b61024360043561140f565b341561066457600080fd5b6102ce611414565b341561067757600080fd5b610243600160a060020a0360043516611423565b610243611460565b61024367ffffffffffffffff6004358116906024351661147b565b34156106b957600080fd5b61020d611488565b34156106cc57600080fd5b6102ce61148e565b34156106df57600080fd5b610243600160a060020a036004351661149d565b34156106fe57600080fd5b610382600160a060020a03600435166114f5565b341561071d57600080fd5b61024360043561150a565b341561073357600080fd5b61020d61152a565b341561074657600080fd5b61020d602460048035828101929101359035600160a060020a036044358116906064351660843560a435611530565b341561078057600080fd5b6102ce6116e2565b600a5481565b60055460ff161561079e57600080fd5b60005433600160a060020a039081169116146107b957600080fd5b600160a060020a03919091166000908152600e60205260409020805460ff1916911515919091179055565b60075433600160a060020a039081169116146107ff57600080fd5b6108076116f1565b600d55565b60055460009060ff161561081f57600080fd5b600160a060020a038516151561083457600080fd5b67ffffffffffffffff8416151561084a57600080fd5b61085483836116f7565b90507f300ed237d4114d1c2df9984e698721646d6c45633d6c1c5430450cdecf61571d85858584604051600160a060020a03948516815267ffffffffffffffff909316602084015292166040808301919091526060820192909252608001905180910390a15050505050565b60025460009033600160a060020a03908116911614806108ee575060005433600160a060020a039081169116145b15156108f957600080fd5b600160a060020a038316151561094157600354600160a060020a031682156108fc0283604051600060405180830381858888f19350505050151561093c57600080fd5b6109c0565b506003548290600160a060020a038083169163a9059cbb91168460405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151561099e57600080fd5b5af115156109ab57600080fd5b5050506040518051905015156109c057600080fd5b7f4ccddcd1a4e33721aee316370fb3e014294985be0755a68c88009b31e1dc4ae38383604051600160a060020a03909216825260208201526040908101905180910390a1505050565b60005433600160a060020a03908116911614610a2457600080fd5b600854811015610a3357600080fd5b600955565b600254600160a060020a031681565b6000805433600160a060020a03908116911614610a6357600080fd5b600160a060020a0382161515610a7857600080fd5b5060008054600160a060020a03838116600160a060020a031980841691909117938490556001805490911690559081169116817f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600d5481565b60005433600160a060020a03908116911614610afc57600080fd5b60055460ff161515610b0d57600080fd5b6005805460ff191690557f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3360405160405180910390a1565b60055460009060ff1615610b5857600080fd5b67ffffffffffffffff85161515610b6e57600080fd5b67ffffffffffffffff84161515610b8457600080fd5b610b8e83836116f7565b90507fc77b8feedf86922981aed41179f4a071d80467c7f17c5c13837269e363ac545b8585858460405167ffffffffffffffff9485168152929093166020830152600160a060020a03166040808301919091526060820192909252608001905180910390a15050505050565b60055460009060ff161580610c115750600b5460ff165b1515610c1c57600080fd5b6006548210610c2a57600080fd5b6006805483908110610c3857fe5b9060005260206000209060080201905060095481600301540361070801600d5410151515610c6557600080fd5b610c6e826117d8565b5050565b60055460ff1681565b60005433600160a060020a03908116911614610c9657600080fd5b610dac600160a060020a03821614610cad57600080fd5b60008054600160a060020a03199081169091556001805490911690557f94e8b32e01b9eedfddd778ffbd051a7718cdc14781702884561162dca6f74dbb60405160405180910390a150565b60005433600160a060020a03908116911614610d1357600080fd5b60055460ff161515610d2457600080fd5b600b805460ff1916911515919091179055565b6006545b90565b60005433600160a060020a03908116911614610d5957600080fd5b60018054600160a060020a031916600160a060020a0383811691909117918290559081169033167f13a4b3bc0d5234dd3d87c9f1557d8faefa37986da62c36ba49309e2fb2c9aec460405160405180910390a350565b60005433600160a060020a03908116911614610dca57600080fd5b600160a060020a0382166000818152600c602052604090819020805460ff19168415151790557f801f568efbc3346a6ae3d0c3eb335a30d64e0d3cf08f1c39626d62cd5c82728190839051901515815260200160405180910390a25050565b60015460009033600160a060020a03908116911614610e4757600080fd5b506000805460018054600160a060020a0319808416600160a060020a03838116919091179586905591169091559081169116817f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a350565b6000805433600160a060020a03908116911614610ec557600080fd5b6006548210610ed357600080fd5b6006805483908110610ee157fe5b60009182526020909120600890910201600481015490915060ff1615610f0657600080fd5b6004810154610100900460ff1615610f1d57600080fd5b60048101805460ff19166001179055817ffdf197ed54809861dafe0b4d391843652730ac67274c1e9e46db7687dccaa30160405160405180910390a25050565b60005433600160a060020a03908116911614610f7857600080fd5b60055460ff1615610f8857600080fd5b600b805460ff19169055610f9a6119f9565b565b60075460009033600160a060020a03908116911614610fba57600080fd5b6006548310610fc857600080fd5b670de0b6b3a7640000821115610fdd57600080fd5b6006805484908110610feb57fe5b90600052602060002090600802019050600a54828260070154011115151561101257600080fd5b6004810154610100900460ff161561102957600080fd5b600481015460ff161561103b57600080fd5b600781018054830190556003018054909101905550565b600b5460ff1681565b6000805b82518210156110945782828151811061107457fe5b90602001906020020151905061108981610bfa565b60019091019061105f565b505050565b600160a060020a031660009081526004602052604090205460ff161590565b600054600160a060020a031681565b610c6e828260008061080c565b600f5481565b60068054829081106110e857fe5b9060005260206000209060080201600091509050806000018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156111945780601f1061116957610100808354040283529160200191611194565b820191906000526020600020905b81548152906001019060200180831161117757829003601f168201915b5050505060018301546002840154600385015460048601546005870154600688015460079098015496979496600160a060020a039485169650929460ff80841695610100850490911694620100009094048116939216918a565b600254600090819033600160a060020a039081169116148061121e575060005433600160a060020a039081169116145b151561122957600080fd5b600160a060020a03831660009081526004602052604090205460ff161561124f57600080fd5b600160a060020a03831615156112e157600354600160a060020a033081163193501682156108fc0283604051600060405180830381858888f19350505050151561129857600080fd5b7fa50dde912fa22ea0d215a0236093ac45b4d55d6ef0c604c319f900029c5d10f28383604051600160a060020a03909216825260208201526040908101905180910390a1611094565b5081600160a060020a0381166370a082313060405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b151561133157600080fd5b5af1151561133e57600080fd5b5050506040518051600354909350600160a060020a03808416925063a9059cbb91168460405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b15156113a457600080fd5b5af115156113b157600080fd5b5050506040518051905015156113c657600080fd5b7fa50dde912fa22ea0d215a0236093ac45b4d55d6ef0c604c319f900029c5d10f28383604051600160a060020a03909216825260208201526040908101905180910390a1505050565b600f55565b600754600160a060020a031681565b60005433600160a060020a0390811691161461143e57600080fd5b60078054600160a060020a031916600160a060020a0392909216919091179055565b60035433600160a060020a03908116911614610f9a57600080fd5b610c6e8282600080610b45565b60095481565b600154600160a060020a031681565b60025433600160a060020a03908116911614806114c8575060005433600160a060020a039081169116145b15156114d357600080fd5b60028054600160a060020a031916600160a060020a0392909216919091179055565b600c6020526000908152604090205460ff1681565b60005433600160a060020a0390811691161461152557600080fd5b600a55565b60085481565b6005546000908190819060ff161561154757600080fd5b600160a060020a0333166000908152600c602052604090205460ff16151561156e57600080fd5b60068054925082906115839060018301611a5f565b50600680548390811061159257fe5b60009182526020909120600890910201600281018054600160a060020a03191633600160a060020a03161790559050670de0b6b3a76400008411156115d657600080fd5b6009548410156115f1576009546115eb6116f1565b016115fc565b836115fa6116f1565b015b600382015560048101805475ffffffffffffffffffffffffffffffffffffffff0000191662010000600160a060020a038a160217905560068101859055611644818b8b611a8b565b5060018101889055600581018054600160a060020a031916600160a060020a038881169190911791829055600483015460068401546201000090910482169285927fd11935115aa93b9f1f616d0d7702f4593572daa610390123241b3785430281c49291168c604051928352600160a060020a0390911660208301526040808301919091526060909101905180910390a35098975050505050505050565b600354600160a060020a031681565b600f5490565b600160a060020a0382166000908152600e602052604081205460ff16151561171e57600080fd5b5080600160a060020a03831615156117335750345b6000811161174057600080fd5b600160a060020a038316156117d25782600160a060020a03166323b872dd33308460405160e060020a63ffffffff8616028152600160a060020a0393841660048201529190921660248201526044810191909152606401602060405180830381600087803b15156117b057600080fd5b5af115156117bd57600080fd5b5050506040518051905015156117d257600080fd5b92915050565b60055460009060ff1615806117ef5750600b5460ff165b15156117fa57600080fd5b600654821061180857600080fd5b600680548390811061181657fe5b60009182526020808320600260089093020191820154600160a060020a03168352600c905260409091205490915060ff16151561185257600080fd5b806003015461185f6116f1565b101561186a57600080fd5b600481015460ff161561187c57600080fd5b6004810154610100900460ff161561189357600080fd5b60048101805461ff0019166101001790556005810154600160a060020a031615156118ff576004810154600682015462010000909104600160a060020a0316906108fc81150290604051600060405180830381858888f1935050505015156118fa57600080fd5b61198d565b600581015460048201546006830154600160a060020a039283169263a9059cbb92620100009004169060405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151561196b57600080fd5b5af1151561197857600080fd5b50505060405180519050151561198d57600080fd5b600481015460068201546005830154600160a060020a036201000090930483169285927f354f3c0c8efabe1a1a07cf222842b008ef284ac185e63bdf8245be8cd2d97f5192909116604051918252600160a060020a031660208201526040908101905180910390a35050565b60005433600160a060020a03908116911614611a1457600080fd5b60055460ff1615611a2457600080fd5b6005805460ff191660011790557f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62560405160405180910390a1565b815481835581811511611094576008028160080283600052602060002091820191016110949190611b09565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611acc5782800160ff19823516178555611af9565b82800160010185558215611af9579182015b82811115611af9578235825591602001919060010190611ade565b50611b05929150611b89565b5090565b610d3b91905b80821115611b05576000611b238282611ba3565b50600060018201819055600282018054600160a060020a03199081169091556003830182905560048301805475ffffffffffffffffffffffffffffffffffffffffffff191690556005830180549091169055600682018190556007820155600801611b0f565b610d3b91905b80821115611b055760008155600101611b8f565b50805460018160011615610100020316600290046000825580601f10611bc95750611be7565b601f016020900490600052602060002090810190611be79190611b89565b505600a165627a7a723058209d72bc232401de2a610a7c4c679fa69a6a354bbe686368cc487ebf7e49fa353c0029",
            "sourceMap": "904:947:2:-;;;;;;;;;-1:-1:-1;;;904:947:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2486:33:6;;;;;;;;;;;;;;;;;;;;;;;;;;;7389:136:1;;;;;;;;;;-1:-1:-1;;;;;7389:136:1;;;;;;;;;;;3561:100:4;;;;;;;;;;;;4938:317:1;;-1:-1:-1;;;;;4938:317:1;;;;;;;;;;;;;;;;;7836:429;;;;;;;;;;-1:-1:-1;;;;;7836:429:1;;;;;;;10982:153:6;;;;;;;;;;;;;;1181:32:8;;;;;;;;;;;;;;;-1:-1:-1;;;;;1181:32:8;;;;;;;;;;;;;;2422:246:9;;;;;;;;;;-1:-1:-1;;;;;2422:246:9;;;;;921:36:4;;;;;;;;;;;;912:102:5;;;;;;;;;;;;6861:294:1;;;;;;;;;;;-1:-1:-1;;;;;6861:294:1;;;;;;;2068:848:4;;;;;;;;;;;;;;268:26:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3062:182:9;;;;;;;;;;-1:-1:-1;;;;;3062:182:9;;;;;12212:142:6;;;;;;;;;;;;;;;;5615:114;;;;;;;;;;;;1585:185:9;;;;;;;;;;-1:-1:-1;;;;;1585:185:9;;;;;10267:192:6;;;;;;;;;;-1:-1:-1;;;;;10267:192:6;;;;;;;;;1882:242:9;;;;;;;;;;;;9710:311:6;;;;;;;;;;;;;;11688:126;;;;;;;;;;;;9076:473;;;;;;;;;;;;;;;;2525:42;;;;;;;;;;;;8585:233;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;8585:233:6;;-1:-1:-1;8585:233:6;;-1:-1:-1;;;;;;8585:233:6;3215:117:8;;;;;;;;;;-1:-1:-1;;;;;3215:117:8;;;;;638:20:9;;;;;;;;;;;;3924:143:1;;-1:-1:-1;;;;;3924:143:1;;;;;;;;;953:21:2;;;;;;;;;;;;2347:35:6;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2347:35:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;2347:35:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3540:611:8;;;;;;;;;;-1:-1:-1;;;;;3540:611:8;;;;;1779:70:2;;;;;;;;;;;;;;2389:28:6;;;;;;;;;;;;10596:122;;;;;;;;;;-1:-1:-1;;;;;10596:122:6;;;;;8385:110:1;;;;5887:118;;;;;;;;;;;;;2460:20:6;;;;;;;;;;;;664:32:9;;;;;;;;;;;;4520:158:8;;;;;;;;;;-1:-1:-1;;;;;4520:158:8;;;;;2687:48:6;;;;;;;;;;-1:-1:-1;;;;;2687:48:6;;;;;11395:145;;;;;;;;;;;;;;2423:31;;;;;;;;;;;;6304:1195;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;6304:1195:6;;;;;;;;;;;;;;1219:37:8;;;;;;;;;;;;2486:33:6;;;;:::o;7389:136:1:-;446:6:5;;;;445:7;437:16;;;;;;1171:5:9;;1157:10;-1:-1:-1;;;;;1157:19:9;;;1171:5;;1157:19;1148:29;;;;;;-1:-1:-1;;;;;7486:21:1;;;;;;;;:14;:21;;;;;:32;;-1:-1:-1;;7486:32:1;;;;;;;;;;7389:136::o;3561:100:4:-;3378:13:6;;3364:10;-1:-1:-1;;;;;3364:27:6;;;3378:13;;3364:27;3356:36;;;;;;3644:10:4;:8;:10::i;:::-;3617:24;:37;3561:100::o;4938:317:1:-;446:6:5;;5133:11:1;;446:6:5;;445:7;437:16;;;;;;-1:-1:-1;;;;;5078:10:1;;;;5070:19;;;;;;5107:15;;;;;5099:24;;;;;;5147:32;5164:5;5171:7;5147:16;:32::i;:::-;5133:46;;5194:54;5215:5;5222:10;5234:5;5241:6;5194:54;;-1:-1:-1;;;;;5194:54:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4938:317;;;;;:::o;7836:429::-;2431:17:8;;8102:11:1;;2417:10:8;-1:-1:-1;;;;;2417:31:8;;;2431:17;;2417:31;;2416:56;;-1:-1:-1;2466:5:8;;2452:10;-1:-1:-1;;;;;2452:19:8;;;2466:5;;2452:19;2416:56;2407:66;;;;;;;;-1:-1:-1;;;;;7971:11:1;;;7967:243;;;7998:22;;-1:-1:-1;;;;;7998:22:1;:40;;;;8030:7;7998:40;;;;;;;;;;;;;;;;;;;;;;;;;;7967:243;;;-1:-1:-1;8166:22:1;;8122:6;;-1:-1:-1;;;;;8151:14:1;;;;;;8166:22;8190:7;8151:47;;-1:-1:-1;;;8151:47:1;;;;;;-1:-1:-1;;;;;8151:47:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8143:56;;;;;;;;8224:34;8242:6;8250:7;8224:34;;-1:-1:-1;;;;;8224:34:1;;;;;;;;;;;;;;;;;;;;7836:429;;;:::o;10982:153:6:-;1171:5:9;;1157:10;-1:-1:-1;;;;;1157:19:9;;;1171:5;;1157:19;1148:29;;;;;;11075:19:6;;11059:35;;;11051:44;;;;;;11105:8;:23;10982:153::o;1181:32:8:-;;;-1:-1:-1;;;;;1181:32:8;;:::o;2422:246:9:-;2529:16;1171:5;;1157:10;-1:-1:-1;;;;;1157:19:9;;;1171:5;;1157:19;1148:29;;;;;;-1:-1:-1;;;;;2501:16:9;;;;2493:25;;;;;;-1:-1:-1;2548:5:9;;;-1:-1:-1;;;;;2563:17:9;;;-1:-1:-1;;;;;;2563:17:9;;;;;;;;;;;2548:5;2590:23;;;;;;;2548:5;;;;2655;2548;2624:37;;;;;;;;;;2422:246;;:::o;921:36:4:-;;;;:::o;912:102:5:-;1171:5:9;;1157:10;-1:-1:-1;;;;;1157:19:9;;;1171:5;;1157:19;1148:29;;;;;;614:6:5;;;;606:15;;;;;;;;969:6;:14;;-1:-1:-1;;969:14:5;;;998:9;;;;;;;;;;912:102::o;6861:294:1:-;446:6:5;;7045:11:1;;446:6:5;;445:7;437:16;;;;;;6988:12:1;;;;;6980:21;;;;;;7019:15;;;;;7011:24;;;;;;7059:32;7076:5;7083:7;7059:16;:32::i;:::-;7045:46;;7106:42;7113:7;7122:10;7134:5;7141:6;7106:42;;;;;;;;;;;;;;;;-1:-1:-1;;;;;7106:42:1;;;;;;;;;;;;;;;;;;;;;;;;;6861:294;;;;;:::o;2068:848:4:-;3669:6:6;;2293:17:4;;3669:6:6;;3668:7;;:41;;-1:-1:-1;3679:30:6;;;;3668:41;3660:50;;;;;;;;2256:18:4;:25;2243:38;;2235:47;;;;;;2313:18;:30;;2332:10;;2313:30;;;;;;;;;;;;;;;;2293:50;;2833:8;;2813:1;:17;;;:28;2844:10;2813:41;2785:24;;:69;;2777:78;;;;;;;;2866:43;2898:10;2866:31;:43::i;:::-;2068:848;;:::o;268:26:5:-;;;;;;:::o;3062:182:9:-;1171:5;;1157:10;-1:-1:-1;;;;;1157:19:9;;;1171:5;;1157:19;1148:29;;;;;;3144:5;-1:-1:-1;;;;;3136:13:9;;;3128:22;;;;;;3168:3;3160:11;;-1:-1:-1;;;;;;3160:11:9;;;;;;;3181:23;;;;;;;3214:18;;;;;;;;;;3062:182;:::o;12212:142:6:-;1171:5:9;;1157:10;-1:-1:-1;;;;;1157:19:9;;;1171:5;;1157:19;1148:29;;;;;;614:6:5;;;;606:15;;;;;;;;12307:30:6;:40;;-1:-1:-1;;12307:40:6;;;;;;;;;;12212:142::o;5615:114::-;5697:18;:25;5615:114;;:::o;1585:185:9:-;1171:5;;1157:10;-1:-1:-1;;;;;1157:19:9;;;1171:5;;1157:19;1148:29;;;;;;1666:17;:38;;-1:-1:-1;;;;;;1666:38:9;-1:-1:-1;;;;;1666:38:9;;;;;;;;;;;1745:17;;;;1733:10;1714:49;;;;;;;;;;;1585:185;:::o;10267:192:6:-;1171:5:9;;1157:10;-1:-1:-1;;;;;1157:19:9;;;1171:5;;1157:19;1148:29;;;;;;-1:-1:-1;;;;;10357:25:6;;;;;;:15;:25;;;;;;;:38;;-1:-1:-1;;10357:38:6;;;;;;;10410:42;;10357:38;;10410:42;;;;;;;;;;;;;;;10267:192;;:::o;1882:242:9:-;1948:17;;1977:16;;1934:10;-1:-1:-1;;;;;1934:31:9;;;1948:17;;1934:31;1926:40;;;;;;-1:-1:-1;1996:5:9;;;;2019:17;;-1:-1:-1;;;;;;2011:25:9;;;-1:-1:-1;;;;;2019:17:9;;;2011:25;;;;;;;;2046:23;;;;;1996:5;;;;2111;1996;2080:37;;;;;;;;;;1882:242;:::o;9710:311:6:-;9837:17;1171:5:9;;1157:10;-1:-1:-1;;;;;1157:19:9;;;1171:5;;1157:19;1148:29;;;;;;9800:18:6;:25;9787:38;;9779:47;;;;;;9857:18;:30;;9876:10;;9857:30;;;;;;;;;;;;;;;;;;;9907:10;;;;9857:30;;-1:-1:-1;9907:10:6;;9906:11;9898:20;;;;;;9937:6;;;;;;;;;9936:7;9928:16;;;;;;9955:10;;;:17;;-1:-1:-1;;9955:17:6;9968:4;9955:17;;;10003:10;9987:27;;;;;;;;;;9710:311;;:::o;11688:126::-;1171:5:9;;1157:10;-1:-1:-1;;;;;1157:19:9;;;1171:5;;1157:19;1148:29;;;;;;446:6:5;;;;445:7;437:16;;;;;;11746:30:6;:38;;-1:-1:-1;;11746:38:6;;;11794:13;:11;:13::i;:::-;11688:126::o;9076:473::-;3378:13;;9284:17;;3364:10;-1:-1:-1;;;;;3364:27:6;;;3378:13;;3364:27;3356:36;;;;;;9186:18;:25;9173:38;;9165:47;;;;;;9266:6;9256:16;;;9248:25;;;;;;9304:18;:30;;9323:10;;9304:30;;;;;;;;;;;;;;;;9284:50;;9386:21;;9376:6;9353:1;:20;;;:29;:54;;9345:63;;;;;;;;9427:6;;;;;;;;;9426:7;9418:16;;;;;;9453:10;;;;;;9452:11;9444:20;;;;;;9475;;;:30;;;;;;9515:17;;:27;;;;;;;-1:-1:-1;9076:473:6:o;2525:42::-;;;;;;:::o;8585:233::-;8663:6;;8658:154;8679:11;:18;8675:1;:22;8658:154;;;8736:11;8748:1;8736:14;;;;;;;;;;;;;;;;8718:32;;8764:37;8790:10;8764:25;:37::i;:::-;8699:3;;;;;8658:154;;;8585:233;;;:::o;3215:117:8:-;-1:-1:-1;;;;;3302:23:8;3278:4;3302:23;;;:15;:23;;;;;;;;3301:24;;3215:117::o;638:20:9:-;;;-1:-1:-1;;;;;638:20:9;;:::o;3924:143:1:-;4015:45;4036:5;4043:10;4055:1;4058;4015:20;:45::i;953:21:2:-;;;;:::o;2347:35:6:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;2347:35:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2347:35:6;;;;-1:-1:-1;2347:35:6;;;;;;;;;;;;;;;;;;;;;;;;;:::o;3540:611:8:-;2431:17;;3676:15;;;;2417:10;-1:-1:-1;;;;;2417:31:8;;;2431:17;;2417:31;;2416:56;;-1:-1:-1;2466:5:8;;2452:10;-1:-1:-1;;;;;2452:19:8;;;2466:5;;2452:19;2416:56;2407:66;;;;;;;;-1:-1:-1;;;;;3634:23:8;;;;;;:15;:23;;;;;;;;:30;3626:39;;;;;;-1:-1:-1;;;;;3739:13:8;;;3735:188;;;3804:22;;-1:-1:-1;;;;;3778:4:8;:12;;;;-1:-1:-1;3804:22:8;:40;;;;3778:12;3804:40;;;;;;;;;;;;;;;;;;;;;;;;;;3858:34;3876:6;3884:7;3858:34;;-1:-1:-1;;;;;3858:34:8;;;;;;;;;;;;;;;;;;;;3906:7;;3735:188;-1:-1:-1;3986:6:8;-1:-1:-1;;;;;4013:15:8;;;4029:4;4013:21;;-1:-1:-1;;;4013:21:8;;;;;;-1:-1:-1;;;;;4013:21:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4067:22;;4013:21;;-1:-1:-1;;;;;;4052:14:8;;;;-1:-1:-1;4052:14:8;;4067:22;4013:21;4052:47;;-1:-1:-1;;;4052:47:8;;;;;;-1:-1:-1;;;;;4052:47:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4044:56;;;;;;;;4110:34;4128:6;4136:7;4110:34;;-1:-1:-1;;;;;4110:34:8;;;;;;;;;;;;;;;;;;;;3540:611;;;:::o;1779:70:2:-;1828:9;:14;1779:70::o;2389:28:6:-;;;-1:-1:-1;;;;;2389:28:6;;:::o;10596:122::-;1171:5:9;;1157:10;-1:-1:-1;;;;;1157:19:9;;;1171:5;;1157:19;1148:29;;;;;;10678:13:6;:33;;-1:-1:-1;;;;;;10678:33:6;-1:-1:-1;;;;;10678:33:6;;;;;;;;;;10596:122::o;8385:110:1:-;8465:22;;8451:10;-1:-1:-1;;;;;8451:36:1;;;8465:22;;8451:36;8443:45;;;;;5887:118;5965:33;5972:7;5981:10;5993:1;5996;5965:6;:33::i;2460:20:6:-;;;;:::o;664:32:9:-;;;-1:-1:-1;;;;;664:32:9;;:::o;4520:158:8:-;2431:17;;2417:10;-1:-1:-1;;;;;2417:31:8;;;2431:17;;2417:31;;2416:56;;-1:-1:-1;2466:5:8;;2452:10;-1:-1:-1;;;;;2452:19:8;;;2466:5;;2452:19;2416:56;2407:66;;;;;;;;4630:17;:41;;-1:-1:-1;;;;;;4630:41:8;-1:-1:-1;;;;;4630:41:8;;;;;;;;;;4520:158::o;2687:48:6:-;;;;;;;;;;;;;;;:::o;11395:145::-;1171:5:9;;1157:10;-1:-1:-1;;;;;1157:19:9;;;1171:5;;1157:19;1148:29;;;;;;11487:21:6;:46;11395:145::o;2423:31::-;;;;:::o;6304:1195::-;446:6:5;;6519:4:6;;;;;;446:6:5;;445:7;437:16;;;;;;-1:-1:-1;;;;;6625:10:6;6609:27;;;;;:15;:27;;;;;;;;6601:36;;;;;;;;6664:18;:25;;;-1:-1:-1;6664:25:6;;6726:27;;;;;;:::i;:::-;-1:-1:-1;6843:18:6;:29;;6862:9;;6843:29;;;;;;;;;;;;;;;;;;;6882:9;;;:22;;-1:-1:-1;;;;;;6882:22:6;6894:10;-1:-1:-1;;;;;6882:22:6;;;;6843:29;-1:-1:-1;6971:6:6;6954:23;;;6946:32;;;;;;7107:8;;7090:13;:25;;:142;;7224:8;;7211:10;:8;:10::i;:::-;:21;7090:142;;;7163:13;7150:10;:8;:10::i;:::-;:26;7090:142;7070:17;;;:162;7242:11;;;:24;;-1:-1:-1;;7242:24:6;;-1:-1:-1;;;;;7242:24:6;;;;;;7276:8;;;:18;;;7304:14;7070:17;7313:5;;7304:14;:::i;:::-;-1:-1:-1;7328:11:6;;;:24;;;7362:7;;;:16;;-1:-1:-1;;;;;;7362:16:6;-1:-1:-1;;;;;7362:16:6;;;;;;;;;;;7422:11;;;;7435:8;;;;7422:11;;;;;;;7411:9;;7393:73;;7435:8;7445:7;7328:24;7393:73;;;;;-1:-1:-1;;;;;7393:73:6;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;7483:9:6;6304:1195;-1:-1:-1;;;;;;;;6304:1195:6:o;1219:37:8:-;;;-1:-1:-1;;;;;1219:37:8;;:::o;1515:82:2:-;1581:9;;1515:82;:::o;8637:392:1:-;-1:-1:-1;;;;;8740:21:1;;8709:11;8740:21;;;:14;:21;;;;;;;;8732:30;;;;;;;;-1:-1:-1;8781:7:1;-1:-1:-1;;;;;8827:10:1;;;8823:59;;;-1:-1:-1;8862:9:1;8823:59;8909:1;8900:10;;8892:19;;;;;;-1:-1:-1;;;;;8926:10:1;;;8922:101;;8966:5;-1:-1:-1;;;;;8960:25:1;;8986:10;8998:4;9004:6;8960:51;;-1:-1:-1;;;8960:51:1;;;;;;-1:-1:-1;;;;;8960:51:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8952:60;;;;;;;;8637:392;;;;:::o;7685:822:6:-;3669:6;;7910:17;;3669:6;;3668:7;;:41;;-1:-1:-1;3679:30:6;;;;3668:41;3660:50;;;;;;;;7873:18;:25;7860:38;;7852:47;;;;;;7930:18;:30;;7949:10;;7930:30;;;;;;;;;;;;;;8054:9;7930:30;;;;;8054:9;;;;-1:-1:-1;;;;;8054:9:6;8038:26;;:15;:26;;;;;;;7930:30;;-1:-1:-1;8038:26:6;;8030:35;;;;;;;;8097:1;:17;;;8083:10;:8;:10::i;:::-;:31;;8075:40;;;;;;8134:10;;;;;;8133:11;8125:20;;;;;;8164:6;;;;;;;;;8163:7;8155:16;;;;;;8182:6;;;:13;;-1:-1:-1;;8182:13:6;;;;;8271:7;;;;-1:-1:-1;;;;;8271:7:6;:12;8267:159;;;8299:11;;;;8320:8;;;;8299:11;;;;-1:-1:-1;;;;;8299:11:6;;:30;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8267:159;;;8374:7;;;;8392:11;;;;8405:8;;;;-1:-1:-1;;;;;8374:7:6;;;;8368:23;;8392:11;;;;;8368:46;;-1:-1:-1;;;8368:46:6;;;;;;-1:-1:-1;;;;;8368:46:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8360:55;;;;;;;;8469:11;;;;8482:8;;;;8492:7;;;;-1:-1:-1;;;;;8469:11:6;;;;;;;8457:10;;8441:59;;8482:8;;8492:7;8441:59;;;;;-1:-1:-1;;;;;8441:59:6;;;;;;;;;;;;;;;;7685:822;;:::o;724:100:5:-;1171:5:9;;1157:10;-1:-1:-1;;;;;1157:19:9;;;1171:5;;1157:19;1148:29;;;;;;446:6:5;;;;445:7;437:16;;;;;;782:6;:13;;-1:-1:-1;;782:13:5;791:4;782:13;;;810:7;;;;;;;;;;724:100::o;904:947:2:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;904:947:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;904:947:2;;;-1:-1:-1;904:947:2;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;904:947:2;;;;;;;;;;;;-1:-1:-1;;;;;;904:947:2;;;;;;;;;;;;;;;;;-1:-1:-1;;904:947:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::o"
          },
          "methodIdentifiers": {
            "absoluteMinTimeLock()": "ea8a66c7",
            "acceptOwnership()": "79ba5097",
            "allowDisbursePaymentWhenPaused()": "859bcc71",
            "allowedSpenders(address)": "d8528af0",
            "authorizePayment(string,bytes32,address,address,uint256,uint256)": "f37b74ca",
            "authorizeSpender(address,bool)": "793c0fd4",
            "authorizedPayments(uint256)": "a0927a6a",
            "cancelPayment(uint256)": "8422927d",
            "changeHatchEscapeCaller(address)": "d836fbe8",
            "changeOwnership(address)": "2af4c31e",
            "checkIn()": "183ff085",
            "delayPayment(uint256,uint256)": "846a5dde",
            "depositEscapedFunds()": "bd541ad0",
            "disburseAuthorizedPayment(uint256)": "52892478",
            "disburseAuthorizedPayments(uint256[])": "863da000",
            "donate(uint64,uint64)": "bde60ac9",
            "donate(uint64,uint64,address,uint256)": "4c4316c7",
            "donateAndCreateGiver(address,uint64)": "91f5c3a8",
            "donateAndCreateGiver(address,uint64,address,uint256)": "1870c10f",
            "escapeFunds(address,uint256)": "1b28591c",
            "escapeHatch(address)": "a142d608",
            "escapeHatchCaller()": "1f6eb6e7",
            "escapeHatchDestination()": "f5b61230",
            "isTokenEscapable(address)": "892db057",
            "maxSecurityGuardDelay()": "0b2e7423",
            "mock_time()": "9da47a6b",
            "newOwnerCandidate()": "d091b550",
            "numberOfAuthorizedPayments()": "68b8c5a1",
            "owner()": "8da5cb5b",
            "pause()": "8456cb59",
            "paused()": "5c975abb",
            "proposeOwnership(address)": "710bf322",
            "removeOwnership(address)": "666a3427",
            "securityGuard()": "b2ca3ec4",
            "securityGuardLastCheckin()": "3f487b8b",
            "setAllowDisbursePaymentWhenPaused(bool)": "672f412c",
            "setMaxSecurityGuardDelay(uint256)": "da4793ac",
            "setMockedTime(uint256)": "ab8be231",
            "setSecurityGuard(address)": "bb2a51d1",
            "setTimelock(uint256)": "1e891c0a",
            "timeLock()": "d085835a",
            "unpause()": "3f4ba83a",
            "whitelistToken(address,bool)": "0ffb1d8b"
          }
        },
        "metadata": "{\"compiler\":{\"version\":\"0.4.21+commit.dfe3193c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[],\"name\":\"maxSecurityGuardDelay\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"accepted\",\"type\":\"bool\"}],\"name\":\"whitelistToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"checkIn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"giver\",\"type\":\"address\"},{\"name\":\"receiverId\",\"type\":\"uint64\"},{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"donateAndCreateGiver\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"escapeFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newTimeLock\",\"type\":\"uint256\"}],\"name\":\"setTimelock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"escapeHatchCaller\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"securityGuardLastCheckin\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"giverId\",\"type\":\"uint64\"},{\"name\":\"receiverId\",\"type\":\"uint64\"},{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"donate\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_idPayment\",\"type\":\"uint256\"}],\"name\":\"disburseAuthorizedPayment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dac\",\"type\":\"address\"}],\"name\":\"removeOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"setAllowDisbursePaymentWhenPaused\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numberOfAuthorizedPayments\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwnerCandidate\",\"type\":\"address\"}],\"name\":\"proposeOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_authorize\",\"type\":\"bool\"}],\"name\":\"authorizeSpender\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_idPayment\",\"type\":\"uint256\"}],\"name\":\"cancelPayment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_idPayment\",\"type\":\"uint256\"},{\"name\":\"_delay\",\"type\":\"uint256\"}],\"name\":\"delayPayment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allowDisbursePaymentWhenPaused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_idPayments\",\"type\":\"uint256[]\"}],\"name\":\"disburseAuthorizedPayments\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"isTokenEscapable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"giver\",\"type\":\"address\"},{\"name\":\"receiverId\",\"type\":\"uint64\"}],\"name\":\"donateAndCreateGiver\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mock_time\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"authorizedPayments\",\"outputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"reference\",\"type\":\"bytes32\"},{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"earliestPayTime\",\"type\":\"uint256\"},{\"name\":\"canceled\",\"type\":\"bool\"},{\"name\":\"paid\",\"type\":\"bool\"},{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"securityGuardDelay\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"escapeHatch\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_t\",\"type\":\"uint256\"}],\"name\":\"setMockedTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"securityGuard\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newSecurityGuard\",\"type\":\"address\"}],\"name\":\"setSecurityGuard\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"depositEscapedFunds\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"giverId\",\"type\":\"uint64\"},{\"name\":\"receiverId\",\"type\":\"uint64\"}],\"name\":\"donate\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"timeLock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwnerCandidate\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newEscapeHatchCaller\",\"type\":\"address\"}],\"name\":\"changeHatchEscapeCaller\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowedSpenders\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_maxSecurityGuardDelay\",\"type\":\"uint256\"}],\"name\":\"setMaxSecurityGuardDelay\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"absoluteMinTimeLock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_reference\",\"type\":\"bytes32\"},{\"name\":\"_recipient\",\"type\":\"address\"},{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_paymentDelay\",\"type\":\"uint256\"}],\"name\":\"authorizePayment\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"escapeHatchDestination\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_escapeHatchCaller\",\"type\":\"address\"},{\"name\":\"_escapeHatchDestination\",\"type\":\"address\"},{\"name\":\"_absoluteMinTimeLock\",\"type\":\"uint256\"},{\"name\":\"_timeLock\",\"type\":\"uint256\"},{\"name\":\"_securityGuard\",\"type\":\"address\"},{\"name\":\"_maxSecurityGuardDelay\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"giverId\",\"type\":\"uint64\"},{\"indexed\":false,\"name\":\"receiverId\",\"type\":\"uint64\"},{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Donate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"giver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"receiverId\",\"type\":\"uint64\"},{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DonateAndCreateGiver\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EscapeFundsCalled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"idPayment\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"reference\",\"type\":\"bytes32\"}],\"name\":\"PaymentAuthorized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"idPayment\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"}],\"name\":\"PaymentExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"idPayment\",\"type\":\"uint256\"}],\"name\":\"PaymentCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"authorized\",\"type\":\"bool\"}],\"name\":\"SpenderAuthorization\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"}],\"name\":\"EscapeHatchBlackistedToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EscapeHatchCalled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"by\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"OwnershipRemoved\",\"type\":\"event\"}],\"devdoc\":{\"methods\":{\"authorizePayment(string,bytes32,address,address,uint256,uint256)\":{\"params\":{\"_amount\":\"Amount to be paid in wei\",\"_name\":\"Brief description of the payment that is authorized\",\"_paymentDelay\":\"Number of seconds the payment is to be delayed, if  this value is below `timeLock` then the `timeLock` determines the delay\",\"_recipient\":\"Destination of the payment\",\"_reference\":\"External reference of the payment\"},\"return\":\"The Payment ID number for the new authorized payment\"},\"authorizeSpender(address,bool)\":{\"params\":{\"_authorize\":\"`true` if authorizing and `false` if unauthorizing\",\"_spender\":\"The address of the contract being authorized/unauthorized\"}},\"cancelPayment(uint256)\":{\"params\":{\"_idPayment\":\"ID of the payment to be canceled.\"}},\"changeHatchEscapeCaller(address)\":{\"params\":{\"_newEscapeHatchCaller\":\"The address of a trusted account or  contract to call `escapeHatch()` to send the value in this contract to  the `escapeHatchDestination`; it would be ideal that `escapeHatchCaller`  cannot move funds out of `escapeHatchDestination`\"}},\"changeOwnership(address)\":{\"details\":\"In this 2nd option for ownership transfer `changeOwnership()` can  be called and it will immediately assign ownership to the `newOwner`\",\"params\":{\"_newOwner\":\"The address of the new owner\"}},\"delayPayment(uint256,uint256)\":{\"params\":{\"_delay\":\"The number of seconds to delay the payment\",\"_idPayment\":\"ID of the payment to be delayed\"}},\"disburseAuthorizedPayment(uint256)\":{\"params\":{\"_idPayment\":\"The payment ID to be disbursed\"}},\"donate(uint64,uint64)\":{\"params\":{\"giverId\":\"The adminId of the liquidPledging pledge admin who is donating\",\"receiverId\":\"The adminId of the liquidPledging pledge admin receiving the donation\"}},\"donate(uint64,uint64,address,uint256)\":{\"params\":{\"_amount\":\"The amount of the token to donate. If donating ETH, then 0x0 as the msg.value will be used instead.\",\"giverId\":\"The adminId of the liquidPledging pledge admin who is donating\",\"receiverId\":\"The adminId of the liquidPledging pledge admin receiving the donation\",\"token\":\"The token to donate. If donating ETH, then 0x0. Note: the token must be whitelisted\"}},\"donateAndCreateGiver(address,uint64)\":{\"params\":{\"giver\":\"The address to create a 'giver' pledge admin for in the liquidPledging contract\",\"receiverId\":\"The adminId of the liquidPledging pledge admin receiving the donation\"}},\"donateAndCreateGiver(address,uint64,address,uint256)\":{\"params\":{\"_amount\":\"The amount of the token to donate. If donating ETH, then 0x0 as the msg.value will be used instead.\",\"giver\":\"The address to create a 'giver' pledge admin for in the liquidPledging contract\",\"receiverId\":\"The adminId of the liquidPledging pledge admin receiving the donation\",\"token\":\"The token to donate. If donating ETH, then 0x0. Note: the token must be whitelisted\"}},\"escapeFunds(address,uint256)\":{\"params\":{\"_amount\":\"the amount to transfer\",\"_token\":\"the token to transfer. 0x0 for ETH\"}},\"escapeHatch(address)\":{\"params\":{\"_token\":\"to transfer, use 0x0 for ether\"}},\"isTokenEscapable(address)\":{\"params\":{\"_token\":\"the token address being queried\"},\"return\":\"False if `_token` is in the blacklist and can't be taken out of  the contract via the `escapeHatch()`\"},\"numberOfAuthorizedPayments()\":{\"return\":\"The number of payments ever authorized even if they were canceled\"},\"pause()\":{\"details\":\"called by the owner to pause the contract. Triggers a stopped state   and resets allowDisbursePaymentWhenPaused to false\"},\"proposeOwnership(address)\":{\"details\":\"In this 1st option for ownership transfer `proposeOwnership()` must  be called first by the current `owner` then `acceptOwnership()` must be  called by the `newOwnerCandidate`\",\"params\":{\"_newOwnerCandidate\":\"The address being proposed as the new owner\"}},\"removeOwnership(address)\":{\"details\":\"In this 3rd option for ownership transfer `removeOwnership()` can  be called and it will immediately assign ownership to the 0x0 address;  it requires a 0xdece be input as a parameter to prevent accidental use\",\"params\":{\"_dac\":\"`0xdac` has to be entered for this function to work\"}},\"setAllowDisbursePaymentWhenPaused(bool)\":{\"details\":\"only callable whenPaused b/c pausing the contract will reset `allowDisbursePaymentWhenPaused` to false\",\"params\":{\"allowed\":\"`true` if allowing payments to be disbursed when paused, otherwise 'false'\"}},\"setMaxSecurityGuardDelay(uint256)\":{\"params\":{\"_maxSecurityGuardDelay\":\"The new maximum delay in seconds that  `securityGuard` can delay the payment's execution in total\"}},\"setMockedTime(uint256)\":{\"details\":\"`setMockedTime` is a basic setter function for  the mock_time parameter\",\"params\":{\"_t\":\"This is the value to which the mocked time  will be set.\"}},\"setSecurityGuard(address)\":{\"params\":{\"_newSecurityGuard\":\"Address of the new security guard\"}},\"setTimelock(uint256)\":{\"params\":{\"_newTimeLock\":\"Sets the new minimum default `timeLock` in seconds;  pending payments maintain their `earliestPayTime`\"}},\"unpause()\":{\"details\":\"called by the owner to unpause, returns to normal state\"},\"whitelistToken(address,bool)\":{\"params\":{\"accepted\":\"Wether or not to accept this token for donations\",\"token\":\"The address of the token to update\"}}}},\"userdoc\":{\"methods\":{\"acceptOwnership()\":{\"notice\":\"Can only be called by the `newOwnerCandidate`, accepts the  transfer of ownership\"},\"authorizePayment(string,bytes32,address,address,uint256,uint256)\":{\"notice\":\"/////only `allowedSpenders[]` Creates a new `Payment`\"},\"authorizeSpender(address,bool)\":{\"notice\":\"`onlyOwner` Adds a spender to the `allowedSpenders[]` white list\"},\"cancelPayment(uint256)\":{\"notice\":\"////`onlyOwner` Cancel a payment all together\"},\"changeHatchEscapeCaller(address)\":{\"notice\":\"Changes the address assigned to call `escapeHatch()`\"},\"changeOwnership(address)\":{\"notice\":\"`owner` can step down and assign some other address to this role\"},\"checkIn()\":{\"notice\":\"`onlySecurityGuard` can checkin. If they fail to checkin, payments will not be allowed to be disbursed, unless the payment has an `earliestPayTime` <= `securityGuardLastCheckin`.To reduce the risk of a front-running attack on payments, it is important that this is called with a resonable gasPrice set for the current network congestion. If this tx is not mined, within 30 mins of being sent, it is possible that a payment can be authorized w/o the securityGuard's knowledge\"},\"delayPayment(uint256,uint256)\":{\"notice\":\"//////`onlySecurityGuard` Delays a payment for a set number of seconds\"},\"depositEscapedFunds()\":{\"notice\":\"Allow the escapeHatchDestination to deposit eth into this contract w/o calling donate method\"},\"disburseAuthorizedPayment(uint256)\":{\"notice\":\"Disburse an authorizedPayment to the recipient if all checks pass.\"},\"disburseAuthorizedPayments(uint256[])\":{\"notice\":\"convience function to disburse multiple payments in a single tx\"},\"donate(uint64,uint64)\":{\"notice\":\"It is not recommened to call this function outside of the giveth dapp (giveth.io) this function is bridged to a side chain. If for some reason the sidechain tx fails, the donation will end up in the givers control inside LiquidPledging contract. If you do not use the dapp, there will be no way of notifying the sender/giver that the giver has to take action (withdraw/donate) in the dapp\"},\"donate(uint64,uint64,address,uint256)\":{\"notice\":\"It is not recommened to call this function outside of the giveth dapp (giveth.io) this function is bridged to a side chain. If for some reason the sidechain tx fails, the donation will end up in the givers control inside LiquidPledging contract. If you do not use the dapp, there will be no way of notifying the sender/giver that the giver has to take action (withdraw/donate) in the dapp\"},\"donateAndCreateGiver(address,uint64)\":{\"notice\":\"It is not recommened to call this function outside of the giveth dapp (giveth.io) this function is bridged to a side chain. If for some reason the sidechain tx fails, the donation will end up in the givers control inside LiquidPledging contract. If you do not use the dapp, there will be no way of notifying the sender/giver that the giver has to take action (withdraw/donate) in the dapp\"},\"donateAndCreateGiver(address,uint64,address,uint256)\":{\"notice\":\"It is not recommened to call this function outside of the giveth dapp (giveth.io) this function is bridged to a side chain. If for some reason the sidechain tx fails, the donation will end up in the givers control inside LiquidPledging contract. If you do not use the dapp, there will be no way of notifying the sender/giver that the giver has to take action (withdraw/donate) in the dapp\"},\"escapeFunds(address,uint256)\":{\"notice\":\"Transfer tokens/eth to the escapeHatchDestination. Used as a safety mechanism to prevent the bridge from holding too much value    * before being thoroughly battle-tested.\"},\"escapeHatch(address)\":{\"notice\":\"The `escapeHatch()` should only be called as a last resort if a security issue is uncovered or something unexpected happened\"},\"isTokenEscapable(address)\":{\"notice\":\"Checks to see if `_token` is in the blacklist of tokens\"},\"numberOfAuthorizedPayments()\":{\"notice\":\"//////States the total number of authorized payments in this contract\"},\"proposeOwnership(address)\":{\"notice\":\"`onlyOwner` Proposes to transfer control of the contract to a  new owner\"},\"removeOwnership(address)\":{\"notice\":\"Decentralizes the contract, this operation cannot be undone \"},\"setAllowDisbursePaymentWhenPaused(bool)\":{\"notice\":\"Owner can allow payment disbursement when the contract is paused. This is so the bridge can be upgraded without having to migrate any existing authorizedPayments\"},\"setMaxSecurityGuardDelay(uint256)\":{\"notice\":\"`onlyOwner` Changes the maximum number of seconds `securityGuard` can delay a payment\"},\"setSecurityGuard(address)\":{\"notice\":\"`onlyOwner` Sets the address of `securityGuard`\"},\"setTimelock(uint256)\":{\"notice\":\"`onlyOwner` Changes `timeLock`; the new `timeLock` cannot be  lower than `absoluteMinTimeLock`\"},\"whitelistToken(address,bool)\":{\"notice\":\"The `owner` can call this function to add/remove a token from the whitelist\"}}}},\"settings\":{\"compilationTarget\":{\"./contracts/GivethBridgeMock.sol\":\"GivethBridgeMock\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"./contracts/GivethBridge.sol\":{\"content\":\"pragma solidity ^0.4.21;\\n\\n/*\\n    Copyright 2017, RJ Ewing <perissology@protonmail.com>\\n\\n    This program is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU General Public License as published by\\n    the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    This program is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU General Public License for more details.\\n\\n    You should have received a copy of the GNU General Public License\\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n*/\\n\\nimport \\\"giveth-common-contracts/contracts/ERC20.sol\\\";\\nimport \\\"./lib/FailClosedVault.sol\\\";\\n\\n\\n/**\\n* @notice It is not recommened to call this function outside of the giveth dapp (giveth.io)\\n* this function is bridged to a side chain. If for some reason the sidechain tx fails, the donation\\n* will end up in the givers control inside LiquidPledging contract. If you do not use the dapp, there\\n* will be no way of notifying the sender/giver that the giver has to take action (withdraw/donate) in\\n* the dapp\\n*/\\ncontract GivethBridge is FailClosedVault {\\n\\n    mapping(address => bool) tokenWhitelist;\\n\\n    event Donate(uint64 giverId, uint64 receiverId, address token, uint amount);\\n    event DonateAndCreateGiver(address giver, uint64 receiverId, address token, uint amount);\\n    event EscapeFundsCalled(address token, uint amount);\\n\\n    //== constructor\\n\\n    /**\\n    * @param _escapeHatchCaller The address of a trusted account or contract to\\n    *  call `escapeHatch()` to send the ether in this contract to the\\n    *  `escapeHatchDestination` in the case on an emergency. it would be ideal \\n    *  if `escapeHatchCaller` cannot move funds out of `escapeHatchDestination`\\n    * @param _escapeHatchDestination The address of a safe location (usually a\\n    *  Multisig) to send the ether held in this contract in the case of an emergency\\n    * @param _absoluteMinTimeLock The minimum number of seconds `timelock` can\\n    *  be set to, if set to 0 the `owner` can remove the `timeLock` completely\\n    * @param _timeLock Minimum number of seconds that payments are delayed\\n    *  after they are authorized (a security precaution)\\n    * @param _securityGuard Address that will be able to delay the payments\\n    *  beyond the initial timelock requirements; can be set to 0x0 to remove\\n    *  the `securityGuard` functionality\\n    * @param _maxSecurityGuardDelay The maximum number of seconds in total\\n    *   that `securityGuard` can delay a payment so that the owner can cancel\\n    *   the payment if needed\\n    */\\n    function GivethBridge(\\n        address _escapeHatchCaller,\\n        address _escapeHatchDestination,\\n        uint _absoluteMinTimeLock,\\n        uint _timeLock,\\n        address _securityGuard,\\n        uint _maxSecurityGuardDelay\\n    ) FailClosedVault(\\n        _escapeHatchCaller,\\n        _escapeHatchDestination,\\n        _absoluteMinTimeLock,\\n        _timeLock,\\n        _securityGuard,\\n        _maxSecurityGuardDelay\\n    ) public\\n    {\\n        tokenWhitelist[0] = true; // enable eth transfers\\n    }\\n\\n    //== public methods\\n\\n    /**\\n    * @notice It is not recommened to call this function outside of the giveth dapp (giveth.io)\\n    * this function is bridged to a side chain. If for some reason the sidechain tx fails, the donation\\n    * will end up in the givers control inside LiquidPledging contract. If you do not use the dapp, there\\n    * will be no way of notifying the sender/giver that the giver has to take action (withdraw/donate) in\\n    * the dapp\\n    *\\n    * @param giver The address to create a 'giver' pledge admin for in the liquidPledging contract\\n    * @param receiverId The adminId of the liquidPledging pledge admin receiving the donation\\n    */\\n    function donateAndCreateGiver(address giver, uint64 receiverId) payable external {\\n        donateAndCreateGiver(giver, receiverId, 0, 0);\\n    }\\n\\n    /**\\n    * @notice It is not recommened to call this function outside of the giveth dapp (giveth.io)\\n    * this function is bridged to a side chain. If for some reason the sidechain tx fails, the donation\\n    * will end up in the givers control inside LiquidPledging contract. If you do not use the dapp, there\\n    * will be no way of notifying the sender/giver that the giver has to take action (withdraw/donate) in\\n    * the dapp\\n    *\\n    * @param giver The address to create a 'giver' pledge admin for in the liquidPledging contract\\n    * @param receiverId The adminId of the liquidPledging pledge admin receiving the donation\\n    * @param token The token to donate. If donating ETH, then 0x0. Note: the token must be whitelisted\\n    * @param _amount The amount of the token to donate. If donating ETH, then 0x0 as the msg.value will be used instead.\\n    */\\n    function donateAndCreateGiver(address giver, uint64 receiverId, address token, uint _amount) whenNotPaused payable public {\\n        require(giver != 0);\\n        require(receiverId != 0);\\n        uint amount = _receiveDonation(token, _amount);\\n        emit DonateAndCreateGiver(giver, receiverId, token, amount);\\n    }\\n\\n    /**\\n    * @notice It is not recommened to call this function outside of the giveth dapp (giveth.io)\\n    * this function is bridged to a side chain. If for some reason the sidechain tx fails, the donation\\n    * will end up in the givers control inside LiquidPledging contract. If you do not use the dapp, there\\n    * will be no way of notifying the sender/giver that the giver has to take action (withdraw/donate) in\\n    * the dapp\\n    *\\n    * @param giverId The adminId of the liquidPledging pledge admin who is donating\\n    * @param receiverId The adminId of the liquidPledging pledge admin receiving the donation\\n    */\\n    function donate(uint64 giverId, uint64 receiverId) payable external {\\n        donate(giverId, receiverId, 0, 0);\\n    }\\n\\n    /**\\n    * @notice It is not recommened to call this function outside of the giveth dapp (giveth.io)\\n    * this function is bridged to a side chain. If for some reason the sidechain tx fails, the donation\\n    * will end up in the givers control inside LiquidPledging contract. If you do not use the dapp, there\\n    * will be no way of notifying the sender/giver that the giver has to take action (withdraw/donate) in\\n    * the dapp\\n    *\\n    * @param giverId The adminId of the liquidPledging pledge admin who is donating\\n    * @param receiverId The adminId of the liquidPledging pledge admin receiving the donation\\n    * @param token The token to donate. If donating ETH, then 0x0. Note: the token must be whitelisted\\n    * @param _amount The amount of the token to donate. If donating ETH, then 0x0 as the msg.value will be used instead.\\n    */\\n    function donate(uint64 giverId, uint64 receiverId, address token, uint _amount) whenNotPaused payable public {\\n        require(giverId != 0);\\n        require(receiverId != 0);\\n        uint amount = _receiveDonation(token, _amount);\\n        emit Donate(giverId, receiverId, token, amount);\\n    }\\n\\n    /**\\n    * The `owner` can call this function to add/remove a token from the whitelist\\n    *\\n    * @param token The address of the token to update\\n    * @param accepted Wether or not to accept this token for donations\\n    */\\n    function whitelistToken(address token, bool accepted) whenNotPaused onlyOwner external {\\n        tokenWhitelist[token] = accepted;\\n    }\\n\\n    /**\\n    * Transfer tokens/eth to the escapeHatchDestination.\\n    * Used as a safety mechanism to prevent the bridge from holding too much value\\n    *\\n    * before being thoroughly battle-tested.\\n    * @param _token the token to transfer. 0x0 for ETH\\n    * @param _amount the amount to transfer\\n    */\\n    function escapeFunds(address _token, uint _amount) external onlyEscapeHatchCallerOrOwner {\\n        // @dev Logic for ether\\n        if (_token == 0) {\\n            escapeHatchDestination.transfer(_amount);\\n        // @dev Logic for tokens\\n        } else {\\n            ERC20 token = ERC20(_token);\\n            require(token.transfer(escapeHatchDestination, _amount));\\n        }\\n        emit EscapeFundsCalled(_token, _amount);\\n    }\\n\\n    /**\\n    * Allow the escapeHatchDestination to deposit eth into this contract w/o calling donate method\\n    */\\n    function depositEscapedFunds() external payable {\\n        require(msg.sender == escapeHatchDestination);\\n    }\\n\\n    //== internal methods\\n\\n    /**\\n    * @dev used to actually receive the donation. Will transfer the token to to this contract\\n    */\\n    function _receiveDonation(address token, uint _amount) internal returns(uint amount) {\\n        require(tokenWhitelist[token]);\\n        amount = _amount;\\n\\n        // eth donation\\n        if (token == 0) {\\n            amount = msg.value;\\n        }\\n\\n        require(amount > 0);\\n\\n        if (token != 0) {\\n            require(ERC20(token).transferFrom(msg.sender, this, amount));\\n        }\\n    }\\n}\",\"keccak256\":\"0xd061316db9fd3c2ca1beeea0d5194d1c6fcc1b52de3c7fba4c8e449218203847\"},\"./contracts/GivethBridgeMock.sol\":{\"content\":\"pragma solidity ^0.4.21;\\n/*\\n    Copyright 2017, RJ Ewing\\n\\n    This program is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU General Public License as published by\\n    the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    This program is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU General Public License for more details.\\n\\n    You should have received a copy of the GNU General Public License\\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n*/\\n\\nimport \\\"./GivethBridge.sol\\\";\\n\\n/// @dev `GivethBridgeMock` allows for mocking up\\n///  a `GivethBridge` contract with the added ability\\n///  to manipulate the block time for testing purposes.\\ncontract GivethBridgeMock is GivethBridge {\\n\\n    uint public mock_time;\\n\\n    function GivethBridgeMock(\\n        address _escapeHatchCaller,\\n        address _escapeHatchDestination,\\n        uint _absoluteMinTimeLock,\\n        uint _timeLock,\\n        address _securityGuard,\\n        uint _maxSecurityGuardDelay\\n    ) GivethBridge(\\n        _escapeHatchCaller,\\n        _escapeHatchDestination,\\n        _absoluteMinTimeLock,\\n        _timeLock,\\n        _securityGuard,\\n        _maxSecurityGuardDelay\\n    ) public\\n    {\\n    }\\n\\n    /// @dev `_getTime` is a basic getter function for\\n    ///  the mock_time parameter\\n    function _getTime() internal view returns (uint) {\\n        return mock_time;\\n    }\\n\\n    /// @dev `setMockedTime` is a basic setter function for\\n    ///  the mock_time parameter\\n    /// @param _t This is the value to which the mocked time\\n    ///  will be set.\\n    function setMockedTime(uint _t) public {\\n        mock_time = _t;\\n    }\\n}\",\"keccak256\":\"0x1a5a2094e0b3170615ca2f7af3cd6b80e293a5f605b51bcb053ccfe164d65343\"},\"./contracts/lib/FailClosedVault.sol\":{\"content\":\"pragma solidity ^0.4.21;\\n\\n/*\\n    Copyright 2018, RJ Ewing\\n\\n    This program is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU General Public License as published by\\n    the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    This program is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU General Public License for more details.\\n\\n    You should have received a copy of the GNU General Public License\\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n */\\n\\nimport \\\"./Vault.sol\\\";\\n\\n/**\\n* @dev `FailClosedVault` is a version of the vault that requires\\n*  the securityGuard to \\\"see\\\" each payment before it can be collected\\n*/\\ncontract FailClosedVault is Vault {\\n    uint public securityGuardLastCheckin;\\n\\n    /**\\n    * @param _absoluteMinTimeLock For this version of the vault, it is recommended\\n    *   that this value is > 24hrs. If not, it will require the securityGuard to checkIn\\n    *   multiple times a day. Also consider that `securityGuardLastCheckin >= payment.earliestPayTime - timelock + 30mins);`\\n    *   is the condition to allow payments to be payed. The additional 30 mins is to reduce (not eliminate)\\n    *   the risk of front-running\\n    */\\n    function FailClosedVault(\\n        address _escapeHatchCaller,\\n        address _escapeHatchDestination,\\n        uint _absoluteMinTimeLock,\\n        uint _timeLock,\\n        address _securityGuard,\\n        uint _maxSecurityGuardDelay\\n    ) Vault(\\n        _escapeHatchCaller,\\n        _escapeHatchDestination, \\n        _absoluteMinTimeLock,\\n        _timeLock,\\n        _securityGuard,\\n        _maxSecurityGuardDelay\\n    ) public {\\n    }\\n\\n/////////////////////\\n// Spender Interface\\n/////////////////////\\n\\n    /**\\n    * Disburse an authorizedPayment to the recipient if all checks pass.\\n    *\\n    * @param _idPayment The payment ID to be disbursed\\n    */\\n    function disburseAuthorizedPayment(uint _idPayment) disbursementsAllowed public {\\n        // Check that the `_idPayment` has been added to the payments struct\\n        require(_idPayment < authorizedPayments.length);\\n\\n        Payment storage p = authorizedPayments[_idPayment];\\n        // The current minimum delay for a payment is `timeLock`. Thus the following ensuress\\n        // that the `securityGuard` has checked in after the payment was created\\n        // @notice earliestPayTime is updated when a payment is delayed. Which may require\\n        // another checkIn before the payment can be collected.\\n        // @notice We add 30 mins to this to reduce (not eliminate) the risk of front-running\\n        require(securityGuardLastCheckin >= p.earliestPayTime - timeLock + 30 minutes);\\n\\n        super.disburseAuthorizedPayment(_idPayment);\\n    }\\n\\n///////////////////////////\\n// SecurityGuard Interface\\n///////////////////////////\\n\\n    /**\\n    * @notice `onlySecurityGuard` can checkin. If they fail to checkin,\\n    * payments will not be allowed to be disbursed, unless the payment has\\n    * an `earliestPayTime` <= `securityGuardLastCheckin`.\\n    * @notice To reduce the risk of a front-running attack on payments, it\\n    * is important that this is called with a resonable gasPrice set for the\\n    * current network congestion. If this tx is not mined, within 30 mins\\n    * of being sent, it is possible that a payment can be authorized w/o the\\n    * securityGuard's knowledge\\n    */\\n    function checkIn() onlySecurityGuard external {\\n        securityGuardLastCheckin = _getTime();\\n    }\\n}\",\"keccak256\":\"0x62fc5761fc90bd42b4c504be4cb94f05343bd678452f5ed1e794b1e98a5174d1\"},\"./contracts/lib/Pausable.sol\":{\"content\":\"pragma solidity ^0.4.21;\\n\\nimport \\\"giveth-common-contracts/contracts/Owned.sol\\\";\\n\\n/**\\n * @title Pausable\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\n */\\ncontract Pausable is Owned {\\n    event Pause();\\n    event Unpause();\\n\\n    bool public paused = false;\\n\\n    /**\\n    * @dev Modifier to make a function callable only when the contract is not paused.\\n    */\\n    modifier whenNotPaused() {\\n        require(!paused);\\n        _;\\n    }\\n\\n    /**\\n    * @dev Modifier to make a function callable only when the contract is paused.\\n    */\\n    modifier whenPaused() {\\n        require(paused);\\n        _;\\n    }\\n\\n    /**\\n    * @dev called by the owner to pause, triggers stopped state\\n    */\\n    function pause() onlyOwner whenNotPaused public {\\n        paused = true;\\n        emit Pause();\\n    }\\n\\n    /**\\n    * @dev called by the owner to unpause, returns to normal state\\n    */\\n    function unpause() onlyOwner whenPaused public {\\n        paused = false;\\n        emit Unpause();\\n    }\\n}\",\"keccak256\":\"0xd134809350f024c16096d995915c6a348d770e1ec633723419f4f3acbd1e4b46\"},\"./contracts/lib/Vault.sol\":{\"content\":\"pragma solidity ^0.4.21;\\n\\n/*\\n    Copyright 2018, Jordi Baylina, RJ Ewing\\n\\n    This program is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU General Public License as published by\\n    the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    This program is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU General Public License for more details.\\n\\n    You should have received a copy of the GNU General Public License\\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n */\\n\\n/// @title Vault Contract\\n/// @author Jordi Baylina, RJ Ewing\\n/// @notice This contract holds funds for Campaigns and automates payments. For\\n///  this iteration the funds will come straight from the Giveth Multisig as a\\n///  safety precaution, but once fully tested and optimized this contract will\\n///  be a safe place to store funds equipped with optional variable time delays\\n///  to allow for an optional escape hatch\\n\\nimport \\\"giveth-common-contracts/contracts/Escapable.sol\\\";\\nimport \\\"./Pausable.sol\\\";\\n\\n/// @dev `Vault` is a higher level contract built off of the `Escapable`\\n///  contract that holds funds for Campaigns and automates payments.\\ncontract Vault is Escapable, Pausable {\\n\\n    /// @dev `Payment` is a public structure that describes the details of\\n    ///  each payment making it easy to track the movement of funds\\n    ///  transparently\\n    struct Payment {\\n        string name;              // What is the purpose of this payment\\n        bytes32 reference;        // Reference of the payment.\\n        address spender;          // Who is sending the funds\\n        uint earliestPayTime;     // The earliest a payment can be made (Unix Time)\\n        bool canceled;            // If True then the payment has been canceled\\n        bool paid;                // If True then the payment has been paid\\n        address recipient;        // Who is receiving the funds\\n        address token;            // Token this payment represents\\n        uint amount;              // The amount of wei sent in the payment\\n        uint securityGuardDelay;  // The seconds `securityGuard` can delay payment\\n    }\\n\\n    Payment[] public authorizedPayments;\\n\\n    address public securityGuard;\\n    uint public absoluteMinTimeLock;\\n    uint public timeLock;\\n    uint public maxSecurityGuardDelay;\\n    bool public allowDisbursePaymentWhenPaused;\\n\\n    /// @dev The white list of approved addresses allowed to set up && receive\\n    ///  payments from this vault\\n    mapping (address => bool) public allowedSpenders;\\n\\n    // @dev Events to make the payment movements easy to find on the blockchain\\n    event PaymentAuthorized(uint indexed idPayment, address indexed recipient, uint amount, address token, bytes32 reference);\\n    event PaymentExecuted(uint indexed idPayment, address indexed recipient, uint amount, address token);\\n    event PaymentCanceled(uint indexed idPayment);\\n    event SpenderAuthorization(address indexed spender, bool authorized);\\n\\n    /// @dev The address assigned the role of `securityGuard` is the only\\n    ///  addresses that can call a function with this modifier\\n    modifier onlySecurityGuard { \\n        require(msg.sender == securityGuard);\\n        _;\\n    }\\n\\n    /// By default, we dis-allow payment disburements if the contract is paused.\\n    /// However, to facilitate a migration of the bridge, we can allow\\n    /// disbursements when paused if explicitly set\\n    modifier disbursementsAllowed {\\n        require(!paused || allowDisbursePaymentWhenPaused);\\n        _;\\n    }\\n\\n    /// @notice The Constructor creates the Vault on the blockchain\\n    /// @param _escapeHatchCaller The address of a trusted account or contract to\\n    ///  call `escapeHatch()` to send the ether in this contract to the\\n    ///  `escapeHatchDestination` it would be ideal if `escapeHatchCaller` cannot move\\n    ///  funds out of `escapeHatchDestination`\\n    /// @param _escapeHatchDestination The address of a safe location (usu a\\n    ///  Multisig) to send the ether held in this contract in an emergency\\n    /// @param _absoluteMinTimeLock The minimum number of seconds `timelock` can\\n    ///  be set to, if set to 0 the `owner` can remove the `timeLock` completely\\n    /// @param _timeLock Initial number of seconds that payments are delayed\\n    ///  after they are authorized (a security precaution)\\n    /// @param _securityGuard Address that will be able to delay the payments\\n    ///  beyond the initial timelock requirements; can be set to 0x0 to remove\\n    ///  the `securityGuard` functionality\\n    /// @param _maxSecurityGuardDelay The maximum number of seconds in total\\n    ///   that `securityGuard` can delay a payment so that the owner can cancel\\n    ///   the payment if needed\\n    function Vault(\\n        address _escapeHatchCaller,\\n        address _escapeHatchDestination,\\n        uint _absoluteMinTimeLock,\\n        uint _timeLock,\\n        address _securityGuard,\\n        uint _maxSecurityGuardDelay\\n    ) Escapable(_escapeHatchCaller, _escapeHatchDestination) public\\n    {\\n        absoluteMinTimeLock = _absoluteMinTimeLock;\\n        timeLock = _timeLock;\\n        securityGuard = _securityGuard;\\n        maxSecurityGuardDelay = _maxSecurityGuardDelay;\\n    }\\n\\n/////////\\n// Helper functions\\n/////////\\n\\n    /// @notice States the total number of authorized payments in this contract\\n    /// @return The number of payments ever authorized even if they were canceled\\n    function numberOfAuthorizedPayments() public view returns (uint) {\\n        return authorizedPayments.length;\\n    }\\n\\n////////\\n// Spender Interface\\n////////\\n\\n    /// @notice only `allowedSpenders[]` Creates a new `Payment`\\n    /// @param _name Brief description of the payment that is authorized\\n    /// @param _reference External reference of the payment\\n    /// @param _recipient Destination of the payment\\n    /// @param _amount Amount to be paid in wei\\n    /// @param _paymentDelay Number of seconds the payment is to be delayed, if\\n    ///  this value is below `timeLock` then the `timeLock` determines the delay\\n    /// @return The Payment ID number for the new authorized payment\\n    function authorizePayment(\\n        string _name,\\n        bytes32 _reference,\\n        address _recipient,\\n        address _token,\\n        uint _amount,\\n        uint _paymentDelay\\n    ) whenNotPaused external returns(uint) {\\n\\n        // Fail if you arent on the `allowedSpenders` white list\\n        require(allowedSpenders[msg.sender]);\\n        uint idPayment = authorizedPayments.length;       // Unique Payment ID\\n        authorizedPayments.length++;\\n\\n        // The following lines fill out the payment struct\\n        Payment storage p = authorizedPayments[idPayment];\\n        p.spender = msg.sender;\\n\\n        // Overflow protection\\n        require(_paymentDelay <= 10**18);\\n\\n        // Determines the earliest the recipient can receive payment (Unix time)\\n        p.earliestPayTime = _paymentDelay >= timeLock ?\\n                                _getTime() + _paymentDelay :\\n                                _getTime() + timeLock;\\n        p.recipient = _recipient;\\n        p.amount = _amount;\\n        p.name = _name;\\n        p.reference = _reference;\\n        p.token = _token;\\n        emit PaymentAuthorized(idPayment, p.recipient, p.amount, p.token, p.reference);\\n        return idPayment;\\n    }\\n\\n    /// Anyone can call this function to disburse the payment to \\n    ///  the recipient after `earliestPayTime` has passed\\n    /// @param _idPayment The payment ID to be executed\\n    function disburseAuthorizedPayment(uint _idPayment) disbursementsAllowed public {\\n        // Check that the `_idPayment` has been added to the payments struct\\n        require(_idPayment < authorizedPayments.length);\\n\\n        Payment storage p = authorizedPayments[_idPayment];\\n\\n        // Checking for reasons not to execute the payment\\n        require(allowedSpenders[p.spender]);\\n        require(_getTime() >= p.earliestPayTime);\\n        require(!p.canceled);\\n        require(!p.paid);\\n\\n        p.paid = true; // Set the payment to being paid\\n\\n        // Make the payment\\n        if (p.token == 0) {\\n            p.recipient.transfer(p.amount);\\n        } else {\\n            require(ERC20(p.token).transfer(p.recipient, p.amount));\\n        }\\n\\n        emit PaymentExecuted(_idPayment, p.recipient, p.amount, p.token);\\n    }\\n\\n    /// convience function to disburse multiple payments in a single tx\\n    function disburseAuthorizedPayments(uint[] _idPayments) public {\\n        for (uint i = 0; i < _idPayments.length; i++) {\\n            uint _idPayment = _idPayments[i];\\n            disburseAuthorizedPayment(_idPayment);\\n        }\\n    }\\n\\n/////////\\n// SecurityGuard Interface\\n/////////\\n\\n    /// @notice `onlySecurityGuard` Delays a payment for a set number of seconds\\n    /// @param _idPayment ID of the payment to be delayed\\n    /// @param _delay The number of seconds to delay the payment\\n    function delayPayment(uint _idPayment, uint _delay) onlySecurityGuard external {\\n        require(_idPayment < authorizedPayments.length);\\n\\n        // Overflow test\\n        require(_delay <= 10**18);\\n\\n        Payment storage p = authorizedPayments[_idPayment];\\n\\n        require(p.securityGuardDelay + _delay <= maxSecurityGuardDelay);\\n        require(!p.paid);\\n        require(!p.canceled);\\n\\n        p.securityGuardDelay += _delay;\\n        p.earliestPayTime += _delay;\\n    }\\n\\n////////\\n// Owner Interface\\n///////\\n\\n    /// @notice `onlyOwner` Cancel a payment all together\\n    /// @param _idPayment ID of the payment to be canceled.\\n    function cancelPayment(uint _idPayment) onlyOwner external {\\n        require(_idPayment < authorizedPayments.length);\\n\\n        Payment storage p = authorizedPayments[_idPayment];\\n\\n        require(!p.canceled);\\n        require(!p.paid);\\n\\n        p.canceled = true;\\n        emit PaymentCanceled(_idPayment);\\n    }\\n\\n    /// @notice `onlyOwner` Adds a spender to the `allowedSpenders[]` white list\\n    /// @param _spender The address of the contract being authorized/unauthorized\\n    /// @param _authorize `true` if authorizing and `false` if unauthorizing\\n    function authorizeSpender(address _spender, bool _authorize) onlyOwner external {\\n        allowedSpenders[_spender] = _authorize;\\n        emit SpenderAuthorization(_spender, _authorize);\\n    }\\n\\n    /// @notice `onlyOwner` Sets the address of `securityGuard`\\n    /// @param _newSecurityGuard Address of the new security guard\\n    function setSecurityGuard(address _newSecurityGuard) onlyOwner external {\\n        securityGuard = _newSecurityGuard;\\n    }\\n\\n    /// @notice `onlyOwner` Changes `timeLock`; the new `timeLock` cannot be\\n    ///  lower than `absoluteMinTimeLock`\\n    /// @param _newTimeLock Sets the new minimum default `timeLock` in seconds;\\n    ///  pending payments maintain their `earliestPayTime`\\n    function setTimelock(uint _newTimeLock) onlyOwner external {\\n        require(_newTimeLock >= absoluteMinTimeLock);\\n        timeLock = _newTimeLock;\\n    }\\n\\n    /// @notice `onlyOwner` Changes the maximum number of seconds\\n    /// `securityGuard` can delay a payment\\n    /// @param _maxSecurityGuardDelay The new maximum delay in seconds that\\n    ///  `securityGuard` can delay the payment's execution in total\\n    function setMaxSecurityGuardDelay(uint _maxSecurityGuardDelay) onlyOwner external {\\n        maxSecurityGuardDelay = _maxSecurityGuardDelay;\\n    }\\n\\n    /// @dev called by the owner to pause the contract. Triggers a stopped state \\n    ///  and resets allowDisbursePaymentWhenPaused to false\\n    function pause() onlyOwner whenNotPaused public {\\n        allowDisbursePaymentWhenPaused = false;\\n        super.pause();\\n    }\\n\\n    /// Owner can allow payment disbursement when the contract is paused. This is so the\\n    /// bridge can be upgraded without having to migrate any existing authorizedPayments\\n    /// @dev only callable whenPaused b/c pausing the contract will reset `allowDisbursePaymentWhenPaused` to false\\n    /// @param allowed `true` if allowing payments to be disbursed when paused, otherwise 'false'\\n    function setAllowDisbursePaymentWhenPaused(bool allowed) onlyOwner whenPaused public {\\n        allowDisbursePaymentWhenPaused = allowed;\\n    }\\n\\n    // for overidding during testing\\n    function _getTime() internal view returns (uint) {\\n        return now;\\n    }\\n\\n}\",\"keccak256\":\"0x519df8e782548ae72e234de6f5c294def03beb3a3f9308093908311ba0bcd64a\"},\"giveth-common-contracts/contracts/ERC20.sol\":{\"content\":\"pragma solidity ^0.4.19;\\n\\n\\n/**\\n * @title ERC20\\n * @dev A standard interface for tokens.\\n * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\\n */\\ncontract ERC20 {\\n  \\n    /// @dev Returns the total token supply\\n    function totalSupply() public constant returns (uint256 supply);\\n\\n    /// @dev Returns the account balance of the account with address _owner\\n    function balanceOf(address _owner) public constant returns (uint256 balance);\\n\\n    /// @dev Transfers _value number of tokens to address _to\\n    function transfer(address _to, uint256 _value) public returns (bool success);\\n\\n    /// @dev Transfers _value number of tokens from address _from to address _to\\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\\n\\n    /// @dev Allows _spender to withdraw from the msg.sender's account up to the _value amount\\n    function approve(address _spender, uint256 _value) public returns (bool success);\\n\\n    /// @dev Returns the amount which _spender is still allowed to withdraw from _owner\\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\\n\\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\\n\\n}\\n\",\"keccak256\":\"0xe58902b5bdf9f918c6ec8ee4da44bf87faf225098fae84671ab07b46af427338\"},\"giveth-common-contracts/contracts/Escapable.sol\":{\"content\":\"pragma solidity ^0.4.19;\\n/*\\n    Copyright 2016, Jordi Baylina\\n    Contributor: Adrià Massanet <adria@codecontext.io>\\n\\n    This program is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU General Public License as published by\\n    the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    This program is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU General Public License for more details.\\n\\n    You should have received a copy of the GNU General Public License\\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n*/\\n\\nimport \\\"./Owned.sol\\\";\\nimport \\\"./ERC20.sol\\\";\\n\\n\\n/// @dev `Escapable` is a base level contract built off of the `Owned`\\n///  contract; it creates an escape hatch function that can be called in an\\n///  emergency that will allow designated addresses to send any ether or tokens\\n///  held in the contract to an `escapeHatchDestination` as long as they were\\n///  not blacklisted\\ncontract Escapable is Owned {\\n    address public escapeHatchCaller;\\n    address public escapeHatchDestination;\\n    mapping (address=>bool) private escapeBlacklist; // Token contract addresses\\n\\n    /// @notice The Constructor assigns the `escapeHatchDestination` and the\\n    ///  `escapeHatchCaller`\\n    /// @param _escapeHatchCaller The address of a trusted account or contract\\n    ///  to call `escapeHatch()` to send the ether in this contract to the\\n    ///  `escapeHatchDestination` it would be ideal that `escapeHatchCaller`\\n    ///  cannot move funds out of `escapeHatchDestination`\\n    /// @param _escapeHatchDestination The address of a safe location (usu a\\n    ///  Multisig) to send the ether held in this contract; if a neutral address\\n    ///  is required, the WHG Multisig is an option:\\n    ///  0x8Ff920020c8AD673661c8117f2855C384758C572 \\n    function Escapable(address _escapeHatchCaller, address _escapeHatchDestination) public {\\n        escapeHatchCaller = _escapeHatchCaller;\\n        escapeHatchDestination = _escapeHatchDestination;\\n    }\\n\\n    /// @dev The addresses preassigned as `escapeHatchCaller` or `owner`\\n    ///  are the only addresses that can call a function with this modifier\\n    modifier onlyEscapeHatchCallerOrOwner {\\n        require ((msg.sender == escapeHatchCaller)||(msg.sender == owner));\\n        _;\\n    }\\n\\n    /// @notice Creates the blacklist of tokens that are not able to be taken\\n    ///  out of the contract; can only be done at the deployment, and the logic\\n    ///  to add to the blacklist will be in the constructor of a child contract\\n    /// @param _token the token contract address that is to be blacklisted \\n    function blacklistEscapeToken(address _token) internal {\\n        escapeBlacklist[_token] = true;\\n        EscapeHatchBlackistedToken(_token);\\n    }\\n\\n    /// @notice Checks to see if `_token` is in the blacklist of tokens\\n    /// @param _token the token address being queried\\n    /// @return False if `_token` is in the blacklist and can't be taken out of\\n    ///  the contract via the `escapeHatch()`\\n    function isTokenEscapable(address _token) view public returns (bool) {\\n        return !escapeBlacklist[_token];\\n    }\\n\\n    /// @notice The `escapeHatch()` should only be called as a last resort if a\\n    /// security issue is uncovered or something unexpected happened\\n    /// @param _token to transfer, use 0x0 for ether\\n    function escapeHatch(address _token) public onlyEscapeHatchCallerOrOwner {   \\n        require(escapeBlacklist[_token]==false);\\n\\n        uint256 balance;\\n\\n        /// @dev Logic for ether\\n        if (_token == 0x0) {\\n            balance = this.balance;\\n            escapeHatchDestination.transfer(balance);\\n            EscapeHatchCalled(_token, balance);\\n            return;\\n        }\\n        /// @dev Logic for tokens\\n        ERC20 token = ERC20(_token);\\n        balance = token.balanceOf(this);\\n        require(token.transfer(escapeHatchDestination, balance));\\n        EscapeHatchCalled(_token, balance);\\n    }\\n\\n    /// @notice Changes the address assigned to call `escapeHatch()`\\n    /// @param _newEscapeHatchCaller The address of a trusted account or\\n    ///  contract to call `escapeHatch()` to send the value in this contract to\\n    ///  the `escapeHatchDestination`; it would be ideal that `escapeHatchCaller`\\n    ///  cannot move funds out of `escapeHatchDestination`\\n    function changeHatchEscapeCaller(address _newEscapeHatchCaller) public onlyEscapeHatchCallerOrOwner {\\n        escapeHatchCaller = _newEscapeHatchCaller;\\n    }\\n\\n    event EscapeHatchBlackistedToken(address token);\\n    event EscapeHatchCalled(address token, uint amount);\\n}\\n\",\"keccak256\":\"0xd5d7b1a916841b21cfdee2bc9de4a178820421252b0c764070d78e846cd4511d\"},\"giveth-common-contracts/contracts/Owned.sol\":{\"content\":\"pragma solidity ^0.4.19;\\n\\n\\n/// @title Owned\\n/// @author Adrià Massanet <adria@codecontext.io>\\n/// @notice The Owned contract has an owner address, and provides basic \\n///  authorization control functions, this simplifies & the implementation of\\n///  user permissions; this contract has three work flows for a change in\\n///  ownership, the first requires the new owner to validate that they have the\\n///  ability to accept ownership, the second allows the ownership to be\\n///  directly transfered without requiring acceptance, and the third allows for\\n///  the ownership to be removed to allow for decentralization \\ncontract Owned {\\n\\n    address public owner;\\n    address public newOwnerCandidate;\\n\\n    event OwnershipRequested(address indexed by, address indexed to);\\n    event OwnershipTransferred(address indexed from, address indexed to);\\n    event OwnershipRemoved();\\n\\n    /// @dev The constructor sets the `msg.sender` as the`owner` of the contract\\n    function Owned() public {\\n        owner = msg.sender;\\n    }\\n\\n    /// @dev `owner` is the only address that can call a function with this\\n    /// modifier\\n    modifier onlyOwner() {\\n        require (msg.sender == owner);\\n        _;\\n    }\\n    \\n    /// @dev In this 1st option for ownership transfer `proposeOwnership()` must\\n    ///  be called first by the current `owner` then `acceptOwnership()` must be\\n    ///  called by the `newOwnerCandidate`\\n    /// @notice `onlyOwner` Proposes to transfer control of the contract to a\\n    ///  new owner\\n    /// @param _newOwnerCandidate The address being proposed as the new owner\\n    function proposeOwnership(address _newOwnerCandidate) public onlyOwner {\\n        newOwnerCandidate = _newOwnerCandidate;\\n        OwnershipRequested(msg.sender, newOwnerCandidate);\\n    }\\n\\n    /// @notice Can only be called by the `newOwnerCandidate`, accepts the\\n    ///  transfer of ownership\\n    function acceptOwnership() public {\\n        require(msg.sender == newOwnerCandidate);\\n\\n        address oldOwner = owner;\\n        owner = newOwnerCandidate;\\n        newOwnerCandidate = 0x0;\\n\\n        OwnershipTransferred(oldOwner, owner);\\n    }\\n\\n    /// @dev In this 2nd option for ownership transfer `changeOwnership()` can\\n    ///  be called and it will immediately assign ownership to the `newOwner`\\n    /// @notice `owner` can step down and assign some other address to this role\\n    /// @param _newOwner The address of the new owner\\n    function changeOwnership(address _newOwner) public onlyOwner {\\n        require(_newOwner != 0x0);\\n\\n        address oldOwner = owner;\\n        owner = _newOwner;\\n        newOwnerCandidate = 0x0;\\n\\n        OwnershipTransferred(oldOwner, owner);\\n    }\\n\\n    /// @dev In this 3rd option for ownership transfer `removeOwnership()` can\\n    ///  be called and it will immediately assign ownership to the 0x0 address;\\n    ///  it requires a 0xdece be input as a parameter to prevent accidental use\\n    /// @notice Decentralizes the contract, this operation cannot be undone \\n    /// @param _dac `0xdac` has to be entered for this function to work\\n    function removeOwnership(address _dac) public onlyOwner {\\n        require(_dac == 0xdac);\\n        owner = 0x0;\\n        newOwnerCandidate = 0x0;\\n        OwnershipRemoved();     \\n    }\\n} \\n\",\"keccak256\":\"0xc7d1401775fb1b41187de281757de68718fe27ba2660ba4bb194436aab7d0213\"}},\"version\":1}"
      }
    },
    "./contracts/IForeignGivethBridge.sol": {
      "IForeignGivethBridge": {
        "abi": [
          {
            "constant": false,
            "inputs": [
              {
                "name": "sender",
                "type": "address"
              },
              {
                "name": "mainToken",
                "type": "address"
              },
              {
                "name": "amount",
                "type": "uint256"
              },
              {
                "name": "homeTx",
                "type": "bytes32"
              },
              {
                "name": "data",
                "type": "bytes"
              }
            ],
            "name": "deposit",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "mainToken",
                "type": "address"
              },
              {
                "name": "tokenName",
                "type": "string"
              },
              {
                "name": "decimals",
                "type": "uint8"
              },
              {
                "name": "tokenSymbol",
                "type": "string"
              }
            ],
            "name": "addToken",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "recipient",
                "type": "address"
              },
              {
                "name": "sideToken",
                "type": "address"
              },
              {
                "name": "amount",
                "type": "uint256"
              }
            ],
            "name": "withdraw",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "sideToken",
                "type": "address"
              },
              {
                "name": "amount",
                "type": "uint256"
              }
            ],
            "name": "withdraw",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "name": "sender",
                "type": "address"
              },
              {
                "indexed": false,
                "name": "token",
                "type": "address"
              },
              {
                "indexed": false,
                "name": "amount",
                "type": "uint256"
              },
              {
                "indexed": false,
                "name": "homeTx",
                "type": "bytes32"
              },
              {
                "indexed": false,
                "name": "data",
                "type": "bytes"
              }
            ],
            "name": "Deposit",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "name": "recipient",
                "type": "address"
              },
              {
                "indexed": false,
                "name": "token",
                "type": "address"
              },
              {
                "indexed": false,
                "name": "amount",
                "type": "uint256"
              }
            ],
            "name": "Withdraw",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "name": "mainToken",
                "type": "address"
              },
              {
                "indexed": false,
                "name": "sideToken",
                "type": "address"
              }
            ],
            "name": "TokenAdded",
            "type": "event"
          }
        ],
        "evm": {
          "bytecode": {
            "linkReferences": {},
            "object": "",
            "sourceMap": ""
          },
          "deployedBytecode": {
            "linkReferences": {},
            "object": "",
            "sourceMap": ""
          },
          "methodIdentifiers": {
            "addToken(address,string,uint8,string)": "824f36f3",
            "deposit(address,address,uint256,bytes32,bytes)": "2b7c5dde",
            "withdraw(address,address,uint256)": "d9caed12",
            "withdraw(address,uint256)": "f3fef3a3"
          }
        },
        "metadata": ""
      }
    },
    "./contracts/lib/FailClosedVault.sol": {
      "FailClosedVault": {
        "abi": [
          {
            "constant": true,
            "inputs": [],
            "name": "maxSecurityGuardDelay",
            "outputs": [
              {
                "name": "",
                "type": "uint256"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [],
            "name": "checkIn",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_newTimeLock",
                "type": "uint256"
              }
            ],
            "name": "setTimelock",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "escapeHatchCaller",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_newOwner",
                "type": "address"
              }
            ],
            "name": "changeOwnership",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "securityGuardLastCheckin",
            "outputs": [
              {
                "name": "",
                "type": "uint256"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [],
            "name": "unpause",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_idPayment",
                "type": "uint256"
              }
            ],
            "name": "disburseAuthorizedPayment",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "paused",
            "outputs": [
              {
                "name": "",
                "type": "bool"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_dac",
                "type": "address"
              }
            ],
            "name": "removeOwnership",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "allowed",
                "type": "bool"
              }
            ],
            "name": "setAllowDisbursePaymentWhenPaused",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "numberOfAuthorizedPayments",
            "outputs": [
              {
                "name": "",
                "type": "uint256"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_newOwnerCandidate",
                "type": "address"
              }
            ],
            "name": "proposeOwnership",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_spender",
                "type": "address"
              },
              {
                "name": "_authorize",
                "type": "bool"
              }
            ],
            "name": "authorizeSpender",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [],
            "name": "acceptOwnership",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_idPayment",
                "type": "uint256"
              }
            ],
            "name": "cancelPayment",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [],
            "name": "pause",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_idPayment",
                "type": "uint256"
              },
              {
                "name": "_delay",
                "type": "uint256"
              }
            ],
            "name": "delayPayment",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "allowDisbursePaymentWhenPaused",
            "outputs": [
              {
                "name": "",
                "type": "bool"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_idPayments",
                "type": "uint256[]"
              }
            ],
            "name": "disburseAuthorizedPayments",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [
              {
                "name": "_token",
                "type": "address"
              }
            ],
            "name": "isTokenEscapable",
            "outputs": [
              {
                "name": "",
                "type": "bool"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "owner",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [
              {
                "name": "",
                "type": "uint256"
              }
            ],
            "name": "authorizedPayments",
            "outputs": [
              {
                "name": "name",
                "type": "string"
              },
              {
                "name": "reference",
                "type": "bytes32"
              },
              {
                "name": "spender",
                "type": "address"
              },
              {
                "name": "earliestPayTime",
                "type": "uint256"
              },
              {
                "name": "canceled",
                "type": "bool"
              },
              {
                "name": "paid",
                "type": "bool"
              },
              {
                "name": "recipient",
                "type": "address"
              },
              {
                "name": "token",
                "type": "address"
              },
              {
                "name": "amount",
                "type": "uint256"
              },
              {
                "name": "securityGuardDelay",
                "type": "uint256"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_token",
                "type": "address"
              }
            ],
            "name": "escapeHatch",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "securityGuard",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_newSecurityGuard",
                "type": "address"
              }
            ],
            "name": "setSecurityGuard",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "timeLock",
            "outputs": [
              {
                "name": "",
                "type": "uint256"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "newOwnerCandidate",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_newEscapeHatchCaller",
                "type": "address"
              }
            ],
            "name": "changeHatchEscapeCaller",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "name": "allowedSpenders",
            "outputs": [
              {
                "name": "",
                "type": "bool"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_maxSecurityGuardDelay",
                "type": "uint256"
              }
            ],
            "name": "setMaxSecurityGuardDelay",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "absoluteMinTimeLock",
            "outputs": [
              {
                "name": "",
                "type": "uint256"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_name",
                "type": "string"
              },
              {
                "name": "_reference",
                "type": "bytes32"
              },
              {
                "name": "_recipient",
                "type": "address"
              },
              {
                "name": "_token",
                "type": "address"
              },
              {
                "name": "_amount",
                "type": "uint256"
              },
              {
                "name": "_paymentDelay",
                "type": "uint256"
              }
            ],
            "name": "authorizePayment",
            "outputs": [
              {
                "name": "",
                "type": "uint256"
              }
            ],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "escapeHatchDestination",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "name": "_escapeHatchCaller",
                "type": "address"
              },
              {
                "name": "_escapeHatchDestination",
                "type": "address"
              },
              {
                "name": "_absoluteMinTimeLock",
                "type": "uint256"
              },
              {
                "name": "_timeLock",
                "type": "uint256"
              },
              {
                "name": "_securityGuard",
                "type": "address"
              },
              {
                "name": "_maxSecurityGuardDelay",
                "type": "uint256"
              }
            ],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "constructor"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "name": "idPayment",
                "type": "uint256"
              },
              {
                "indexed": true,
                "name": "recipient",
                "type": "address"
              },
              {
                "indexed": false,
                "name": "amount",
                "type": "uint256"
              },
              {
                "indexed": false,
                "name": "token",
                "type": "address"
              },
              {
                "indexed": false,
                "name": "reference",
                "type": "bytes32"
              }
            ],
            "name": "PaymentAuthorized",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "name": "idPayment",
                "type": "uint256"
              },
              {
                "indexed": true,
                "name": "recipient",
                "type": "address"
              },
              {
                "indexed": false,
                "name": "amount",
                "type": "uint256"
              },
              {
                "indexed": false,
                "name": "token",
                "type": "address"
              }
            ],
            "name": "PaymentExecuted",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "name": "idPayment",
                "type": "uint256"
              }
            ],
            "name": "PaymentCanceled",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "name": "spender",
                "type": "address"
              },
              {
                "indexed": false,
                "name": "authorized",
                "type": "bool"
              }
            ],
            "name": "SpenderAuthorization",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [],
            "name": "Pause",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [],
            "name": "Unpause",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": false,
                "name": "token",
                "type": "address"
              }
            ],
            "name": "EscapeHatchBlackistedToken",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": false,
                "name": "token",
                "type": "address"
              },
              {
                "indexed": false,
                "name": "amount",
                "type": "uint256"
              }
            ],
            "name": "EscapeHatchCalled",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "name": "by",
                "type": "address"
              },
              {
                "indexed": true,
                "name": "to",
                "type": "address"
              }
            ],
            "name": "OwnershipRequested",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "name": "from",
                "type": "address"
              },
              {
                "indexed": true,
                "name": "to",
                "type": "address"
              }
            ],
            "name": "OwnershipTransferred",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [],
            "name": "OwnershipRemoved",
            "type": "event"
          }
        ],
        "evm": {
          "bytecode": {
            "linkReferences": {},
            "object": "60606040526005805460ff19169055341561001957600080fd5b60405160c08061174383398101604052808051919060200180519190602001805191906020018051919060200180519190602001805160008054600160a060020a03338116600160a060020a031992831617909255600280549a83169a82169a909a1790995560038054988216988a1698909817909755600895909555505060099190915560078054939091169290931691909117909155600a55611680806100c36000396000f3006060604052600436106101925763ffffffff60e060020a6000350416630b2e74238114610197578063183ff085146101bc5780631e891c0a146101d15780631f6eb6e7146101e75780632af4c31e146102165780633f487b8b146102355780633f4ba83a14610248578063528924781461025b5780635c975abb14610271578063666a342714610298578063672f412c146102b757806368b8c5a1146102cf578063710bf322146102e2578063793c0fd41461030157806379ba5097146103255780638422927d146103385780638456cb591461034e578063846a5dde14610361578063859bcc711461037a578063863da0001461038d578063892db057146103dc5780638da5cb5b146103fb578063a0927a6a1461040e578063a142d608146104f2578063b2ca3ec414610511578063bb2a51d114610524578063d085835a14610543578063d091b55014610556578063d836fbe814610569578063d8528af014610588578063da4793ac146105a7578063ea8a66c7146105bd578063f37b74ca146105d0578063f5b612301461060a575b600080fd5b34156101a257600080fd5b6101aa61061d565b60405190815260200160405180910390f35b34156101c757600080fd5b6101cf610623565b005b34156101dc57600080fd5b6101cf60043561064b565b34156101f257600080fd5b6101fa61067a565b604051600160a060020a03909116815260200160405180910390f35b341561022157600080fd5b6101cf600160a060020a0360043516610689565b341561024057600080fd5b6101aa61071d565b341561025357600080fd5b6101cf610723565b341561026657600080fd5b6101cf600435610787565b341561027c57600080fd5b6102846107ff565b604051901515815260200160405180910390f35b34156102a357600080fd5b6101cf600160a060020a0360043516610808565b34156102c257600080fd5b6101cf6004351515610885565b34156102da57600080fd5b6101aa6108c4565b34156102ed57600080fd5b6101cf600160a060020a03600435166108cb565b341561030c57600080fd5b6101cf600160a060020a0360043516602435151561093c565b341561033057600080fd5b6101cf6109b6565b341561034357600080fd5b6101cf600435610a36565b341561035957600080fd5b6101cf610aea565b341561036c57600080fd5b6101cf600435602435610b29565b341561038557600080fd5b610284610bdf565b341561039857600080fd5b6101cf6004602481358181019083013580602081810201604051908101604052809392919081815260200183836020028082843750949650610be895505050505050565b34156103e757600080fd5b610284600160a060020a0360043516610c26565b341561040657600080fd5b6101fa610c45565b341561041957600080fd5b610424600435610c54565b604051602081018a9052600160a060020a03808a16604083015260608201899052871515608083015286151560a083015285811660c0830152841660e082015261010081018390526101208101829052610140808252819081018c818151815260200191508051906020019080838360005b838110156104ae578082015183820152602001610496565b50505050905090810190601f1680156104db5780820380516001836020036101000a031916815260200191505b509b50505050505050505050505060405180910390f35b34156104fd57600080fd5b6101cf600160a060020a0360043516610d68565b341561051c57600080fd5b6101fa610f89565b341561052f57600080fd5b6101cf600160a060020a0360043516610f98565b341561054e57600080fd5b6101aa610fd5565b341561056157600080fd5b6101fa610fdb565b341561057457600080fd5b6101cf600160a060020a0360043516610fea565b341561059357600080fd5b610284600160a060020a0360043516611042565b34156105b257600080fd5b6101cf600435611057565b34156105c857600080fd5b6101aa611077565b34156105db57600080fd5b6101aa602460048035828101929101359035600160a060020a036044358116906064351660843560a43561107d565b341561061557600080fd5b6101fa61122f565b600a5481565b60075433600160a060020a0390811691161461063e57600080fd5b61064661123e565b600d55565b60005433600160a060020a0390811691161461066657600080fd5b60085481101561067557600080fd5b600955565b600254600160a060020a031681565b6000805433600160a060020a039081169116146106a557600080fd5b600160a060020a03821615156106ba57600080fd5b5060008054600160a060020a03838116600160a060020a031980841691909117938490556001805490911690559081169116817f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600d5481565b60005433600160a060020a0390811691161461073e57600080fd5b60055460ff16151561074f57600080fd5b6005805460ff191690557f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3360405160405180910390a1565b60055460009060ff16158061079e5750600b5460ff165b15156107a957600080fd5b60065482106107b757600080fd5b60068054839081106107c557fe5b9060005260206000209060080201905060095481600301540361070801600d54101515156107f257600080fd5b6107fb82611242565b5050565b60055460ff1681565b60005433600160a060020a0390811691161461082357600080fd5b610dac600160a060020a0382161461083a57600080fd5b60008054600160a060020a03199081169091556001805490911690557f94e8b32e01b9eedfddd778ffbd051a7718cdc14781702884561162dca6f74dbb60405160405180910390a150565b60005433600160a060020a039081169116146108a057600080fd5b60055460ff1615156108b157600080fd5b600b805460ff1916911515919091179055565b6006545b90565b60005433600160a060020a039081169116146108e657600080fd5b60018054600160a060020a031916600160a060020a0383811691909117918290559081169033167f13a4b3bc0d5234dd3d87c9f1557d8faefa37986da62c36ba49309e2fb2c9aec460405160405180910390a350565b60005433600160a060020a0390811691161461095757600080fd5b600160a060020a0382166000818152600c602052604090819020805460ff19168415151790557f801f568efbc3346a6ae3d0c3eb335a30d64e0d3cf08f1c39626d62cd5c82728190839051901515815260200160405180910390a25050565b60015460009033600160a060020a039081169116146109d457600080fd5b506000805460018054600160a060020a0319808416600160a060020a03838116919091179586905591169091559081169116817f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a350565b6000805433600160a060020a03908116911614610a5257600080fd5b6006548210610a6057600080fd5b6006805483908110610a6e57fe5b60009182526020909120600890910201600481015490915060ff1615610a9357600080fd5b6004810154610100900460ff1615610aaa57600080fd5b60048101805460ff19166001179055817ffdf197ed54809861dafe0b4d391843652730ac67274c1e9e46db7687dccaa30160405160405180910390a25050565b60005433600160a060020a03908116911614610b0557600080fd5b60055460ff1615610b1557600080fd5b600b805460ff19169055610b27611463565b565b60075460009033600160a060020a03908116911614610b4757600080fd5b6006548310610b5557600080fd5b670de0b6b3a7640000821115610b6a57600080fd5b6006805484908110610b7857fe5b90600052602060002090600802019050600a548282600701540111151515610b9f57600080fd5b6004810154610100900460ff1615610bb657600080fd5b600481015460ff1615610bc857600080fd5b600781018054830190556003018054909101905550565b600b5460ff1681565b6000805b8251821015610c2157828281518110610c0157fe5b906020019060200201519050610c1681610787565b600190910190610bec565b505050565b600160a060020a031660009081526004602052604090205460ff161590565b600054600160a060020a031681565b6006805482908110610c6257fe5b9060005260206000209060080201600091509050806000018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610d0e5780601f10610ce357610100808354040283529160200191610d0e565b820191906000526020600020905b815481529060010190602001808311610cf157829003601f168201915b5050505060018301546002840154600385015460048601546005870154600688015460079098015496979496600160a060020a039485169650929460ff80841695610100850490911694620100009094048116939216918a565b600254600090819033600160a060020a0390811691161480610d98575060005433600160a060020a039081169116145b1515610da357600080fd5b600160a060020a03831660009081526004602052604090205460ff1615610dc957600080fd5b600160a060020a0383161515610e5b57600354600160a060020a033081163193501682156108fc0283604051600060405180830381858888f193505050501515610e1257600080fd5b7fa50dde912fa22ea0d215a0236093ac45b4d55d6ef0c604c319f900029c5d10f28383604051600160a060020a03909216825260208201526040908101905180910390a1610c21565b5081600160a060020a0381166370a082313060405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b1515610eab57600080fd5b5af11515610eb857600080fd5b5050506040518051600354909350600160a060020a03808416925063a9059cbb91168460405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b1515610f1e57600080fd5b5af11515610f2b57600080fd5b505050604051805190501515610f4057600080fd5b7fa50dde912fa22ea0d215a0236093ac45b4d55d6ef0c604c319f900029c5d10f28383604051600160a060020a03909216825260208201526040908101905180910390a1505050565b600754600160a060020a031681565b60005433600160a060020a03908116911614610fb357600080fd5b60078054600160a060020a031916600160a060020a0392909216919091179055565b60095481565b600154600160a060020a031681565b60025433600160a060020a0390811691161480611015575060005433600160a060020a039081169116145b151561102057600080fd5b60028054600160a060020a031916600160a060020a0392909216919091179055565b600c6020526000908152604090205460ff1681565b60005433600160a060020a0390811691161461107257600080fd5b600a55565b60085481565b6005546000908190819060ff161561109457600080fd5b600160a060020a0333166000908152600c602052604090205460ff1615156110bb57600080fd5b60068054925082906110d090600183016114c9565b5060068054839081106110df57fe5b60009182526020909120600890910201600281018054600160a060020a03191633600160a060020a03161790559050670de0b6b3a764000084111561112357600080fd5b60095484101561113e5760095461113861123e565b01611149565b8361114761123e565b015b600382015560048101805475ffffffffffffffffffffffffffffffffffffffff0000191662010000600160a060020a038a160217905560068101859055611191818b8b6114f5565b5060018101889055600581018054600160a060020a031916600160a060020a038881169190911791829055600483015460068401546201000090910482169285927fd11935115aa93b9f1f616d0d7702f4593572daa610390123241b3785430281c49291168c604051928352600160a060020a0390911660208301526040808301919091526060909101905180910390a35098975050505050505050565b600354600160a060020a031681565b4290565b60055460009060ff1615806112595750600b5460ff165b151561126457600080fd5b600654821061127257600080fd5b600680548390811061128057fe5b60009182526020808320600260089093020191820154600160a060020a03168352600c905260409091205490915060ff1615156112bc57600080fd5b80600301546112c961123e565b10156112d457600080fd5b600481015460ff16156112e657600080fd5b6004810154610100900460ff16156112fd57600080fd5b60048101805461ff0019166101001790556005810154600160a060020a03161515611369576004810154600682015462010000909104600160a060020a0316906108fc81150290604051600060405180830381858888f19350505050151561136457600080fd5b6113f7565b600581015460048201546006830154600160a060020a039283169263a9059cbb92620100009004169060405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b15156113d557600080fd5b5af115156113e257600080fd5b5050506040518051905015156113f757600080fd5b600481015460068201546005830154600160a060020a036201000090930483169285927f354f3c0c8efabe1a1a07cf222842b008ef284ac185e63bdf8245be8cd2d97f5192909116604051918252600160a060020a031660208201526040908101905180910390a35050565b60005433600160a060020a0390811691161461147e57600080fd5b60055460ff161561148e57600080fd5b6005805460ff191660011790557f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62560405160405180910390a1565b815481835581811511610c2157600802816008028360005260206000209182019101610c219190611573565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106115365782800160ff19823516178555611563565b82800160010185558215611563579182015b82811115611563578235825591602001919060010190611548565b5061156f9291506115f3565b5090565b6108c891905b8082111561156f57600061158d828261160d565b50600060018201819055600282018054600160a060020a03199081169091556003830182905560048301805475ffffffffffffffffffffffffffffffffffffffffffff191690556005830180549091169055600682018190556007820155600801611579565b6108c891905b8082111561156f57600081556001016115f9565b50805460018160011615610100020316600290046000825580601f106116335750611651565b601f01602090049060005260206000209081019061165191906115f3565b505600a165627a7a7230582013b1a68fd283c4ba57931e4b04655b97dff647a2e8cbea1d9ac386658678d55e0029",
            "sourceMap": "881:2782:4:-;;;268:26:5;;;-1:-1:-1;;268:26:5;;;1418:429:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;993:5:9;:18;;-1:-1:-1;;;;;1001:10:9;993:18;;-1:-1:-1;;;;;;993:18:9;;;;;;;2101:17:8;:38;;;;;;;;;;;;;;;2149:22;:48;;;;;;;;;;;;;;;5231:19:6;:42;;;;-1:-1:-1;;5283:8:6;:20;;;;5313:13;:30;;;;;;;;;;;;;;;;;5353:21;:46;881:2782:4;;;;;;"
          },
          "deployedBytecode": {
            "linkReferences": {},
            "object": "6060604052600436106101925763ffffffff60e060020a6000350416630b2e74238114610197578063183ff085146101bc5780631e891c0a146101d15780631f6eb6e7146101e75780632af4c31e146102165780633f487b8b146102355780633f4ba83a14610248578063528924781461025b5780635c975abb14610271578063666a342714610298578063672f412c146102b757806368b8c5a1146102cf578063710bf322146102e2578063793c0fd41461030157806379ba5097146103255780638422927d146103385780638456cb591461034e578063846a5dde14610361578063859bcc711461037a578063863da0001461038d578063892db057146103dc5780638da5cb5b146103fb578063a0927a6a1461040e578063a142d608146104f2578063b2ca3ec414610511578063bb2a51d114610524578063d085835a14610543578063d091b55014610556578063d836fbe814610569578063d8528af014610588578063da4793ac146105a7578063ea8a66c7146105bd578063f37b74ca146105d0578063f5b612301461060a575b600080fd5b34156101a257600080fd5b6101aa61061d565b60405190815260200160405180910390f35b34156101c757600080fd5b6101cf610623565b005b34156101dc57600080fd5b6101cf60043561064b565b34156101f257600080fd5b6101fa61067a565b604051600160a060020a03909116815260200160405180910390f35b341561022157600080fd5b6101cf600160a060020a0360043516610689565b341561024057600080fd5b6101aa61071d565b341561025357600080fd5b6101cf610723565b341561026657600080fd5b6101cf600435610787565b341561027c57600080fd5b6102846107ff565b604051901515815260200160405180910390f35b34156102a357600080fd5b6101cf600160a060020a0360043516610808565b34156102c257600080fd5b6101cf6004351515610885565b34156102da57600080fd5b6101aa6108c4565b34156102ed57600080fd5b6101cf600160a060020a03600435166108cb565b341561030c57600080fd5b6101cf600160a060020a0360043516602435151561093c565b341561033057600080fd5b6101cf6109b6565b341561034357600080fd5b6101cf600435610a36565b341561035957600080fd5b6101cf610aea565b341561036c57600080fd5b6101cf600435602435610b29565b341561038557600080fd5b610284610bdf565b341561039857600080fd5b6101cf6004602481358181019083013580602081810201604051908101604052809392919081815260200183836020028082843750949650610be895505050505050565b34156103e757600080fd5b610284600160a060020a0360043516610c26565b341561040657600080fd5b6101fa610c45565b341561041957600080fd5b610424600435610c54565b604051602081018a9052600160a060020a03808a16604083015260608201899052871515608083015286151560a083015285811660c0830152841660e082015261010081018390526101208101829052610140808252819081018c818151815260200191508051906020019080838360005b838110156104ae578082015183820152602001610496565b50505050905090810190601f1680156104db5780820380516001836020036101000a031916815260200191505b509b50505050505050505050505060405180910390f35b34156104fd57600080fd5b6101cf600160a060020a0360043516610d68565b341561051c57600080fd5b6101fa610f89565b341561052f57600080fd5b6101cf600160a060020a0360043516610f98565b341561054e57600080fd5b6101aa610fd5565b341561056157600080fd5b6101fa610fdb565b341561057457600080fd5b6101cf600160a060020a0360043516610fea565b341561059357600080fd5b610284600160a060020a0360043516611042565b34156105b257600080fd5b6101cf600435611057565b34156105c857600080fd5b6101aa611077565b34156105db57600080fd5b6101aa602460048035828101929101359035600160a060020a036044358116906064351660843560a43561107d565b341561061557600080fd5b6101fa61122f565b600a5481565b60075433600160a060020a0390811691161461063e57600080fd5b61064661123e565b600d55565b60005433600160a060020a0390811691161461066657600080fd5b60085481101561067557600080fd5b600955565b600254600160a060020a031681565b6000805433600160a060020a039081169116146106a557600080fd5b600160a060020a03821615156106ba57600080fd5b5060008054600160a060020a03838116600160a060020a031980841691909117938490556001805490911690559081169116817f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600d5481565b60005433600160a060020a0390811691161461073e57600080fd5b60055460ff16151561074f57600080fd5b6005805460ff191690557f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3360405160405180910390a1565b60055460009060ff16158061079e5750600b5460ff165b15156107a957600080fd5b60065482106107b757600080fd5b60068054839081106107c557fe5b9060005260206000209060080201905060095481600301540361070801600d54101515156107f257600080fd5b6107fb82611242565b5050565b60055460ff1681565b60005433600160a060020a0390811691161461082357600080fd5b610dac600160a060020a0382161461083a57600080fd5b60008054600160a060020a03199081169091556001805490911690557f94e8b32e01b9eedfddd778ffbd051a7718cdc14781702884561162dca6f74dbb60405160405180910390a150565b60005433600160a060020a039081169116146108a057600080fd5b60055460ff1615156108b157600080fd5b600b805460ff1916911515919091179055565b6006545b90565b60005433600160a060020a039081169116146108e657600080fd5b60018054600160a060020a031916600160a060020a0383811691909117918290559081169033167f13a4b3bc0d5234dd3d87c9f1557d8faefa37986da62c36ba49309e2fb2c9aec460405160405180910390a350565b60005433600160a060020a0390811691161461095757600080fd5b600160a060020a0382166000818152600c602052604090819020805460ff19168415151790557f801f568efbc3346a6ae3d0c3eb335a30d64e0d3cf08f1c39626d62cd5c82728190839051901515815260200160405180910390a25050565b60015460009033600160a060020a039081169116146109d457600080fd5b506000805460018054600160a060020a0319808416600160a060020a03838116919091179586905591169091559081169116817f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a350565b6000805433600160a060020a03908116911614610a5257600080fd5b6006548210610a6057600080fd5b6006805483908110610a6e57fe5b60009182526020909120600890910201600481015490915060ff1615610a9357600080fd5b6004810154610100900460ff1615610aaa57600080fd5b60048101805460ff19166001179055817ffdf197ed54809861dafe0b4d391843652730ac67274c1e9e46db7687dccaa30160405160405180910390a25050565b60005433600160a060020a03908116911614610b0557600080fd5b60055460ff1615610b1557600080fd5b600b805460ff19169055610b27611463565b565b60075460009033600160a060020a03908116911614610b4757600080fd5b6006548310610b5557600080fd5b670de0b6b3a7640000821115610b6a57600080fd5b6006805484908110610b7857fe5b90600052602060002090600802019050600a548282600701540111151515610b9f57600080fd5b6004810154610100900460ff1615610bb657600080fd5b600481015460ff1615610bc857600080fd5b600781018054830190556003018054909101905550565b600b5460ff1681565b6000805b8251821015610c2157828281518110610c0157fe5b906020019060200201519050610c1681610787565b600190910190610bec565b505050565b600160a060020a031660009081526004602052604090205460ff161590565b600054600160a060020a031681565b6006805482908110610c6257fe5b9060005260206000209060080201600091509050806000018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610d0e5780601f10610ce357610100808354040283529160200191610d0e565b820191906000526020600020905b815481529060010190602001808311610cf157829003601f168201915b5050505060018301546002840154600385015460048601546005870154600688015460079098015496979496600160a060020a039485169650929460ff80841695610100850490911694620100009094048116939216918a565b600254600090819033600160a060020a0390811691161480610d98575060005433600160a060020a039081169116145b1515610da357600080fd5b600160a060020a03831660009081526004602052604090205460ff1615610dc957600080fd5b600160a060020a0383161515610e5b57600354600160a060020a033081163193501682156108fc0283604051600060405180830381858888f193505050501515610e1257600080fd5b7fa50dde912fa22ea0d215a0236093ac45b4d55d6ef0c604c319f900029c5d10f28383604051600160a060020a03909216825260208201526040908101905180910390a1610c21565b5081600160a060020a0381166370a082313060405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b1515610eab57600080fd5b5af11515610eb857600080fd5b5050506040518051600354909350600160a060020a03808416925063a9059cbb91168460405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b1515610f1e57600080fd5b5af11515610f2b57600080fd5b505050604051805190501515610f4057600080fd5b7fa50dde912fa22ea0d215a0236093ac45b4d55d6ef0c604c319f900029c5d10f28383604051600160a060020a03909216825260208201526040908101905180910390a1505050565b600754600160a060020a031681565b60005433600160a060020a03908116911614610fb357600080fd5b60078054600160a060020a031916600160a060020a0392909216919091179055565b60095481565b600154600160a060020a031681565b60025433600160a060020a0390811691161480611015575060005433600160a060020a039081169116145b151561102057600080fd5b60028054600160a060020a031916600160a060020a0392909216919091179055565b600c6020526000908152604090205460ff1681565b60005433600160a060020a0390811691161461107257600080fd5b600a55565b60085481565b6005546000908190819060ff161561109457600080fd5b600160a060020a0333166000908152600c602052604090205460ff1615156110bb57600080fd5b60068054925082906110d090600183016114c9565b5060068054839081106110df57fe5b60009182526020909120600890910201600281018054600160a060020a03191633600160a060020a03161790559050670de0b6b3a764000084111561112357600080fd5b60095484101561113e5760095461113861123e565b01611149565b8361114761123e565b015b600382015560048101805475ffffffffffffffffffffffffffffffffffffffff0000191662010000600160a060020a038a160217905560068101859055611191818b8b6114f5565b5060018101889055600581018054600160a060020a031916600160a060020a038881169190911791829055600483015460068401546201000090910482169285927fd11935115aa93b9f1f616d0d7702f4593572daa610390123241b3785430281c49291168c604051928352600160a060020a0390911660208301526040808301919091526060909101905180910390a35098975050505050505050565b600354600160a060020a031681565b4290565b60055460009060ff1615806112595750600b5460ff165b151561126457600080fd5b600654821061127257600080fd5b600680548390811061128057fe5b60009182526020808320600260089093020191820154600160a060020a03168352600c905260409091205490915060ff1615156112bc57600080fd5b80600301546112c961123e565b10156112d457600080fd5b600481015460ff16156112e657600080fd5b6004810154610100900460ff16156112fd57600080fd5b60048101805461ff0019166101001790556005810154600160a060020a03161515611369576004810154600682015462010000909104600160a060020a0316906108fc81150290604051600060405180830381858888f19350505050151561136457600080fd5b6113f7565b600581015460048201546006830154600160a060020a039283169263a9059cbb92620100009004169060405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b15156113d557600080fd5b5af115156113e257600080fd5b5050506040518051905015156113f757600080fd5b600481015460068201546005830154600160a060020a036201000090930483169285927f354f3c0c8efabe1a1a07cf222842b008ef284ac185e63bdf8245be8cd2d97f5192909116604051918252600160a060020a031660208201526040908101905180910390a35050565b60005433600160a060020a0390811691161461147e57600080fd5b60055460ff161561148e57600080fd5b6005805460ff191660011790557f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62560405160405180910390a1565b815481835581811511610c2157600802816008028360005260206000209182019101610c219190611573565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106115365782800160ff19823516178555611563565b82800160010185558215611563579182015b82811115611563578235825591602001919060010190611548565b5061156f9291506115f3565b5090565b6108c891905b8082111561156f57600061158d828261160d565b50600060018201819055600282018054600160a060020a03199081169091556003830182905560048301805475ffffffffffffffffffffffffffffffffffffffffffff191690556005830180549091169055600682018190556007820155600801611579565b6108c891905b8082111561156f57600081556001016115f9565b50805460018160011615610100020316600290046000825580601f106116335750611651565b601f01602090049060005260206000209081019061165191906115f3565b505600a165627a7a7230582013b1a68fd283c4ba57931e4b04655b97dff647a2e8cbea1d9ac386658678d55e0029",
            "sourceMap": "881:2782:4:-;;;;;;;;;-1:-1:-1;;;881:2782:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2486:33:6;;;;;;;;;;;;;;;;;;;;;;;;;;;3561:100:4;;;;;;;;;;;;;;10982:153:6;;;;;;;;;;;;;;1181:32:8;;;;;;;;;;;;;;;-1:-1:-1;;;;;1181:32:8;;;;;;;;;;;;;;2422:246:9;;;;;;;;;;-1:-1:-1;;;;;2422:246:9;;;;;921:36:4;;;;;;;;;;;;912:102:5;;;;;;;;;;;;2068:848:4;;;;;;;;;;;;;;268:26:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3062:182:9;;;;;;;;;;-1:-1:-1;;;;;3062:182:9;;;;;12212:142:6;;;;;;;;;;;;;;;;5615:114;;;;;;;;;;;;1585:185:9;;;;;;;;;;-1:-1:-1;;;;;1585:185:9;;;;;10267:192:6;;;;;;;;;;-1:-1:-1;;;;;10267:192:6;;;;;;;;;1882:242:9;;;;;;;;;;;;9710:311:6;;;;;;;;;;;;;;11688:126;;;;;;;;;;;;9076:473;;;;;;;;;;;;;;;;2525:42;;;;;;;;;;;;8585:233;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;8585:233:6;;-1:-1:-1;8585:233:6;;-1:-1:-1;;;;;;8585:233:6;3215:117:8;;;;;;;;;;-1:-1:-1;;;;;3215:117:8;;;;;638:20:9;;;;;;;;;;;;2347:35:6;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2347:35:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;2347:35:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3540:611:8;;;;;;;;;;-1:-1:-1;;;;;3540:611:8;;;;;2389:28:6;;;;;;;;;;;;10596:122;;;;;;;;;;-1:-1:-1;;;;;10596:122:6;;;;;2460:20;;;;;;;;;;;;664:32:9;;;;;;;;;;;;4520:158:8;;;;;;;;;;-1:-1:-1;;;;;4520:158:8;;;;;2687:48:6;;;;;;;;;;-1:-1:-1;;;;;2687:48:6;;;;;11395:145;;;;;;;;;;;;;;2423:31;;;;;;;;;;;;6304:1195;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;6304:1195:6;;;;;;;;;;;;;;1219:37:8;;;;;;;;;;;;2486:33:6;;;;:::o;3561:100:4:-;3378:13:6;;3364:10;-1:-1:-1;;;;;3364:27:6;;;3378:13;;3364:27;3356:36;;;;;;3644:10:4;:8;:10::i;:::-;3617:24;:37;3561:100::o;10982:153:6:-;1171:5:9;;1157:10;-1:-1:-1;;;;;1157:19:9;;;1171:5;;1157:19;1148:29;;;;;;11075:19:6;;11059:35;;;11051:44;;;;;;11105:8;:23;10982:153::o;1181:32:8:-;;;-1:-1:-1;;;;;1181:32:8;;:::o;2422:246:9:-;2529:16;1171:5;;1157:10;-1:-1:-1;;;;;1157:19:9;;;1171:5;;1157:19;1148:29;;;;;;-1:-1:-1;;;;;2501:16:9;;;;2493:25;;;;;;-1:-1:-1;2548:5:9;;;-1:-1:-1;;;;;2563:17:9;;;-1:-1:-1;;;;;;2563:17:9;;;;;;;;;;;2548:5;2590:23;;;;;;;2548:5;;;;2655;2548;2624:37;;;;;;;;;;2422:246;;:::o;921:36:4:-;;;;:::o;912:102:5:-;1171:5:9;;1157:10;-1:-1:-1;;;;;1157:19:9;;;1171:5;;1157:19;1148:29;;;;;;614:6:5;;;;606:15;;;;;;;;969:6;:14;;-1:-1:-1;;969:14:5;;;998:9;;;;;;;;;;912:102::o;2068:848:4:-;3669:6:6;;2293:17:4;;3669:6:6;;3668:7;;:41;;-1:-1:-1;3679:30:6;;;;3668:41;3660:50;;;;;;;;2256:18:4;:25;2243:38;;2235:47;;;;;;2313:18;:30;;2332:10;;2313:30;;;;;;;;;;;;;;;;2293:50;;2833:8;;2813:1;:17;;;:28;2844:10;2813:41;2785:24;;:69;;2777:78;;;;;;;;2866:43;2898:10;2866:31;:43::i;:::-;2068:848;;:::o;268:26:5:-;;;;;;:::o;3062:182:9:-;1171:5;;1157:10;-1:-1:-1;;;;;1157:19:9;;;1171:5;;1157:19;1148:29;;;;;;3144:5;-1:-1:-1;;;;;3136:13:9;;;3128:22;;;;;;3168:3;3160:11;;-1:-1:-1;;;;;;3160:11:9;;;;;;;3181:23;;;;;;;3214:18;;;;;;;;;;3062:182;:::o;12212:142:6:-;1171:5:9;;1157:10;-1:-1:-1;;;;;1157:19:9;;;1171:5;;1157:19;1148:29;;;;;;614:6:5;;;;606:15;;;;;;;;12307:30:6;:40;;-1:-1:-1;;12307:40:6;;;;;;;;;;12212:142::o;5615:114::-;5697:18;:25;5615:114;;:::o;1585:185:9:-;1171:5;;1157:10;-1:-1:-1;;;;;1157:19:9;;;1171:5;;1157:19;1148:29;;;;;;1666:17;:38;;-1:-1:-1;;;;;;1666:38:9;-1:-1:-1;;;;;1666:38:9;;;;;;;;;;;1745:17;;;;1733:10;1714:49;;;;;;;;;;;1585:185;:::o;10267:192:6:-;1171:5:9;;1157:10;-1:-1:-1;;;;;1157:19:9;;;1171:5;;1157:19;1148:29;;;;;;-1:-1:-1;;;;;10357:25:6;;;;;;:15;:25;;;;;;;:38;;-1:-1:-1;;10357:38:6;;;;;;;10410:42;;10357:38;;10410:42;;;;;;;;;;;;;;;10267:192;;:::o;1882:242:9:-;1948:17;;1977:16;;1934:10;-1:-1:-1;;;;;1934:31:9;;;1948:17;;1934:31;1926:40;;;;;;-1:-1:-1;1996:5:9;;;;2019:17;;-1:-1:-1;;;;;;2011:25:9;;;-1:-1:-1;;;;;2019:17:9;;;2011:25;;;;;;;;2046:23;;;;;1996:5;;;;2111;1996;2080:37;;;;;;;;;;1882:242;:::o;9710:311:6:-;9837:17;1171:5:9;;1157:10;-1:-1:-1;;;;;1157:19:9;;;1171:5;;1157:19;1148:29;;;;;;9800:18:6;:25;9787:38;;9779:47;;;;;;9857:18;:30;;9876:10;;9857:30;;;;;;;;;;;;;;;;;;;9907:10;;;;9857:30;;-1:-1:-1;9907:10:6;;9906:11;9898:20;;;;;;9937:6;;;;;;;;;9936:7;9928:16;;;;;;9955:10;;;:17;;-1:-1:-1;;9955:17:6;9968:4;9955:17;;;10003:10;9987:27;;;;;;;;;;9710:311;;:::o;11688:126::-;1171:5:9;;1157:10;-1:-1:-1;;;;;1157:19:9;;;1171:5;;1157:19;1148:29;;;;;;446:6:5;;;;445:7;437:16;;;;;;11746:30:6;:38;;-1:-1:-1;;11746:38:6;;;11794:13;:11;:13::i;:::-;11688:126::o;9076:473::-;3378:13;;9284:17;;3364:10;-1:-1:-1;;;;;3364:27:6;;;3378:13;;3364:27;3356:36;;;;;;9186:18;:25;9173:38;;9165:47;;;;;;9266:6;9256:16;;;9248:25;;;;;;9304:18;:30;;9323:10;;9304:30;;;;;;;;;;;;;;;;9284:50;;9386:21;;9376:6;9353:1;:20;;;:29;:54;;9345:63;;;;;;;;9427:6;;;;;;;;;9426:7;9418:16;;;;;;9453:10;;;;;;9452:11;9444:20;;;;;;9475;;;:30;;;;;;9515:17;;:27;;;;;;;-1:-1:-1;9076:473:6:o;2525:42::-;;;;;;:::o;8585:233::-;8663:6;;8658:154;8679:11;:18;8675:1;:22;8658:154;;;8736:11;8748:1;8736:14;;;;;;;;;;;;;;;;8718:32;;8764:37;8790:10;8764:25;:37::i;:::-;8699:3;;;;;8658:154;;;8585:233;;;:::o;3215:117:8:-;-1:-1:-1;;;;;3302:23:8;3278:4;3302:23;;;:15;:23;;;;;;;;3301:24;;3215:117::o;638:20:9:-;;;-1:-1:-1;;;;;638:20:9;;:::o;2347:35:6:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;2347:35:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2347:35:6;;;;-1:-1:-1;2347:35:6;;;;;;;;;;;;;;;;;;;;;;;;;:::o;3540:611:8:-;2431:17;;3676:15;;;;2417:10;-1:-1:-1;;;;;2417:31:8;;;2431:17;;2417:31;;2416:56;;-1:-1:-1;2466:5:8;;2452:10;-1:-1:-1;;;;;2452:19:8;;;2466:5;;2452:19;2416:56;2407:66;;;;;;;;-1:-1:-1;;;;;3634:23:8;;;;;;:15;:23;;;;;;;;:30;3626:39;;;;;;-1:-1:-1;;;;;3739:13:8;;;3735:188;;;3804:22;;-1:-1:-1;;;;;3778:4:8;:12;;;;-1:-1:-1;3804:22:8;:40;;;;3778:12;3804:40;;;;;;;;;;;;;;;;;;;;;;;;;;3858:34;3876:6;3884:7;3858:34;;-1:-1:-1;;;;;3858:34:8;;;;;;;;;;;;;;;;;;;;3906:7;;3735:188;-1:-1:-1;3986:6:8;-1:-1:-1;;;;;4013:15:8;;;4029:4;4013:21;;-1:-1:-1;;;4013:21:8;;;;;;-1:-1:-1;;;;;4013:21:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4067:22;;4013:21;;-1:-1:-1;;;;;;4052:14:8;;;;-1:-1:-1;4052:14:8;;4067:22;4013:21;4052:47;;-1:-1:-1;;;4052:47:8;;;;;;-1:-1:-1;;;;;4052:47:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4044:56;;;;;;;;4110:34;4128:6;4136:7;4110:34;;-1:-1:-1;;;;;4110:34:8;;;;;;;;;;;;;;;;;;;;3540:611;;;:::o;2389:28:6:-;;;-1:-1:-1;;;;;2389:28:6;;:::o;10596:122::-;1171:5:9;;1157:10;-1:-1:-1;;;;;1157:19:9;;;1171:5;;1157:19;1148:29;;;;;;10678:13:6;:33;;-1:-1:-1;;;;;;10678:33:6;-1:-1:-1;;;;;10678:33:6;;;;;;;;;;10596:122::o;2460:20::-;;;;:::o;664:32:9:-;;;-1:-1:-1;;;;;664:32:9;;:::o;4520:158:8:-;2431:17;;2417:10;-1:-1:-1;;;;;2417:31:8;;;2431:17;;2417:31;;2416:56;;-1:-1:-1;2466:5:8;;2452:10;-1:-1:-1;;;;;2452:19:8;;;2466:5;;2452:19;2416:56;2407:66;;;;;;;;4630:17;:41;;-1:-1:-1;;;;;;4630:41:8;-1:-1:-1;;;;;4630:41:8;;;;;;;;;;4520:158::o;2687:48:6:-;;;;;;;;;;;;;;;:::o;11395:145::-;1171:5:9;;1157:10;-1:-1:-1;;;;;1157:19:9;;;1171:5;;1157:19;1148:29;;;;;;11487:21:6;:46;11395:145::o;2423:31::-;;;;:::o;6304:1195::-;446:6:5;;6519:4:6;;;;;;446:6:5;;445:7;437:16;;;;;;-1:-1:-1;;;;;6625:10:6;6609:27;;;;;:15;:27;;;;;;;;6601:36;;;;;;;;6664:18;:25;;;-1:-1:-1;6664:25:6;;6726:27;;;;;;:::i;:::-;-1:-1:-1;6843:18:6;:29;;6862:9;;6843:29;;;;;;;;;;;;;;;;;;;6882:9;;;:22;;-1:-1:-1;;;;;;6882:22:6;6894:10;-1:-1:-1;;;;;6882:22:6;;;;6843:29;-1:-1:-1;6971:6:6;6954:23;;;6946:32;;;;;;7107:8;;7090:13;:25;;:142;;7224:8;;7211:10;:8;:10::i;:::-;:21;7090:142;;;7163:13;7150:10;:8;:10::i;:::-;:26;7090:142;7070:17;;;:162;7242:11;;;:24;;-1:-1:-1;;7242:24:6;;-1:-1:-1;;;;;7242:24:6;;;;;;7276:8;;;:18;;;7304:14;7070:17;7313:5;;7304:14;:::i;:::-;-1:-1:-1;7328:11:6;;;:24;;;7362:7;;;:16;;-1:-1:-1;;;;;;7362:16:6;-1:-1:-1;;;;;7362:16:6;;;;;;;;;;;7422:11;;;;7435:8;;;;7422:11;;;;;;;7411:9;;7393:73;;7435:8;7445:7;7328:24;7393:73;;;;;-1:-1:-1;;;;;7393:73:6;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;7483:9:6;6304:1195;-1:-1:-1;;;;;;;;6304:1195:6:o;1219:37:8:-;;;-1:-1:-1;;;;;1219:37:8;;:::o;12397:76:6:-;12463:3;12397:76;:::o;7685:822::-;3669:6;;7910:17;;3669:6;;3668:7;;:41;;-1:-1:-1;3679:30:6;;;;3668:41;3660:50;;;;;;;;7873:18;:25;7860:38;;7852:47;;;;;;7930:18;:30;;7949:10;;7930:30;;;;;;;;;;;;;;8054:9;7930:30;;;;;8054:9;;;;-1:-1:-1;;;;;8054:9:6;8038:26;;:15;:26;;;;;;;7930:30;;-1:-1:-1;8038:26:6;;8030:35;;;;;;;;8097:1;:17;;;8083:10;:8;:10::i;:::-;:31;;8075:40;;;;;;8134:10;;;;;;8133:11;8125:20;;;;;;8164:6;;;;;;;;;8163:7;8155:16;;;;;;8182:6;;;:13;;-1:-1:-1;;8182:13:6;;;;;8271:7;;;;-1:-1:-1;;;;;8271:7:6;:12;8267:159;;;8299:11;;;;8320:8;;;;8299:11;;;;-1:-1:-1;;;;;8299:11:6;;:30;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8267:159;;;8374:7;;;;8392:11;;;;8405:8;;;;-1:-1:-1;;;;;8374:7:6;;;;8368:23;;8392:11;;;;;8368:46;;-1:-1:-1;;;8368:46:6;;;;;;-1:-1:-1;;;;;8368:46:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8360:55;;;;;;;;8469:11;;;;8482:8;;;;8492:7;;;;-1:-1:-1;;;;;8469:11:6;;;;;;;8457:10;;8441:59;;8482:8;;8492:7;8441:59;;;;;-1:-1:-1;;;;;8441:59:6;;;;;;;;;;;;;;;;7685:822;;:::o;724:100:5:-;1171:5:9;;1157:10;-1:-1:-1;;;;;1157:19:9;;;1171:5;;1157:19;1148:29;;;;;;446:6:5;;;;445:7;437:16;;;;;;782:6;:13;;-1:-1:-1;;782:13:5;791:4;782:13;;;810:7;;;;;;;;;;724:100::o;881:2782:4:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;881:2782:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;881:2782:4;;;-1:-1:-1;881:2782:4;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;881:2782:4;;;;;;;;;;;;-1:-1:-1;;;;;;881:2782:4;;;;;;;;;;;;;;;;;-1:-1:-1;;881:2782:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::o"
          },
          "methodIdentifiers": {
            "absoluteMinTimeLock()": "ea8a66c7",
            "acceptOwnership()": "79ba5097",
            "allowDisbursePaymentWhenPaused()": "859bcc71",
            "allowedSpenders(address)": "d8528af0",
            "authorizePayment(string,bytes32,address,address,uint256,uint256)": "f37b74ca",
            "authorizeSpender(address,bool)": "793c0fd4",
            "authorizedPayments(uint256)": "a0927a6a",
            "cancelPayment(uint256)": "8422927d",
            "changeHatchEscapeCaller(address)": "d836fbe8",
            "changeOwnership(address)": "2af4c31e",
            "checkIn()": "183ff085",
            "delayPayment(uint256,uint256)": "846a5dde",
            "disburseAuthorizedPayment(uint256)": "52892478",
            "disburseAuthorizedPayments(uint256[])": "863da000",
            "escapeHatch(address)": "a142d608",
            "escapeHatchCaller()": "1f6eb6e7",
            "escapeHatchDestination()": "f5b61230",
            "isTokenEscapable(address)": "892db057",
            "maxSecurityGuardDelay()": "0b2e7423",
            "newOwnerCandidate()": "d091b550",
            "numberOfAuthorizedPayments()": "68b8c5a1",
            "owner()": "8da5cb5b",
            "pause()": "8456cb59",
            "paused()": "5c975abb",
            "proposeOwnership(address)": "710bf322",
            "removeOwnership(address)": "666a3427",
            "securityGuard()": "b2ca3ec4",
            "securityGuardLastCheckin()": "3f487b8b",
            "setAllowDisbursePaymentWhenPaused(bool)": "672f412c",
            "setMaxSecurityGuardDelay(uint256)": "da4793ac",
            "setSecurityGuard(address)": "bb2a51d1",
            "setTimelock(uint256)": "1e891c0a",
            "timeLock()": "d085835a",
            "unpause()": "3f4ba83a"
          }
        },
        "metadata": "{\"compiler\":{\"version\":\"0.4.21+commit.dfe3193c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[],\"name\":\"maxSecurityGuardDelay\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"checkIn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newTimeLock\",\"type\":\"uint256\"}],\"name\":\"setTimelock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"escapeHatchCaller\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"securityGuardLastCheckin\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_idPayment\",\"type\":\"uint256\"}],\"name\":\"disburseAuthorizedPayment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dac\",\"type\":\"address\"}],\"name\":\"removeOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"setAllowDisbursePaymentWhenPaused\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numberOfAuthorizedPayments\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwnerCandidate\",\"type\":\"address\"}],\"name\":\"proposeOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_authorize\",\"type\":\"bool\"}],\"name\":\"authorizeSpender\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_idPayment\",\"type\":\"uint256\"}],\"name\":\"cancelPayment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_idPayment\",\"type\":\"uint256\"},{\"name\":\"_delay\",\"type\":\"uint256\"}],\"name\":\"delayPayment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allowDisbursePaymentWhenPaused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_idPayments\",\"type\":\"uint256[]\"}],\"name\":\"disburseAuthorizedPayments\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"isTokenEscapable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"authorizedPayments\",\"outputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"reference\",\"type\":\"bytes32\"},{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"earliestPayTime\",\"type\":\"uint256\"},{\"name\":\"canceled\",\"type\":\"bool\"},{\"name\":\"paid\",\"type\":\"bool\"},{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"securityGuardDelay\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"escapeHatch\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"securityGuard\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newSecurityGuard\",\"type\":\"address\"}],\"name\":\"setSecurityGuard\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"timeLock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwnerCandidate\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newEscapeHatchCaller\",\"type\":\"address\"}],\"name\":\"changeHatchEscapeCaller\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowedSpenders\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_maxSecurityGuardDelay\",\"type\":\"uint256\"}],\"name\":\"setMaxSecurityGuardDelay\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"absoluteMinTimeLock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_reference\",\"type\":\"bytes32\"},{\"name\":\"_recipient\",\"type\":\"address\"},{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_paymentDelay\",\"type\":\"uint256\"}],\"name\":\"authorizePayment\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"escapeHatchDestination\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_escapeHatchCaller\",\"type\":\"address\"},{\"name\":\"_escapeHatchDestination\",\"type\":\"address\"},{\"name\":\"_absoluteMinTimeLock\",\"type\":\"uint256\"},{\"name\":\"_timeLock\",\"type\":\"uint256\"},{\"name\":\"_securityGuard\",\"type\":\"address\"},{\"name\":\"_maxSecurityGuardDelay\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"idPayment\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"reference\",\"type\":\"bytes32\"}],\"name\":\"PaymentAuthorized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"idPayment\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"}],\"name\":\"PaymentExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"idPayment\",\"type\":\"uint256\"}],\"name\":\"PaymentCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"authorized\",\"type\":\"bool\"}],\"name\":\"SpenderAuthorization\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"}],\"name\":\"EscapeHatchBlackistedToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EscapeHatchCalled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"by\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"OwnershipRemoved\",\"type\":\"event\"}],\"devdoc\":{\"methods\":{\"authorizePayment(string,bytes32,address,address,uint256,uint256)\":{\"params\":{\"_amount\":\"Amount to be paid in wei\",\"_name\":\"Brief description of the payment that is authorized\",\"_paymentDelay\":\"Number of seconds the payment is to be delayed, if  this value is below `timeLock` then the `timeLock` determines the delay\",\"_recipient\":\"Destination of the payment\",\"_reference\":\"External reference of the payment\"},\"return\":\"The Payment ID number for the new authorized payment\"},\"authorizeSpender(address,bool)\":{\"params\":{\"_authorize\":\"`true` if authorizing and `false` if unauthorizing\",\"_spender\":\"The address of the contract being authorized/unauthorized\"}},\"cancelPayment(uint256)\":{\"params\":{\"_idPayment\":\"ID of the payment to be canceled.\"}},\"changeHatchEscapeCaller(address)\":{\"params\":{\"_newEscapeHatchCaller\":\"The address of a trusted account or  contract to call `escapeHatch()` to send the value in this contract to  the `escapeHatchDestination`; it would be ideal that `escapeHatchCaller`  cannot move funds out of `escapeHatchDestination`\"}},\"changeOwnership(address)\":{\"details\":\"In this 2nd option for ownership transfer `changeOwnership()` can  be called and it will immediately assign ownership to the `newOwner`\",\"params\":{\"_newOwner\":\"The address of the new owner\"}},\"delayPayment(uint256,uint256)\":{\"params\":{\"_delay\":\"The number of seconds to delay the payment\",\"_idPayment\":\"ID of the payment to be delayed\"}},\"disburseAuthorizedPayment(uint256)\":{\"params\":{\"_idPayment\":\"The payment ID to be disbursed\"}},\"escapeHatch(address)\":{\"params\":{\"_token\":\"to transfer, use 0x0 for ether\"}},\"isTokenEscapable(address)\":{\"params\":{\"_token\":\"the token address being queried\"},\"return\":\"False if `_token` is in the blacklist and can't be taken out of  the contract via the `escapeHatch()`\"},\"numberOfAuthorizedPayments()\":{\"return\":\"The number of payments ever authorized even if they were canceled\"},\"pause()\":{\"details\":\"called by the owner to pause the contract. Triggers a stopped state   and resets allowDisbursePaymentWhenPaused to false\"},\"proposeOwnership(address)\":{\"details\":\"In this 1st option for ownership transfer `proposeOwnership()` must  be called first by the current `owner` then `acceptOwnership()` must be  called by the `newOwnerCandidate`\",\"params\":{\"_newOwnerCandidate\":\"The address being proposed as the new owner\"}},\"removeOwnership(address)\":{\"details\":\"In this 3rd option for ownership transfer `removeOwnership()` can  be called and it will immediately assign ownership to the 0x0 address;  it requires a 0xdece be input as a parameter to prevent accidental use\",\"params\":{\"_dac\":\"`0xdac` has to be entered for this function to work\"}},\"setAllowDisbursePaymentWhenPaused(bool)\":{\"details\":\"only callable whenPaused b/c pausing the contract will reset `allowDisbursePaymentWhenPaused` to false\",\"params\":{\"allowed\":\"`true` if allowing payments to be disbursed when paused, otherwise 'false'\"}},\"setMaxSecurityGuardDelay(uint256)\":{\"params\":{\"_maxSecurityGuardDelay\":\"The new maximum delay in seconds that  `securityGuard` can delay the payment's execution in total\"}},\"setSecurityGuard(address)\":{\"params\":{\"_newSecurityGuard\":\"Address of the new security guard\"}},\"setTimelock(uint256)\":{\"params\":{\"_newTimeLock\":\"Sets the new minimum default `timeLock` in seconds;  pending payments maintain their `earliestPayTime`\"}},\"unpause()\":{\"details\":\"called by the owner to unpause, returns to normal state\"}}},\"userdoc\":{\"methods\":{\"acceptOwnership()\":{\"notice\":\"Can only be called by the `newOwnerCandidate`, accepts the  transfer of ownership\"},\"authorizePayment(string,bytes32,address,address,uint256,uint256)\":{\"notice\":\"/////only `allowedSpenders[]` Creates a new `Payment`\"},\"authorizeSpender(address,bool)\":{\"notice\":\"`onlyOwner` Adds a spender to the `allowedSpenders[]` white list\"},\"cancelPayment(uint256)\":{\"notice\":\"////`onlyOwner` Cancel a payment all together\"},\"changeHatchEscapeCaller(address)\":{\"notice\":\"Changes the address assigned to call `escapeHatch()`\"},\"changeOwnership(address)\":{\"notice\":\"`owner` can step down and assign some other address to this role\"},\"checkIn()\":{\"notice\":\"`onlySecurityGuard` can checkin. If they fail to checkin, payments will not be allowed to be disbursed, unless the payment has an `earliestPayTime` <= `securityGuardLastCheckin`.To reduce the risk of a front-running attack on payments, it is important that this is called with a resonable gasPrice set for the current network congestion. If this tx is not mined, within 30 mins of being sent, it is possible that a payment can be authorized w/o the securityGuard's knowledge\"},\"delayPayment(uint256,uint256)\":{\"notice\":\"//////`onlySecurityGuard` Delays a payment for a set number of seconds\"},\"disburseAuthorizedPayment(uint256)\":{\"notice\":\"Disburse an authorizedPayment to the recipient if all checks pass.\"},\"disburseAuthorizedPayments(uint256[])\":{\"notice\":\"convience function to disburse multiple payments in a single tx\"},\"escapeHatch(address)\":{\"notice\":\"The `escapeHatch()` should only be called as a last resort if a security issue is uncovered or something unexpected happened\"},\"isTokenEscapable(address)\":{\"notice\":\"Checks to see if `_token` is in the blacklist of tokens\"},\"numberOfAuthorizedPayments()\":{\"notice\":\"//////States the total number of authorized payments in this contract\"},\"proposeOwnership(address)\":{\"notice\":\"`onlyOwner` Proposes to transfer control of the contract to a  new owner\"},\"removeOwnership(address)\":{\"notice\":\"Decentralizes the contract, this operation cannot be undone \"},\"setAllowDisbursePaymentWhenPaused(bool)\":{\"notice\":\"Owner can allow payment disbursement when the contract is paused. This is so the bridge can be upgraded without having to migrate any existing authorizedPayments\"},\"setMaxSecurityGuardDelay(uint256)\":{\"notice\":\"`onlyOwner` Changes the maximum number of seconds `securityGuard` can delay a payment\"},\"setSecurityGuard(address)\":{\"notice\":\"`onlyOwner` Sets the address of `securityGuard`\"},\"setTimelock(uint256)\":{\"notice\":\"`onlyOwner` Changes `timeLock`; the new `timeLock` cannot be  lower than `absoluteMinTimeLock`\"}}}},\"settings\":{\"compilationTarget\":{\"./contracts/lib/FailClosedVault.sol\":\"FailClosedVault\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"./contracts/lib/FailClosedVault.sol\":{\"content\":\"pragma solidity ^0.4.21;\\n\\n/*\\n    Copyright 2018, RJ Ewing\\n\\n    This program is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU General Public License as published by\\n    the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    This program is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU General Public License for more details.\\n\\n    You should have received a copy of the GNU General Public License\\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n */\\n\\nimport \\\"./Vault.sol\\\";\\n\\n/**\\n* @dev `FailClosedVault` is a version of the vault that requires\\n*  the securityGuard to \\\"see\\\" each payment before it can be collected\\n*/\\ncontract FailClosedVault is Vault {\\n    uint public securityGuardLastCheckin;\\n\\n    /**\\n    * @param _absoluteMinTimeLock For this version of the vault, it is recommended\\n    *   that this value is > 24hrs. If not, it will require the securityGuard to checkIn\\n    *   multiple times a day. Also consider that `securityGuardLastCheckin >= payment.earliestPayTime - timelock + 30mins);`\\n    *   is the condition to allow payments to be payed. The additional 30 mins is to reduce (not eliminate)\\n    *   the risk of front-running\\n    */\\n    function FailClosedVault(\\n        address _escapeHatchCaller,\\n        address _escapeHatchDestination,\\n        uint _absoluteMinTimeLock,\\n        uint _timeLock,\\n        address _securityGuard,\\n        uint _maxSecurityGuardDelay\\n    ) Vault(\\n        _escapeHatchCaller,\\n        _escapeHatchDestination, \\n        _absoluteMinTimeLock,\\n        _timeLock,\\n        _securityGuard,\\n        _maxSecurityGuardDelay\\n    ) public {\\n    }\\n\\n/////////////////////\\n// Spender Interface\\n/////////////////////\\n\\n    /**\\n    * Disburse an authorizedPayment to the recipient if all checks pass.\\n    *\\n    * @param _idPayment The payment ID to be disbursed\\n    */\\n    function disburseAuthorizedPayment(uint _idPayment) disbursementsAllowed public {\\n        // Check that the `_idPayment` has been added to the payments struct\\n        require(_idPayment < authorizedPayments.length);\\n\\n        Payment storage p = authorizedPayments[_idPayment];\\n        // The current minimum delay for a payment is `timeLock`. Thus the following ensuress\\n        // that the `securityGuard` has checked in after the payment was created\\n        // @notice earliestPayTime is updated when a payment is delayed. Which may require\\n        // another checkIn before the payment can be collected.\\n        // @notice We add 30 mins to this to reduce (not eliminate) the risk of front-running\\n        require(securityGuardLastCheckin >= p.earliestPayTime - timeLock + 30 minutes);\\n\\n        super.disburseAuthorizedPayment(_idPayment);\\n    }\\n\\n///////////////////////////\\n// SecurityGuard Interface\\n///////////////////////////\\n\\n    /**\\n    * @notice `onlySecurityGuard` can checkin. If they fail to checkin,\\n    * payments will not be allowed to be disbursed, unless the payment has\\n    * an `earliestPayTime` <= `securityGuardLastCheckin`.\\n    * @notice To reduce the risk of a front-running attack on payments, it\\n    * is important that this is called with a resonable gasPrice set for the\\n    * current network congestion. If this tx is not mined, within 30 mins\\n    * of being sent, it is possible that a payment can be authorized w/o the\\n    * securityGuard's knowledge\\n    */\\n    function checkIn() onlySecurityGuard external {\\n        securityGuardLastCheckin = _getTime();\\n    }\\n}\",\"keccak256\":\"0x62fc5761fc90bd42b4c504be4cb94f05343bd678452f5ed1e794b1e98a5174d1\"},\"./contracts/lib/Pausable.sol\":{\"content\":\"pragma solidity ^0.4.21;\\n\\nimport \\\"giveth-common-contracts/contracts/Owned.sol\\\";\\n\\n/**\\n * @title Pausable\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\n */\\ncontract Pausable is Owned {\\n    event Pause();\\n    event Unpause();\\n\\n    bool public paused = false;\\n\\n    /**\\n    * @dev Modifier to make a function callable only when the contract is not paused.\\n    */\\n    modifier whenNotPaused() {\\n        require(!paused);\\n        _;\\n    }\\n\\n    /**\\n    * @dev Modifier to make a function callable only when the contract is paused.\\n    */\\n    modifier whenPaused() {\\n        require(paused);\\n        _;\\n    }\\n\\n    /**\\n    * @dev called by the owner to pause, triggers stopped state\\n    */\\n    function pause() onlyOwner whenNotPaused public {\\n        paused = true;\\n        emit Pause();\\n    }\\n\\n    /**\\n    * @dev called by the owner to unpause, returns to normal state\\n    */\\n    function unpause() onlyOwner whenPaused public {\\n        paused = false;\\n        emit Unpause();\\n    }\\n}\",\"keccak256\":\"0xd134809350f024c16096d995915c6a348d770e1ec633723419f4f3acbd1e4b46\"},\"./contracts/lib/Vault.sol\":{\"content\":\"pragma solidity ^0.4.21;\\n\\n/*\\n    Copyright 2018, Jordi Baylina, RJ Ewing\\n\\n    This program is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU General Public License as published by\\n    the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    This program is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU General Public License for more details.\\n\\n    You should have received a copy of the GNU General Public License\\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n */\\n\\n/// @title Vault Contract\\n/// @author Jordi Baylina, RJ Ewing\\n/// @notice This contract holds funds for Campaigns and automates payments. For\\n///  this iteration the funds will come straight from the Giveth Multisig as a\\n///  safety precaution, but once fully tested and optimized this contract will\\n///  be a safe place to store funds equipped with optional variable time delays\\n///  to allow for an optional escape hatch\\n\\nimport \\\"giveth-common-contracts/contracts/Escapable.sol\\\";\\nimport \\\"./Pausable.sol\\\";\\n\\n/// @dev `Vault` is a higher level contract built off of the `Escapable`\\n///  contract that holds funds for Campaigns and automates payments.\\ncontract Vault is Escapable, Pausable {\\n\\n    /// @dev `Payment` is a public structure that describes the details of\\n    ///  each payment making it easy to track the movement of funds\\n    ///  transparently\\n    struct Payment {\\n        string name;              // What is the purpose of this payment\\n        bytes32 reference;        // Reference of the payment.\\n        address spender;          // Who is sending the funds\\n        uint earliestPayTime;     // The earliest a payment can be made (Unix Time)\\n        bool canceled;            // If True then the payment has been canceled\\n        bool paid;                // If True then the payment has been paid\\n        address recipient;        // Who is receiving the funds\\n        address token;            // Token this payment represents\\n        uint amount;              // The amount of wei sent in the payment\\n        uint securityGuardDelay;  // The seconds `securityGuard` can delay payment\\n    }\\n\\n    Payment[] public authorizedPayments;\\n\\n    address public securityGuard;\\n    uint public absoluteMinTimeLock;\\n    uint public timeLock;\\n    uint public maxSecurityGuardDelay;\\n    bool public allowDisbursePaymentWhenPaused;\\n\\n    /// @dev The white list of approved addresses allowed to set up && receive\\n    ///  payments from this vault\\n    mapping (address => bool) public allowedSpenders;\\n\\n    // @dev Events to make the payment movements easy to find on the blockchain\\n    event PaymentAuthorized(uint indexed idPayment, address indexed recipient, uint amount, address token, bytes32 reference);\\n    event PaymentExecuted(uint indexed idPayment, address indexed recipient, uint amount, address token);\\n    event PaymentCanceled(uint indexed idPayment);\\n    event SpenderAuthorization(address indexed spender, bool authorized);\\n\\n    /// @dev The address assigned the role of `securityGuard` is the only\\n    ///  addresses that can call a function with this modifier\\n    modifier onlySecurityGuard { \\n        require(msg.sender == securityGuard);\\n        _;\\n    }\\n\\n    /// By default, we dis-allow payment disburements if the contract is paused.\\n    /// However, to facilitate a migration of the bridge, we can allow\\n    /// disbursements when paused if explicitly set\\n    modifier disbursementsAllowed {\\n        require(!paused || allowDisbursePaymentWhenPaused);\\n        _;\\n    }\\n\\n    /// @notice The Constructor creates the Vault on the blockchain\\n    /// @param _escapeHatchCaller The address of a trusted account or contract to\\n    ///  call `escapeHatch()` to send the ether in this contract to the\\n    ///  `escapeHatchDestination` it would be ideal if `escapeHatchCaller` cannot move\\n    ///  funds out of `escapeHatchDestination`\\n    /// @param _escapeHatchDestination The address of a safe location (usu a\\n    ///  Multisig) to send the ether held in this contract in an emergency\\n    /// @param _absoluteMinTimeLock The minimum number of seconds `timelock` can\\n    ///  be set to, if set to 0 the `owner` can remove the `timeLock` completely\\n    /// @param _timeLock Initial number of seconds that payments are delayed\\n    ///  after they are authorized (a security precaution)\\n    /// @param _securityGuard Address that will be able to delay the payments\\n    ///  beyond the initial timelock requirements; can be set to 0x0 to remove\\n    ///  the `securityGuard` functionality\\n    /// @param _maxSecurityGuardDelay The maximum number of seconds in total\\n    ///   that `securityGuard` can delay a payment so that the owner can cancel\\n    ///   the payment if needed\\n    function Vault(\\n        address _escapeHatchCaller,\\n        address _escapeHatchDestination,\\n        uint _absoluteMinTimeLock,\\n        uint _timeLock,\\n        address _securityGuard,\\n        uint _maxSecurityGuardDelay\\n    ) Escapable(_escapeHatchCaller, _escapeHatchDestination) public\\n    {\\n        absoluteMinTimeLock = _absoluteMinTimeLock;\\n        timeLock = _timeLock;\\n        securityGuard = _securityGuard;\\n        maxSecurityGuardDelay = _maxSecurityGuardDelay;\\n    }\\n\\n/////////\\n// Helper functions\\n/////////\\n\\n    /// @notice States the total number of authorized payments in this contract\\n    /// @return The number of payments ever authorized even if they were canceled\\n    function numberOfAuthorizedPayments() public view returns (uint) {\\n        return authorizedPayments.length;\\n    }\\n\\n////////\\n// Spender Interface\\n////////\\n\\n    /// @notice only `allowedSpenders[]` Creates a new `Payment`\\n    /// @param _name Brief description of the payment that is authorized\\n    /// @param _reference External reference of the payment\\n    /// @param _recipient Destination of the payment\\n    /// @param _amount Amount to be paid in wei\\n    /// @param _paymentDelay Number of seconds the payment is to be delayed, if\\n    ///  this value is below `timeLock` then the `timeLock` determines the delay\\n    /// @return The Payment ID number for the new authorized payment\\n    function authorizePayment(\\n        string _name,\\n        bytes32 _reference,\\n        address _recipient,\\n        address _token,\\n        uint _amount,\\n        uint _paymentDelay\\n    ) whenNotPaused external returns(uint) {\\n\\n        // Fail if you arent on the `allowedSpenders` white list\\n        require(allowedSpenders[msg.sender]);\\n        uint idPayment = authorizedPayments.length;       // Unique Payment ID\\n        authorizedPayments.length++;\\n\\n        // The following lines fill out the payment struct\\n        Payment storage p = authorizedPayments[idPayment];\\n        p.spender = msg.sender;\\n\\n        // Overflow protection\\n        require(_paymentDelay <= 10**18);\\n\\n        // Determines the earliest the recipient can receive payment (Unix time)\\n        p.earliestPayTime = _paymentDelay >= timeLock ?\\n                                _getTime() + _paymentDelay :\\n                                _getTime() + timeLock;\\n        p.recipient = _recipient;\\n        p.amount = _amount;\\n        p.name = _name;\\n        p.reference = _reference;\\n        p.token = _token;\\n        emit PaymentAuthorized(idPayment, p.recipient, p.amount, p.token, p.reference);\\n        return idPayment;\\n    }\\n\\n    /// Anyone can call this function to disburse the payment to \\n    ///  the recipient after `earliestPayTime` has passed\\n    /// @param _idPayment The payment ID to be executed\\n    function disburseAuthorizedPayment(uint _idPayment) disbursementsAllowed public {\\n        // Check that the `_idPayment` has been added to the payments struct\\n        require(_idPayment < authorizedPayments.length);\\n\\n        Payment storage p = authorizedPayments[_idPayment];\\n\\n        // Checking for reasons not to execute the payment\\n        require(allowedSpenders[p.spender]);\\n        require(_getTime() >= p.earliestPayTime);\\n        require(!p.canceled);\\n        require(!p.paid);\\n\\n        p.paid = true; // Set the payment to being paid\\n\\n        // Make the payment\\n        if (p.token == 0) {\\n            p.recipient.transfer(p.amount);\\n        } else {\\n            require(ERC20(p.token).transfer(p.recipient, p.amount));\\n        }\\n\\n        emit PaymentExecuted(_idPayment, p.recipient, p.amount, p.token);\\n    }\\n\\n    /// convience function to disburse multiple payments in a single tx\\n    function disburseAuthorizedPayments(uint[] _idPayments) public {\\n        for (uint i = 0; i < _idPayments.length; i++) {\\n            uint _idPayment = _idPayments[i];\\n            disburseAuthorizedPayment(_idPayment);\\n        }\\n    }\\n\\n/////////\\n// SecurityGuard Interface\\n/////////\\n\\n    /// @notice `onlySecurityGuard` Delays a payment for a set number of seconds\\n    /// @param _idPayment ID of the payment to be delayed\\n    /// @param _delay The number of seconds to delay the payment\\n    function delayPayment(uint _idPayment, uint _delay) onlySecurityGuard external {\\n        require(_idPayment < authorizedPayments.length);\\n\\n        // Overflow test\\n        require(_delay <= 10**18);\\n\\n        Payment storage p = authorizedPayments[_idPayment];\\n\\n        require(p.securityGuardDelay + _delay <= maxSecurityGuardDelay);\\n        require(!p.paid);\\n        require(!p.canceled);\\n\\n        p.securityGuardDelay += _delay;\\n        p.earliestPayTime += _delay;\\n    }\\n\\n////////\\n// Owner Interface\\n///////\\n\\n    /// @notice `onlyOwner` Cancel a payment all together\\n    /// @param _idPayment ID of the payment to be canceled.\\n    function cancelPayment(uint _idPayment) onlyOwner external {\\n        require(_idPayment < authorizedPayments.length);\\n\\n        Payment storage p = authorizedPayments[_idPayment];\\n\\n        require(!p.canceled);\\n        require(!p.paid);\\n\\n        p.canceled = true;\\n        emit PaymentCanceled(_idPayment);\\n    }\\n\\n    /// @notice `onlyOwner` Adds a spender to the `allowedSpenders[]` white list\\n    /// @param _spender The address of the contract being authorized/unauthorized\\n    /// @param _authorize `true` if authorizing and `false` if unauthorizing\\n    function authorizeSpender(address _spender, bool _authorize) onlyOwner external {\\n        allowedSpenders[_spender] = _authorize;\\n        emit SpenderAuthorization(_spender, _authorize);\\n    }\\n\\n    /// @notice `onlyOwner` Sets the address of `securityGuard`\\n    /// @param _newSecurityGuard Address of the new security guard\\n    function setSecurityGuard(address _newSecurityGuard) onlyOwner external {\\n        securityGuard = _newSecurityGuard;\\n    }\\n\\n    /// @notice `onlyOwner` Changes `timeLock`; the new `timeLock` cannot be\\n    ///  lower than `absoluteMinTimeLock`\\n    /// @param _newTimeLock Sets the new minimum default `timeLock` in seconds;\\n    ///  pending payments maintain their `earliestPayTime`\\n    function setTimelock(uint _newTimeLock) onlyOwner external {\\n        require(_newTimeLock >= absoluteMinTimeLock);\\n        timeLock = _newTimeLock;\\n    }\\n\\n    /// @notice `onlyOwner` Changes the maximum number of seconds\\n    /// `securityGuard` can delay a payment\\n    /// @param _maxSecurityGuardDelay The new maximum delay in seconds that\\n    ///  `securityGuard` can delay the payment's execution in total\\n    function setMaxSecurityGuardDelay(uint _maxSecurityGuardDelay) onlyOwner external {\\n        maxSecurityGuardDelay = _maxSecurityGuardDelay;\\n    }\\n\\n    /// @dev called by the owner to pause the contract. Triggers a stopped state \\n    ///  and resets allowDisbursePaymentWhenPaused to false\\n    function pause() onlyOwner whenNotPaused public {\\n        allowDisbursePaymentWhenPaused = false;\\n        super.pause();\\n    }\\n\\n    /// Owner can allow payment disbursement when the contract is paused. This is so the\\n    /// bridge can be upgraded without having to migrate any existing authorizedPayments\\n    /// @dev only callable whenPaused b/c pausing the contract will reset `allowDisbursePaymentWhenPaused` to false\\n    /// @param allowed `true` if allowing payments to be disbursed when paused, otherwise 'false'\\n    function setAllowDisbursePaymentWhenPaused(bool allowed) onlyOwner whenPaused public {\\n        allowDisbursePaymentWhenPaused = allowed;\\n    }\\n\\n    // for overidding during testing\\n    function _getTime() internal view returns (uint) {\\n        return now;\\n    }\\n\\n}\",\"keccak256\":\"0x519df8e782548ae72e234de6f5c294def03beb3a3f9308093908311ba0bcd64a\"},\"giveth-common-contracts/contracts/ERC20.sol\":{\"content\":\"pragma solidity ^0.4.19;\\n\\n\\n/**\\n * @title ERC20\\n * @dev A standard interface for tokens.\\n * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\\n */\\ncontract ERC20 {\\n  \\n    /// @dev Returns the total token supply\\n    function totalSupply() public constant returns (uint256 supply);\\n\\n    /// @dev Returns the account balance of the account with address _owner\\n    function balanceOf(address _owner) public constant returns (uint256 balance);\\n\\n    /// @dev Transfers _value number of tokens to address _to\\n    function transfer(address _to, uint256 _value) public returns (bool success);\\n\\n    /// @dev Transfers _value number of tokens from address _from to address _to\\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\\n\\n    /// @dev Allows _spender to withdraw from the msg.sender's account up to the _value amount\\n    function approve(address _spender, uint256 _value) public returns (bool success);\\n\\n    /// @dev Returns the amount which _spender is still allowed to withdraw from _owner\\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\\n\\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\\n\\n}\\n\",\"keccak256\":\"0xe58902b5bdf9f918c6ec8ee4da44bf87faf225098fae84671ab07b46af427338\"},\"giveth-common-contracts/contracts/Escapable.sol\":{\"content\":\"pragma solidity ^0.4.19;\\n/*\\n    Copyright 2016, Jordi Baylina\\n    Contributor: Adrià Massanet <adria@codecontext.io>\\n\\n    This program is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU General Public License as published by\\n    the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    This program is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU General Public License for more details.\\n\\n    You should have received a copy of the GNU General Public License\\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n*/\\n\\nimport \\\"./Owned.sol\\\";\\nimport \\\"./ERC20.sol\\\";\\n\\n\\n/// @dev `Escapable` is a base level contract built off of the `Owned`\\n///  contract; it creates an escape hatch function that can be called in an\\n///  emergency that will allow designated addresses to send any ether or tokens\\n///  held in the contract to an `escapeHatchDestination` as long as they were\\n///  not blacklisted\\ncontract Escapable is Owned {\\n    address public escapeHatchCaller;\\n    address public escapeHatchDestination;\\n    mapping (address=>bool) private escapeBlacklist; // Token contract addresses\\n\\n    /// @notice The Constructor assigns the `escapeHatchDestination` and the\\n    ///  `escapeHatchCaller`\\n    /// @param _escapeHatchCaller The address of a trusted account or contract\\n    ///  to call `escapeHatch()` to send the ether in this contract to the\\n    ///  `escapeHatchDestination` it would be ideal that `escapeHatchCaller`\\n    ///  cannot move funds out of `escapeHatchDestination`\\n    /// @param _escapeHatchDestination The address of a safe location (usu a\\n    ///  Multisig) to send the ether held in this contract; if a neutral address\\n    ///  is required, the WHG Multisig is an option:\\n    ///  0x8Ff920020c8AD673661c8117f2855C384758C572 \\n    function Escapable(address _escapeHatchCaller, address _escapeHatchDestination) public {\\n        escapeHatchCaller = _escapeHatchCaller;\\n        escapeHatchDestination = _escapeHatchDestination;\\n    }\\n\\n    /// @dev The addresses preassigned as `escapeHatchCaller` or `owner`\\n    ///  are the only addresses that can call a function with this modifier\\n    modifier onlyEscapeHatchCallerOrOwner {\\n        require ((msg.sender == escapeHatchCaller)||(msg.sender == owner));\\n        _;\\n    }\\n\\n    /// @notice Creates the blacklist of tokens that are not able to be taken\\n    ///  out of the contract; can only be done at the deployment, and the logic\\n    ///  to add to the blacklist will be in the constructor of a child contract\\n    /// @param _token the token contract address that is to be blacklisted \\n    function blacklistEscapeToken(address _token) internal {\\n        escapeBlacklist[_token] = true;\\n        EscapeHatchBlackistedToken(_token);\\n    }\\n\\n    /// @notice Checks to see if `_token` is in the blacklist of tokens\\n    /// @param _token the token address being queried\\n    /// @return False if `_token` is in the blacklist and can't be taken out of\\n    ///  the contract via the `escapeHatch()`\\n    function isTokenEscapable(address _token) view public returns (bool) {\\n        return !escapeBlacklist[_token];\\n    }\\n\\n    /// @notice The `escapeHatch()` should only be called as a last resort if a\\n    /// security issue is uncovered or something unexpected happened\\n    /// @param _token to transfer, use 0x0 for ether\\n    function escapeHatch(address _token) public onlyEscapeHatchCallerOrOwner {   \\n        require(escapeBlacklist[_token]==false);\\n\\n        uint256 balance;\\n\\n        /// @dev Logic for ether\\n        if (_token == 0x0) {\\n            balance = this.balance;\\n            escapeHatchDestination.transfer(balance);\\n            EscapeHatchCalled(_token, balance);\\n            return;\\n        }\\n        /// @dev Logic for tokens\\n        ERC20 token = ERC20(_token);\\n        balance = token.balanceOf(this);\\n        require(token.transfer(escapeHatchDestination, balance));\\n        EscapeHatchCalled(_token, balance);\\n    }\\n\\n    /// @notice Changes the address assigned to call `escapeHatch()`\\n    /// @param _newEscapeHatchCaller The address of a trusted account or\\n    ///  contract to call `escapeHatch()` to send the value in this contract to\\n    ///  the `escapeHatchDestination`; it would be ideal that `escapeHatchCaller`\\n    ///  cannot move funds out of `escapeHatchDestination`\\n    function changeHatchEscapeCaller(address _newEscapeHatchCaller) public onlyEscapeHatchCallerOrOwner {\\n        escapeHatchCaller = _newEscapeHatchCaller;\\n    }\\n\\n    event EscapeHatchBlackistedToken(address token);\\n    event EscapeHatchCalled(address token, uint amount);\\n}\\n\",\"keccak256\":\"0xd5d7b1a916841b21cfdee2bc9de4a178820421252b0c764070d78e846cd4511d\"},\"giveth-common-contracts/contracts/Owned.sol\":{\"content\":\"pragma solidity ^0.4.19;\\n\\n\\n/// @title Owned\\n/// @author Adrià Massanet <adria@codecontext.io>\\n/// @notice The Owned contract has an owner address, and provides basic \\n///  authorization control functions, this simplifies & the implementation of\\n///  user permissions; this contract has three work flows for a change in\\n///  ownership, the first requires the new owner to validate that they have the\\n///  ability to accept ownership, the second allows the ownership to be\\n///  directly transfered without requiring acceptance, and the third allows for\\n///  the ownership to be removed to allow for decentralization \\ncontract Owned {\\n\\n    address public owner;\\n    address public newOwnerCandidate;\\n\\n    event OwnershipRequested(address indexed by, address indexed to);\\n    event OwnershipTransferred(address indexed from, address indexed to);\\n    event OwnershipRemoved();\\n\\n    /// @dev The constructor sets the `msg.sender` as the`owner` of the contract\\n    function Owned() public {\\n        owner = msg.sender;\\n    }\\n\\n    /// @dev `owner` is the only address that can call a function with this\\n    /// modifier\\n    modifier onlyOwner() {\\n        require (msg.sender == owner);\\n        _;\\n    }\\n    \\n    /// @dev In this 1st option for ownership transfer `proposeOwnership()` must\\n    ///  be called first by the current `owner` then `acceptOwnership()` must be\\n    ///  called by the `newOwnerCandidate`\\n    /// @notice `onlyOwner` Proposes to transfer control of the contract to a\\n    ///  new owner\\n    /// @param _newOwnerCandidate The address being proposed as the new owner\\n    function proposeOwnership(address _newOwnerCandidate) public onlyOwner {\\n        newOwnerCandidate = _newOwnerCandidate;\\n        OwnershipRequested(msg.sender, newOwnerCandidate);\\n    }\\n\\n    /// @notice Can only be called by the `newOwnerCandidate`, accepts the\\n    ///  transfer of ownership\\n    function acceptOwnership() public {\\n        require(msg.sender == newOwnerCandidate);\\n\\n        address oldOwner = owner;\\n        owner = newOwnerCandidate;\\n        newOwnerCandidate = 0x0;\\n\\n        OwnershipTransferred(oldOwner, owner);\\n    }\\n\\n    /// @dev In this 2nd option for ownership transfer `changeOwnership()` can\\n    ///  be called and it will immediately assign ownership to the `newOwner`\\n    /// @notice `owner` can step down and assign some other address to this role\\n    /// @param _newOwner The address of the new owner\\n    function changeOwnership(address _newOwner) public onlyOwner {\\n        require(_newOwner != 0x0);\\n\\n        address oldOwner = owner;\\n        owner = _newOwner;\\n        newOwnerCandidate = 0x0;\\n\\n        OwnershipTransferred(oldOwner, owner);\\n    }\\n\\n    /// @dev In this 3rd option for ownership transfer `removeOwnership()` can\\n    ///  be called and it will immediately assign ownership to the 0x0 address;\\n    ///  it requires a 0xdece be input as a parameter to prevent accidental use\\n    /// @notice Decentralizes the contract, this operation cannot be undone \\n    /// @param _dac `0xdac` has to be entered for this function to work\\n    function removeOwnership(address _dac) public onlyOwner {\\n        require(_dac == 0xdac);\\n        owner = 0x0;\\n        newOwnerCandidate = 0x0;\\n        OwnershipRemoved();     \\n    }\\n} \\n\",\"keccak256\":\"0xc7d1401775fb1b41187de281757de68718fe27ba2660ba4bb194436aab7d0213\"}},\"version\":1}"
      }
    },
    "./contracts/lib/Pausable.sol": {
      "Pausable": {
        "abi": [
          {
            "constant": false,
            "inputs": [
              {
                "name": "_newOwner",
                "type": "address"
              }
            ],
            "name": "changeOwnership",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [],
            "name": "unpause",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "paused",
            "outputs": [
              {
                "name": "",
                "type": "bool"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_dac",
                "type": "address"
              }
            ],
            "name": "removeOwnership",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_newOwnerCandidate",
                "type": "address"
              }
            ],
            "name": "proposeOwnership",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [],
            "name": "acceptOwnership",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [],
            "name": "pause",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "owner",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "newOwnerCandidate",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "anonymous": false,
            "inputs": [],
            "name": "Pause",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [],
            "name": "Unpause",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "name": "by",
                "type": "address"
              },
              {
                "indexed": true,
                "name": "to",
                "type": "address"
              }
            ],
            "name": "OwnershipRequested",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "name": "from",
                "type": "address"
              },
              {
                "indexed": true,
                "name": "to",
                "type": "address"
              }
            ],
            "name": "OwnershipTransferred",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [],
            "name": "OwnershipRemoved",
            "type": "event"
          }
        ],
        "evm": {
          "bytecode": {
            "linkReferences": {},
            "object": "60606040526001805460a060020a60ff021916905560008054600160a060020a033316600160a060020a0319909116179055610575806100406000396000f3006060604052600436106100985763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416632af4c31e811461009d5780633f4ba83a146100be5780635c975abb146100d1578063666a3427146100f8578063710bf3221461011757806379ba5097146101365780638456cb59146101495780638da5cb5b1461015c578063d091b5501461018b575b600080fd5b34156100a857600080fd5b6100bc600160a060020a036004351661019e565b005b34156100c957600080fd5b6100bc61023f565b34156100dc57600080fd5b6100e46102cf565b604051901515815260200160405180910390f35b341561010357600080fd5b6100bc600160a060020a03600435166102f0565b341561012257600080fd5b6100bc600160a060020a036004351661037a565b341561014157600080fd5b6100bc6103f8565b341561015457600080fd5b6100bc610485565b341561016757600080fd5b61016f61052b565b604051600160a060020a03909116815260200160405180910390f35b341561019657600080fd5b61016f61053a565b6000805433600160a060020a039081169116146101ba57600080fd5b600160a060020a03821615156101cf57600080fd5b5060008054600160a060020a0383811673ffffffffffffffffffffffffffffffffffffffff1980841691909117938490556001805490911690559081169116817f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60005433600160a060020a0390811691161461025a57600080fd5b60015474010000000000000000000000000000000000000000900460ff16151561028357600080fd5b6001805474ff0000000000000000000000000000000000000000191690557f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3360405160405180910390a1565b60015474010000000000000000000000000000000000000000900460ff1681565b60005433600160a060020a0390811691161461030b57600080fd5b610dac600160a060020a0382161461032257600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff199081169091556001805490911690557f94e8b32e01b9eedfddd778ffbd051a7718cdc14781702884561162dca6f74dbb60405160405180910390a150565b60005433600160a060020a0390811691161461039557600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383811691909117918290559081169033167f13a4b3bc0d5234dd3d87c9f1557d8faefa37986da62c36ba49309e2fb2c9aec460405160405180910390a350565b60015460009033600160a060020a0390811691161461041657600080fd5b50600080546001805473ffffffffffffffffffffffffffffffffffffffff19808416600160a060020a03838116919091179586905591169091559081169116817f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a350565b60005433600160a060020a039081169116146104a057600080fd5b60015474010000000000000000000000000000000000000000900460ff16156104c857600080fd5b6001805474ff00000000000000000000000000000000000000001916740100000000000000000000000000000000000000001790557f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62560405160405180910390a1565b600054600160a060020a031681565b600154600160a060020a0316815600a165627a7a723058201560aa6a3dd4c56e49fca1664ce66d20e62c27f4fcd8a2cfcce5af00afc2bbd80029",
            "sourceMap": "194:822:5:-;;;268:26;;;-1:-1:-1;;;;;;268:26:5;;;289:5;993:18:9;;-1:-1:-1;;;;;1001:10:9;993:18;-1:-1:-1;;;;;;993:18:9;;;;;;194:822:5;;;;;;"
          },
          "deployedBytecode": {
            "linkReferences": {},
            "object": "6060604052600436106100985763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416632af4c31e811461009d5780633f4ba83a146100be5780635c975abb146100d1578063666a3427146100f8578063710bf3221461011757806379ba5097146101365780638456cb59146101495780638da5cb5b1461015c578063d091b5501461018b575b600080fd5b34156100a857600080fd5b6100bc600160a060020a036004351661019e565b005b34156100c957600080fd5b6100bc61023f565b34156100dc57600080fd5b6100e46102cf565b604051901515815260200160405180910390f35b341561010357600080fd5b6100bc600160a060020a03600435166102f0565b341561012257600080fd5b6100bc600160a060020a036004351661037a565b341561014157600080fd5b6100bc6103f8565b341561015457600080fd5b6100bc610485565b341561016757600080fd5b61016f61052b565b604051600160a060020a03909116815260200160405180910390f35b341561019657600080fd5b61016f61053a565b6000805433600160a060020a039081169116146101ba57600080fd5b600160a060020a03821615156101cf57600080fd5b5060008054600160a060020a0383811673ffffffffffffffffffffffffffffffffffffffff1980841691909117938490556001805490911690559081169116817f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60005433600160a060020a0390811691161461025a57600080fd5b60015474010000000000000000000000000000000000000000900460ff16151561028357600080fd5b6001805474ff0000000000000000000000000000000000000000191690557f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3360405160405180910390a1565b60015474010000000000000000000000000000000000000000900460ff1681565b60005433600160a060020a0390811691161461030b57600080fd5b610dac600160a060020a0382161461032257600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff199081169091556001805490911690557f94e8b32e01b9eedfddd778ffbd051a7718cdc14781702884561162dca6f74dbb60405160405180910390a150565b60005433600160a060020a0390811691161461039557600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383811691909117918290559081169033167f13a4b3bc0d5234dd3d87c9f1557d8faefa37986da62c36ba49309e2fb2c9aec460405160405180910390a350565b60015460009033600160a060020a0390811691161461041657600080fd5b50600080546001805473ffffffffffffffffffffffffffffffffffffffff19808416600160a060020a03838116919091179586905591169091559081169116817f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a350565b60005433600160a060020a039081169116146104a057600080fd5b60015474010000000000000000000000000000000000000000900460ff16156104c857600080fd5b6001805474ff00000000000000000000000000000000000000001916740100000000000000000000000000000000000000001790557f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62560405160405180910390a1565b600054600160a060020a031681565b600154600160a060020a0316815600a165627a7a723058201560aa6a3dd4c56e49fca1664ce66d20e62c27f4fcd8a2cfcce5af00afc2bbd80029",
            "sourceMap": "194:822:5:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2422:246:9;;;;;;;;;;-1:-1:-1;;;;;2422:246:9;;;;;;;912:102:5;;;;;;;;;;;;268:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3062:182:9;;;;;;;;;;-1:-1:-1;;;;;3062:182:9;;;;;1585:185;;;;;;;;;;-1:-1:-1;;;;;1585:185:9;;;;;1882:242;;;;;;;;;;;;724:100:5;;;;;;;;;;;;638:20:9;;;;;;;;;;;;;;;-1:-1:-1;;;;;638:20:9;;;;;;;;;;;;;;664:32;;;;;;;;;;;;2422:246;2529:16;1171:5;;1157:10;-1:-1:-1;;;;;1157:19:9;;;1171:5;;1157:19;1148:29;;;;;;-1:-1:-1;;;;;2501:16:9;;;;2493:25;;;;;;-1:-1:-1;2548:5:9;;;-1:-1:-1;;;;;2563:17:9;;;-1:-1:-1;;2563:17:9;;;;;;;;;;;2548:5;2590:23;;;;;;;2548:5;;;;2655;2548;2624:37;;;;;;;;;;2422:246;;:::o;912:102:5:-;1171:5:9;;1157:10;-1:-1:-1;;;;;1157:19:9;;;1171:5;;1157:19;1148:29;;;;;;614:6:5;;;;;;;606:15;;;;;;;;969:6;:14;;-1:-1:-1;;969:14:5;;;998:9;;;;;;;;;;912:102::o;268:26::-;;;;;;;;;:::o;3062:182:9:-;1171:5;;1157:10;-1:-1:-1;;;;;1157:19:9;;;1171:5;;1157:19;1148:29;;;;;;3144:5;-1:-1:-1;;;;;3136:13:9;;;3128:22;;;;;;3168:3;3160:11;;-1:-1:-1;;3160:11:9;;;;;;;3181:23;;;;;;;3214:18;;;;;;;;;;3062:182;:::o;1585:185::-;1171:5;;1157:10;-1:-1:-1;;;;;1157:19:9;;;1171:5;;1157:19;1148:29;;;;;;1666:17;:38;;-1:-1:-1;;1666:38:9;-1:-1:-1;;;;;1666:38:9;;;;;;;;;;;1745:17;;;;1733:10;1714:49;;;;;;;;;;;1585:185;:::o;1882:242::-;1948:17;;1977:16;;1934:10;-1:-1:-1;;;;;1934:31:9;;;1948:17;;1934:31;1926:40;;;;;;-1:-1:-1;1996:5:9;;;;2019:17;;-1:-1:-1;;2011:25:9;;;-1:-1:-1;;;;;2019:17:9;;;2011:25;;;;;;;;2046:23;;;;;1996:5;;;;2111;1996;2080:37;;;;;;;;;;1882:242;:::o;724:100:5:-;1171:5:9;;1157:10;-1:-1:-1;;;;;1157:19:9;;;1171:5;;1157:19;1148:29;;;;;;446:6:5;;;;;;;445:7;437:16;;;;;;791:4;782:13;;-1:-1:-1;;782:13:5;;;;;810:7;;;;;;;;;;724:100::o;638:20:9:-;;;-1:-1:-1;;;;;638:20:9;;:::o;664:32::-;;;-1:-1:-1;;;;;664:32:9;;:::o"
          },
          "methodIdentifiers": {
            "acceptOwnership()": "79ba5097",
            "changeOwnership(address)": "2af4c31e",
            "newOwnerCandidate()": "d091b550",
            "owner()": "8da5cb5b",
            "pause()": "8456cb59",
            "paused()": "5c975abb",
            "proposeOwnership(address)": "710bf322",
            "removeOwnership(address)": "666a3427",
            "unpause()": "3f4ba83a"
          }
        },
        "metadata": "{\"compiler\":{\"version\":\"0.4.21+commit.dfe3193c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dac\",\"type\":\"address\"}],\"name\":\"removeOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwnerCandidate\",\"type\":\"address\"}],\"name\":\"proposeOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwnerCandidate\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"by\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"OwnershipRemoved\",\"type\":\"event\"}],\"devdoc\":{\"methods\":{\"changeOwnership(address)\":{\"details\":\"In this 2nd option for ownership transfer `changeOwnership()` can  be called and it will immediately assign ownership to the `newOwner`\",\"params\":{\"_newOwner\":\"The address of the new owner\"}},\"pause()\":{\"details\":\"called by the owner to pause, triggers stopped state\"},\"proposeOwnership(address)\":{\"details\":\"In this 1st option for ownership transfer `proposeOwnership()` must  be called first by the current `owner` then `acceptOwnership()` must be  called by the `newOwnerCandidate`\",\"params\":{\"_newOwnerCandidate\":\"The address being proposed as the new owner\"}},\"removeOwnership(address)\":{\"details\":\"In this 3rd option for ownership transfer `removeOwnership()` can  be called and it will immediately assign ownership to the 0x0 address;  it requires a 0xdece be input as a parameter to prevent accidental use\",\"params\":{\"_dac\":\"`0xdac` has to be entered for this function to work\"}},\"unpause()\":{\"details\":\"called by the owner to unpause, returns to normal state\"}},\"title\":\"Pausable\"},\"userdoc\":{\"methods\":{\"acceptOwnership()\":{\"notice\":\"Can only be called by the `newOwnerCandidate`, accepts the  transfer of ownership\"},\"changeOwnership(address)\":{\"notice\":\"`owner` can step down and assign some other address to this role\"},\"proposeOwnership(address)\":{\"notice\":\"`onlyOwner` Proposes to transfer control of the contract to a  new owner\"},\"removeOwnership(address)\":{\"notice\":\"Decentralizes the contract, this operation cannot be undone \"}}}},\"settings\":{\"compilationTarget\":{\"./contracts/lib/Pausable.sol\":\"Pausable\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"./contracts/lib/Pausable.sol\":{\"content\":\"pragma solidity ^0.4.21;\\n\\nimport \\\"giveth-common-contracts/contracts/Owned.sol\\\";\\n\\n/**\\n * @title Pausable\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\n */\\ncontract Pausable is Owned {\\n    event Pause();\\n    event Unpause();\\n\\n    bool public paused = false;\\n\\n    /**\\n    * @dev Modifier to make a function callable only when the contract is not paused.\\n    */\\n    modifier whenNotPaused() {\\n        require(!paused);\\n        _;\\n    }\\n\\n    /**\\n    * @dev Modifier to make a function callable only when the contract is paused.\\n    */\\n    modifier whenPaused() {\\n        require(paused);\\n        _;\\n    }\\n\\n    /**\\n    * @dev called by the owner to pause, triggers stopped state\\n    */\\n    function pause() onlyOwner whenNotPaused public {\\n        paused = true;\\n        emit Pause();\\n    }\\n\\n    /**\\n    * @dev called by the owner to unpause, returns to normal state\\n    */\\n    function unpause() onlyOwner whenPaused public {\\n        paused = false;\\n        emit Unpause();\\n    }\\n}\",\"keccak256\":\"0xd134809350f024c16096d995915c6a348d770e1ec633723419f4f3acbd1e4b46\"},\"giveth-common-contracts/contracts/Owned.sol\":{\"content\":\"pragma solidity ^0.4.19;\\n\\n\\n/// @title Owned\\n/// @author Adrià Massanet <adria@codecontext.io>\\n/// @notice The Owned contract has an owner address, and provides basic \\n///  authorization control functions, this simplifies & the implementation of\\n///  user permissions; this contract has three work flows for a change in\\n///  ownership, the first requires the new owner to validate that they have the\\n///  ability to accept ownership, the second allows the ownership to be\\n///  directly transfered without requiring acceptance, and the third allows for\\n///  the ownership to be removed to allow for decentralization \\ncontract Owned {\\n\\n    address public owner;\\n    address public newOwnerCandidate;\\n\\n    event OwnershipRequested(address indexed by, address indexed to);\\n    event OwnershipTransferred(address indexed from, address indexed to);\\n    event OwnershipRemoved();\\n\\n    /// @dev The constructor sets the `msg.sender` as the`owner` of the contract\\n    function Owned() public {\\n        owner = msg.sender;\\n    }\\n\\n    /// @dev `owner` is the only address that can call a function with this\\n    /// modifier\\n    modifier onlyOwner() {\\n        require (msg.sender == owner);\\n        _;\\n    }\\n    \\n    /// @dev In this 1st option for ownership transfer `proposeOwnership()` must\\n    ///  be called first by the current `owner` then `acceptOwnership()` must be\\n    ///  called by the `newOwnerCandidate`\\n    /// @notice `onlyOwner` Proposes to transfer control of the contract to a\\n    ///  new owner\\n    /// @param _newOwnerCandidate The address being proposed as the new owner\\n    function proposeOwnership(address _newOwnerCandidate) public onlyOwner {\\n        newOwnerCandidate = _newOwnerCandidate;\\n        OwnershipRequested(msg.sender, newOwnerCandidate);\\n    }\\n\\n    /// @notice Can only be called by the `newOwnerCandidate`, accepts the\\n    ///  transfer of ownership\\n    function acceptOwnership() public {\\n        require(msg.sender == newOwnerCandidate);\\n\\n        address oldOwner = owner;\\n        owner = newOwnerCandidate;\\n        newOwnerCandidate = 0x0;\\n\\n        OwnershipTransferred(oldOwner, owner);\\n    }\\n\\n    /// @dev In this 2nd option for ownership transfer `changeOwnership()` can\\n    ///  be called and it will immediately assign ownership to the `newOwner`\\n    /// @notice `owner` can step down and assign some other address to this role\\n    /// @param _newOwner The address of the new owner\\n    function changeOwnership(address _newOwner) public onlyOwner {\\n        require(_newOwner != 0x0);\\n\\n        address oldOwner = owner;\\n        owner = _newOwner;\\n        newOwnerCandidate = 0x0;\\n\\n        OwnershipTransferred(oldOwner, owner);\\n    }\\n\\n    /// @dev In this 3rd option for ownership transfer `removeOwnership()` can\\n    ///  be called and it will immediately assign ownership to the 0x0 address;\\n    ///  it requires a 0xdece be input as a parameter to prevent accidental use\\n    /// @notice Decentralizes the contract, this operation cannot be undone \\n    /// @param _dac `0xdac` has to be entered for this function to work\\n    function removeOwnership(address _dac) public onlyOwner {\\n        require(_dac == 0xdac);\\n        owner = 0x0;\\n        newOwnerCandidate = 0x0;\\n        OwnershipRemoved();     \\n    }\\n} \\n\",\"keccak256\":\"0xc7d1401775fb1b41187de281757de68718fe27ba2660ba4bb194436aab7d0213\"}},\"version\":1}"
      }
    },
    "./contracts/lib/Vault.sol": {
      "Vault": {
        "abi": [
          {
            "constant": true,
            "inputs": [],
            "name": "maxSecurityGuardDelay",
            "outputs": [
              {
                "name": "",
                "type": "uint256"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_newTimeLock",
                "type": "uint256"
              }
            ],
            "name": "setTimelock",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "escapeHatchCaller",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_newOwner",
                "type": "address"
              }
            ],
            "name": "changeOwnership",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [],
            "name": "unpause",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_idPayment",
                "type": "uint256"
              }
            ],
            "name": "disburseAuthorizedPayment",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "paused",
            "outputs": [
              {
                "name": "",
                "type": "bool"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_dac",
                "type": "address"
              }
            ],
            "name": "removeOwnership",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "allowed",
                "type": "bool"
              }
            ],
            "name": "setAllowDisbursePaymentWhenPaused",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "numberOfAuthorizedPayments",
            "outputs": [
              {
                "name": "",
                "type": "uint256"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_newOwnerCandidate",
                "type": "address"
              }
            ],
            "name": "proposeOwnership",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_spender",
                "type": "address"
              },
              {
                "name": "_authorize",
                "type": "bool"
              }
            ],
            "name": "authorizeSpender",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [],
            "name": "acceptOwnership",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_idPayment",
                "type": "uint256"
              }
            ],
            "name": "cancelPayment",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [],
            "name": "pause",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_idPayment",
                "type": "uint256"
              },
              {
                "name": "_delay",
                "type": "uint256"
              }
            ],
            "name": "delayPayment",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "allowDisbursePaymentWhenPaused",
            "outputs": [
              {
                "name": "",
                "type": "bool"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_idPayments",
                "type": "uint256[]"
              }
            ],
            "name": "disburseAuthorizedPayments",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [
              {
                "name": "_token",
                "type": "address"
              }
            ],
            "name": "isTokenEscapable",
            "outputs": [
              {
                "name": "",
                "type": "bool"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "owner",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [
              {
                "name": "",
                "type": "uint256"
              }
            ],
            "name": "authorizedPayments",
            "outputs": [
              {
                "name": "name",
                "type": "string"
              },
              {
                "name": "reference",
                "type": "bytes32"
              },
              {
                "name": "spender",
                "type": "address"
              },
              {
                "name": "earliestPayTime",
                "type": "uint256"
              },
              {
                "name": "canceled",
                "type": "bool"
              },
              {
                "name": "paid",
                "type": "bool"
              },
              {
                "name": "recipient",
                "type": "address"
              },
              {
                "name": "token",
                "type": "address"
              },
              {
                "name": "amount",
                "type": "uint256"
              },
              {
                "name": "securityGuardDelay",
                "type": "uint256"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_token",
                "type": "address"
              }
            ],
            "name": "escapeHatch",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "securityGuard",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_newSecurityGuard",
                "type": "address"
              }
            ],
            "name": "setSecurityGuard",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "timeLock",
            "outputs": [
              {
                "name": "",
                "type": "uint256"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "newOwnerCandidate",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_newEscapeHatchCaller",
                "type": "address"
              }
            ],
            "name": "changeHatchEscapeCaller",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "name": "allowedSpenders",
            "outputs": [
              {
                "name": "",
                "type": "bool"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_maxSecurityGuardDelay",
                "type": "uint256"
              }
            ],
            "name": "setMaxSecurityGuardDelay",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "absoluteMinTimeLock",
            "outputs": [
              {
                "name": "",
                "type": "uint256"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_name",
                "type": "string"
              },
              {
                "name": "_reference",
                "type": "bytes32"
              },
              {
                "name": "_recipient",
                "type": "address"
              },
              {
                "name": "_token",
                "type": "address"
              },
              {
                "name": "_amount",
                "type": "uint256"
              },
              {
                "name": "_paymentDelay",
                "type": "uint256"
              }
            ],
            "name": "authorizePayment",
            "outputs": [
              {
                "name": "",
                "type": "uint256"
              }
            ],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "escapeHatchDestination",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "name": "_escapeHatchCaller",
                "type": "address"
              },
              {
                "name": "_escapeHatchDestination",
                "type": "address"
              },
              {
                "name": "_absoluteMinTimeLock",
                "type": "uint256"
              },
              {
                "name": "_timeLock",
                "type": "uint256"
              },
              {
                "name": "_securityGuard",
                "type": "address"
              },
              {
                "name": "_maxSecurityGuardDelay",
                "type": "uint256"
              }
            ],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "constructor"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "name": "idPayment",
                "type": "uint256"
              },
              {
                "indexed": true,
                "name": "recipient",
                "type": "address"
              },
              {
                "indexed": false,
                "name": "amount",
                "type": "uint256"
              },
              {
                "indexed": false,
                "name": "token",
                "type": "address"
              },
              {
                "indexed": false,
                "name": "reference",
                "type": "bytes32"
              }
            ],
            "name": "PaymentAuthorized",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "name": "idPayment",
                "type": "uint256"
              },
              {
                "indexed": true,
                "name": "recipient",
                "type": "address"
              },
              {
                "indexed": false,
                "name": "amount",
                "type": "uint256"
              },
              {
                "indexed": false,
                "name": "token",
                "type": "address"
              }
            ],
            "name": "PaymentExecuted",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "name": "idPayment",
                "type": "uint256"
              }
            ],
            "name": "PaymentCanceled",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "name": "spender",
                "type": "address"
              },
              {
                "indexed": false,
                "name": "authorized",
                "type": "bool"
              }
            ],
            "name": "SpenderAuthorization",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [],
            "name": "Pause",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [],
            "name": "Unpause",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": false,
                "name": "token",
                "type": "address"
              }
            ],
            "name": "EscapeHatchBlackistedToken",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": false,
                "name": "token",
                "type": "address"
              },
              {
                "indexed": false,
                "name": "amount",
                "type": "uint256"
              }
            ],
            "name": "EscapeHatchCalled",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "name": "by",
                "type": "address"
              },
              {
                "indexed": true,
                "name": "to",
                "type": "address"
              }
            ],
            "name": "OwnershipRequested",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "name": "from",
                "type": "address"
              },
              {
                "indexed": true,
                "name": "to",
                "type": "address"
              }
            ],
            "name": "OwnershipTransferred",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [],
            "name": "OwnershipRemoved",
            "type": "event"
          }
        ],
        "evm": {
          "bytecode": {
            "linkReferences": {},
            "object": "",
            "sourceMap": "1381:11095:6:-;;;268:26:5;;;-1:-1:-1;;268:26:5;;;4929:477:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;993:5:9;:18;;-1:-1:-1;;;;;1001:10:9;993:18;;-1:-1:-1;;;;;;993:18:9;;;;;;;2101:17:8;:38;;;;;;;;;;;;;;;2149:22;:48;;;;;;;;;;;;;;;5231:19:6;:42;;;;-1:-1:-1;;5283:8:6;:20;;;;5313:13;:30;;;;;;;;;;;;;;5353:21;:46;1381:11095;;;;;;"
          },
          "deployedBytecode": {
            "linkReferences": {},
            "object": "60606040526004361061017c5763ffffffff60e060020a6000350416630b2e742381146101815780631e891c0a146101a65780631f6eb6e7146101be5780632af4c31e146101ed5780633f4ba83a1461020c578063528924781461021f5780635c975abb14610235578063666a34271461025c578063672f412c1461027b57806368b8c5a114610293578063710bf322146102a6578063793c0fd4146102c557806379ba5097146102e95780638422927d146102fc5780638456cb5914610312578063846a5dde14610325578063859bcc711461033e578063863da00014610351578063892db057146103a05780638da5cb5b146103bf578063a0927a6a146103d2578063a142d608146104b6578063b2ca3ec4146104d5578063bb2a51d1146104e8578063d085835a14610507578063d091b5501461051a578063d836fbe81461052d578063d8528af01461054c578063da4793ac1461056b578063ea8a66c714610581578063f37b74ca14610594578063f5b61230146105ce575b600080fd5b341561018c57600080fd5b6101946105e1565b60405190815260200160405180910390f35b34156101b157600080fd5b6101bc6004356105e7565b005b34156101c957600080fd5b6101d1610616565b604051600160a060020a03909116815260200160405180910390f35b34156101f857600080fd5b6101bc600160a060020a0360043516610625565b341561021757600080fd5b6101bc6106b9565b341561022a57600080fd5b6101bc60043561071d565b341561024057600080fd5b61024861093e565b604051901515815260200160405180910390f35b341561026757600080fd5b6101bc600160a060020a0360043516610947565b341561028657600080fd5b6101bc60043515156109c4565b341561029e57600080fd5b610194610a03565b34156102b157600080fd5b6101bc600160a060020a0360043516610a0a565b34156102d057600080fd5b6101bc600160a060020a03600435166024351515610a7b565b34156102f457600080fd5b6101bc610af5565b341561030757600080fd5b6101bc600435610b75565b341561031d57600080fd5b6101bc610c29565b341561033057600080fd5b6101bc600435602435610c68565b341561034957600080fd5b610248610d1e565b341561035c57600080fd5b6101bc6004602481358181019083013580602081810201604051908101604052809392919081815260200183836020028082843750949650610d2795505050505050565b34156103ab57600080fd5b610248600160a060020a0360043516610d65565b34156103ca57600080fd5b6101d1610d84565b34156103dd57600080fd5b6103e8600435610d93565b604051602081018a9052600160a060020a03808a16604083015260608201899052871515608083015286151560a083015285811660c0830152841660e082015261010081018390526101208101829052610140808252819081018c818151815260200191508051906020019080838360005b8381101561047257808201518382015260200161045a565b50505050905090810190601f16801561049f5780820380516001836020036101000a031916815260200191505b509b50505050505050505050505060405180910390f35b34156104c157600080fd5b6101bc600160a060020a0360043516610ea7565b34156104e057600080fd5b6101d16110c8565b34156104f357600080fd5b6101bc600160a060020a03600435166110d7565b341561051257600080fd5b610194611114565b341561052557600080fd5b6101d161111a565b341561053857600080fd5b6101bc600160a060020a0360043516611129565b341561055757600080fd5b610248600160a060020a0360043516611181565b341561057657600080fd5b6101bc600435611196565b341561058c57600080fd5b6101946111b6565b341561059f57600080fd5b610194602460048035828101929101359035600160a060020a036044358116906064351660843560a4356111bc565b34156105d957600080fd5b6101d161136e565b600a5481565b60005433600160a060020a0390811691161461060257600080fd5b60085481101561061157600080fd5b600955565b600254600160a060020a031681565b6000805433600160a060020a0390811691161461064157600080fd5b600160a060020a038216151561065657600080fd5b5060008054600160a060020a03838116600160a060020a031980841691909117938490556001805490911690559081169116817f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60005433600160a060020a039081169116146106d457600080fd5b60055460ff1615156106e557600080fd5b6005805460ff191690557f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3360405160405180910390a1565b60055460009060ff1615806107345750600b5460ff165b151561073f57600080fd5b600654821061074d57600080fd5b600680548390811061075b57fe5b60009182526020808320600260089093020191820154600160a060020a03168352600c905260409091205490915060ff16151561079757600080fd5b80600301546107a461137d565b10156107af57600080fd5b600481015460ff16156107c157600080fd5b6004810154610100900460ff16156107d857600080fd5b60048101805461ff0019166101001790556005810154600160a060020a03161515610844576004810154600682015462010000909104600160a060020a0316906108fc81150290604051600060405180830381858888f19350505050151561083f57600080fd5b6108d2565b600581015460048201546006830154600160a060020a039283169263a9059cbb92620100009004169060405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b15156108b057600080fd5b5af115156108bd57600080fd5b5050506040518051905015156108d257600080fd5b600481015460068201546005830154600160a060020a036201000090930483169285927f354f3c0c8efabe1a1a07cf222842b008ef284ac185e63bdf8245be8cd2d97f5192909116604051918252600160a060020a031660208201526040908101905180910390a35050565b60055460ff1681565b60005433600160a060020a0390811691161461096257600080fd5b610dac600160a060020a0382161461097957600080fd5b60008054600160a060020a03199081169091556001805490911690557f94e8b32e01b9eedfddd778ffbd051a7718cdc14781702884561162dca6f74dbb60405160405180910390a150565b60005433600160a060020a039081169116146109df57600080fd5b60055460ff1615156109f057600080fd5b600b805460ff1916911515919091179055565b6006545b90565b60005433600160a060020a03908116911614610a2557600080fd5b60018054600160a060020a031916600160a060020a0383811691909117918290559081169033167f13a4b3bc0d5234dd3d87c9f1557d8faefa37986da62c36ba49309e2fb2c9aec460405160405180910390a350565b60005433600160a060020a03908116911614610a9657600080fd5b600160a060020a0382166000818152600c602052604090819020805460ff19168415151790557f801f568efbc3346a6ae3d0c3eb335a30d64e0d3cf08f1c39626d62cd5c82728190839051901515815260200160405180910390a25050565b60015460009033600160a060020a03908116911614610b1357600080fd5b506000805460018054600160a060020a0319808416600160a060020a03838116919091179586905591169091559081169116817f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a350565b6000805433600160a060020a03908116911614610b9157600080fd5b6006548210610b9f57600080fd5b6006805483908110610bad57fe5b60009182526020909120600890910201600481015490915060ff1615610bd257600080fd5b6004810154610100900460ff1615610be957600080fd5b60048101805460ff19166001179055817ffdf197ed54809861dafe0b4d391843652730ac67274c1e9e46db7687dccaa30160405160405180910390a25050565b60005433600160a060020a03908116911614610c4457600080fd5b60055460ff1615610c5457600080fd5b600b805460ff19169055610c66611381565b565b60075460009033600160a060020a03908116911614610c8657600080fd5b6006548310610c9457600080fd5b670de0b6b3a7640000821115610ca957600080fd5b6006805484908110610cb757fe5b90600052602060002090600802019050600a548282600701540111151515610cde57600080fd5b6004810154610100900460ff1615610cf557600080fd5b600481015460ff1615610d0757600080fd5b600781018054830190556003018054909101905550565b600b5460ff1681565b6000805b8251821015610d6057828281518110610d4057fe5b906020019060200201519050610d558161071d565b600190910190610d2b565b505050565b600160a060020a031660009081526004602052604090205460ff161590565b600054600160a060020a031681565b6006805482908110610da157fe5b9060005260206000209060080201600091509050806000018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610e4d5780601f10610e2257610100808354040283529160200191610e4d565b820191906000526020600020905b815481529060010190602001808311610e3057829003601f168201915b5050505060018301546002840154600385015460048601546005870154600688015460079098015496979496600160a060020a039485169650929460ff80841695610100850490911694620100009094048116939216918a565b600254600090819033600160a060020a0390811691161480610ed7575060005433600160a060020a039081169116145b1515610ee257600080fd5b600160a060020a03831660009081526004602052604090205460ff1615610f0857600080fd5b600160a060020a0383161515610f9a57600354600160a060020a033081163193501682156108fc0283604051600060405180830381858888f193505050501515610f5157600080fd5b7fa50dde912fa22ea0d215a0236093ac45b4d55d6ef0c604c319f900029c5d10f28383604051600160a060020a03909216825260208201526040908101905180910390a1610d60565b5081600160a060020a0381166370a082313060405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b1515610fea57600080fd5b5af11515610ff757600080fd5b5050506040518051600354909350600160a060020a03808416925063a9059cbb91168460405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151561105d57600080fd5b5af1151561106a57600080fd5b50505060405180519050151561107f57600080fd5b7fa50dde912fa22ea0d215a0236093ac45b4d55d6ef0c604c319f900029c5d10f28383604051600160a060020a03909216825260208201526040908101905180910390a1505050565b600754600160a060020a031681565b60005433600160a060020a039081169116146110f257600080fd5b60078054600160a060020a031916600160a060020a0392909216919091179055565b60095481565b600154600160a060020a031681565b60025433600160a060020a0390811691161480611154575060005433600160a060020a039081169116145b151561115f57600080fd5b60028054600160a060020a031916600160a060020a0392909216919091179055565b600c6020526000908152604090205460ff1681565b60005433600160a060020a039081169116146111b157600080fd5b600a55565b60085481565b6005546000908190819060ff16156111d357600080fd5b600160a060020a0333166000908152600c602052604090205460ff1615156111fa57600080fd5b600680549250829061120f90600183016113e7565b50600680548390811061121e57fe5b60009182526020909120600890910201600281018054600160a060020a03191633600160a060020a03161790559050670de0b6b3a764000084111561126257600080fd5b60095484101561127d5760095461127761137d565b01611288565b8361128661137d565b015b600382015560048101805475ffffffffffffffffffffffffffffffffffffffff0000191662010000600160a060020a038a1602179055600681018590556112d0818b8b611413565b5060018101889055600581018054600160a060020a031916600160a060020a038881169190911791829055600483015460068401546201000090910482169285927fd11935115aa93b9f1f616d0d7702f4593572daa610390123241b3785430281c49291168c604051928352600160a060020a0390911660208301526040808301919091526060909101905180910390a35098975050505050505050565b600354600160a060020a031681565b4290565b60005433600160a060020a0390811691161461139c57600080fd5b60055460ff16156113ac57600080fd5b6005805460ff191660011790557f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62560405160405180910390a1565b815481835581811511610d6057600802816008028360005260206000209182019101610d609190611491565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106114545782800160ff19823516178555611481565b82800160010185558215611481579182015b82811115611481578235825591602001919060010190611466565b5061148d929150611511565b5090565b610a0791905b8082111561148d5760006114ab828261152b565b50600060018201819055600282018054600160a060020a03199081169091556003830182905560048301805475ffffffffffffffffffffffffffffffffffffffffffff191690556005830180549091169055600682018190556007820155600801611497565b610a0791905b8082111561148d5760008155600101611517565b50805460018160011615610100020316600290046000825580601f10611551575061156f565b601f01602090049060005260206000209081019061156f9190611511565b505600a165627a7a723058201ae29de1319b34b600be754cad15e48de8c52164dfcd63fd01a7b042495230cf0029",
            "sourceMap": "1381:11095:6:-;;;;;;;;;-1:-1:-1;;;1381:11095:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2486:33;;;;;;;;;;;;;;;;;;;;;;;;;;;10982:153;;;;;;;;;;;;;;;;1181:32:8;;;;;;;;;;;;;;;-1:-1:-1;;;;;1181:32:8;;;;;;;;;;;;;;2422:246:9;;;;;;;;;;-1:-1:-1;;;;;2422:246:9;;;;;912:102:5;;;;;;;;;;;;7685:822:6;;;;;;;;;;;;;;268:26:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3062:182:9;;;;;;;;;;-1:-1:-1;;;;;3062:182:9;;;;;12212:142:6;;;;;;;;;;;;;;;;5615:114;;;;;;;;;;;;1585:185:9;;;;;;;;;;-1:-1:-1;;;;;1585:185:9;;;;;10267:192:6;;;;;;;;;;-1:-1:-1;;;;;10267:192:6;;;;;;;;;1882:242:9;;;;;;;;;;;;9710:311:6;;;;;;;;;;;;;;11688:126;;;;;;;;;;;;9076:473;;;;;;;;;;;;;;;;2525:42;;;;;;;;;;;;8585:233;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;8585:233:6;;-1:-1:-1;8585:233:6;;-1:-1:-1;;;;;;8585:233:6;3215:117:8;;;;;;;;;;-1:-1:-1;;;;;3215:117:8;;;;;638:20:9;;;;;;;;;;;;2347:35:6;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2347:35:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;2347:35:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3540:611:8;;;;;;;;;;-1:-1:-1;;;;;3540:611:8;;;;;2389:28:6;;;;;;;;;;;;10596:122;;;;;;;;;;-1:-1:-1;;;;;10596:122:6;;;;;2460:20;;;;;;;;;;;;664:32:9;;;;;;;;;;;;4520:158:8;;;;;;;;;;-1:-1:-1;;;;;4520:158:8;;;;;2687:48:6;;;;;;;;;;-1:-1:-1;;;;;2687:48:6;;;;;11395:145;;;;;;;;;;;;;;2423:31;;;;;;;;;;;;6304:1195;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;6304:1195:6;;;;;;;;;;;;;;1219:37:8;;;;;;;;;;;;2486:33:6;;;;:::o;10982:153::-;1171:5:9;;1157:10;-1:-1:-1;;;;;1157:19:9;;;1171:5;;1157:19;1148:29;;;;;;11075:19:6;;11059:35;;;11051:44;;;;;;11105:8;:23;10982:153::o;1181:32:8:-;;;-1:-1:-1;;;;;1181:32:8;;:::o;2422:246:9:-;2529:16;1171:5;;1157:10;-1:-1:-1;;;;;1157:19:9;;;1171:5;;1157:19;1148:29;;;;;;-1:-1:-1;;;;;2501:16:9;;;;2493:25;;;;;;-1:-1:-1;2548:5:9;;;-1:-1:-1;;;;;2563:17:9;;;-1:-1:-1;;;;;;2563:17:9;;;;;;;;;;;2548:5;2590:23;;;;;;;2548:5;;;;2655;2548;2624:37;;;;;;;;;;2422:246;;:::o;912:102:5:-;1171:5:9;;1157:10;-1:-1:-1;;;;;1157:19:9;;;1171:5;;1157:19;1148:29;;;;;;614:6:5;;;;606:15;;;;;;;;969:6;:14;;-1:-1:-1;;969:14:5;;;998:9;;;;;;;;;;912:102::o;7685:822:6:-;3669:6;;7910:17;;3669:6;;3668:7;;:41;;-1:-1:-1;3679:30:6;;;;3668:41;3660:50;;;;;;;;7873:18;:25;7860:38;;7852:47;;;;;;7930:18;:30;;7949:10;;7930:30;;;;;;;;;;;;;;8054:9;7930:30;;;;;8054:9;;;;-1:-1:-1;;;;;8054:9:6;8038:26;;:15;:26;;;;;;;7930:30;;-1:-1:-1;8038:26:6;;8030:35;;;;;;;;8097:1;:17;;;8083:10;:8;:10::i;:::-;:31;;8075:40;;;;;;8134:10;;;;;;8133:11;8125:20;;;;;;8164:6;;;;;;;;;8163:7;8155:16;;;;;;8182:6;;;:13;;-1:-1:-1;;8182:13:6;;;;;8271:7;;;;-1:-1:-1;;;;;8271:7:6;:12;8267:159;;;8299:11;;;;8320:8;;;;8299:11;;;;-1:-1:-1;;;;;8299:11:6;;:30;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8267:159;;;8374:7;;;;8392:11;;;;8405:8;;;;-1:-1:-1;;;;;8374:7:6;;;;8368:23;;8392:11;;;;;8368:46;;-1:-1:-1;;;8368:46:6;;;;;;-1:-1:-1;;;;;8368:46:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8360:55;;;;;;;;8469:11;;;;8482:8;;;;8492:7;;;;-1:-1:-1;;;;;8469:11:6;;;;;;;8457:10;;8441:59;;8482:8;;8492:7;8441:59;;;;;-1:-1:-1;;;;;8441:59:6;;;;;;;;;;;;;;;;7685:822;;:::o;268:26:5:-;;;;;;:::o;3062:182:9:-;1171:5;;1157:10;-1:-1:-1;;;;;1157:19:9;;;1171:5;;1157:19;1148:29;;;;;;3144:5;-1:-1:-1;;;;;3136:13:9;;;3128:22;;;;;;3168:3;3160:11;;-1:-1:-1;;;;;;3160:11:9;;;;;;;3181:23;;;;;;;3214:18;;;;;;;;;;3062:182;:::o;12212:142:6:-;1171:5:9;;1157:10;-1:-1:-1;;;;;1157:19:9;;;1171:5;;1157:19;1148:29;;;;;;614:6:5;;;;606:15;;;;;;;;12307:30:6;:40;;-1:-1:-1;;12307:40:6;;;;;;;;;;12212:142::o;5615:114::-;5697:18;:25;5615:114;;:::o;1585:185:9:-;1171:5;;1157:10;-1:-1:-1;;;;;1157:19:9;;;1171:5;;1157:19;1148:29;;;;;;1666:17;:38;;-1:-1:-1;;;;;;1666:38:9;-1:-1:-1;;;;;1666:38:9;;;;;;;;;;;1745:17;;;;1733:10;1714:49;;;;;;;;;;;1585:185;:::o;10267:192:6:-;1171:5:9;;1157:10;-1:-1:-1;;;;;1157:19:9;;;1171:5;;1157:19;1148:29;;;;;;-1:-1:-1;;;;;10357:25:6;;;;;;:15;:25;;;;;;;:38;;-1:-1:-1;;10357:38:6;;;;;;;10410:42;;10357:38;;10410:42;;;;;;;;;;;;;;;10267:192;;:::o;1882:242:9:-;1948:17;;1977:16;;1934:10;-1:-1:-1;;;;;1934:31:9;;;1948:17;;1934:31;1926:40;;;;;;-1:-1:-1;1996:5:9;;;;2019:17;;-1:-1:-1;;;;;;2011:25:9;;;-1:-1:-1;;;;;2019:17:9;;;2011:25;;;;;;;;2046:23;;;;;1996:5;;;;2111;1996;2080:37;;;;;;;;;;1882:242;:::o;9710:311:6:-;9837:17;1171:5:9;;1157:10;-1:-1:-1;;;;;1157:19:9;;;1171:5;;1157:19;1148:29;;;;;;9800:18:6;:25;9787:38;;9779:47;;;;;;9857:18;:30;;9876:10;;9857:30;;;;;;;;;;;;;;;;;;;9907:10;;;;9857:30;;-1:-1:-1;9907:10:6;;9906:11;9898:20;;;;;;9937:6;;;;;;;;;9936:7;9928:16;;;;;;9955:10;;;:17;;-1:-1:-1;;9955:17:6;9968:4;9955:17;;;10003:10;9987:27;;;;;;;;;;9710:311;;:::o;11688:126::-;1171:5:9;;1157:10;-1:-1:-1;;;;;1157:19:9;;;1171:5;;1157:19;1148:29;;;;;;446:6:5;;;;445:7;437:16;;;;;;11746:30:6;:38;;-1:-1:-1;;11746:38:6;;;11794:13;:11;:13::i;:::-;11688:126::o;9076:473::-;3378:13;;9284:17;;3364:10;-1:-1:-1;;;;;3364:27:6;;;3378:13;;3364:27;3356:36;;;;;;9186:18;:25;9173:38;;9165:47;;;;;;9266:6;9256:16;;;9248:25;;;;;;9304:18;:30;;9323:10;;9304:30;;;;;;;;;;;;;;;;9284:50;;9386:21;;9376:6;9353:1;:20;;;:29;:54;;9345:63;;;;;;;;9427:6;;;;;;;;;9426:7;9418:16;;;;;;9453:10;;;;;;9452:11;9444:20;;;;;;9475;;;:30;;;;;;9515:17;;:27;;;;;;;-1:-1:-1;9076:473:6:o;2525:42::-;;;;;;:::o;8585:233::-;8663:6;;8658:154;8679:11;:18;8675:1;:22;8658:154;;;8736:11;8748:1;8736:14;;;;;;;;;;;;;;;;8718:32;;8764:37;8790:10;8764:25;:37::i;:::-;8699:3;;;;;8658:154;;;8585:233;;;:::o;3215:117:8:-;-1:-1:-1;;;;;3302:23:8;3278:4;3302:23;;;:15;:23;;;;;;;;3301:24;;3215:117::o;638:20:9:-;;;-1:-1:-1;;;;;638:20:9;;:::o;2347:35:6:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;2347:35:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2347:35:6;;;;-1:-1:-1;2347:35:6;;;;;;;;;;;;;;;;;;;;;;;;;:::o;3540:611:8:-;2431:17;;3676:15;;;;2417:10;-1:-1:-1;;;;;2417:31:8;;;2431:17;;2417:31;;2416:56;;-1:-1:-1;2466:5:8;;2452:10;-1:-1:-1;;;;;2452:19:8;;;2466:5;;2452:19;2416:56;2407:66;;;;;;;;-1:-1:-1;;;;;3634:23:8;;;;;;:15;:23;;;;;;;;:30;3626:39;;;;;;-1:-1:-1;;;;;3739:13:8;;;3735:188;;;3804:22;;-1:-1:-1;;;;;3778:4:8;:12;;;;-1:-1:-1;3804:22:8;:40;;;;3778:12;3804:40;;;;;;;;;;;;;;;;;;;;;;;;;;3858:34;3876:6;3884:7;3858:34;;-1:-1:-1;;;;;3858:34:8;;;;;;;;;;;;;;;;;;;;3906:7;;3735:188;-1:-1:-1;3986:6:8;-1:-1:-1;;;;;4013:15:8;;;4029:4;4013:21;;-1:-1:-1;;;4013:21:8;;;;;;-1:-1:-1;;;;;4013:21:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4067:22;;4013:21;;-1:-1:-1;;;;;;4052:14:8;;;;-1:-1:-1;4052:14:8;;4067:22;4013:21;4052:47;;-1:-1:-1;;;4052:47:8;;;;;;-1:-1:-1;;;;;4052:47:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4044:56;;;;;;;;4110:34;4128:6;4136:7;4110:34;;-1:-1:-1;;;;;4110:34:8;;;;;;;;;;;;;;;;;;;;3540:611;;;:::o;2389:28:6:-;;;-1:-1:-1;;;;;2389:28:6;;:::o;10596:122::-;1171:5:9;;1157:10;-1:-1:-1;;;;;1157:19:9;;;1171:5;;1157:19;1148:29;;;;;;10678:13:6;:33;;-1:-1:-1;;;;;;10678:33:6;-1:-1:-1;;;;;10678:33:6;;;;;;;;;;10596:122::o;2460:20::-;;;;:::o;664:32:9:-;;;-1:-1:-1;;;;;664:32:9;;:::o;4520:158:8:-;2431:17;;2417:10;-1:-1:-1;;;;;2417:31:8;;;2431:17;;2417:31;;2416:56;;-1:-1:-1;2466:5:8;;2452:10;-1:-1:-1;;;;;2452:19:8;;;2466:5;;2452:19;2416:56;2407:66;;;;;;;;4630:17;:41;;-1:-1:-1;;;;;;4630:41:8;-1:-1:-1;;;;;4630:41:8;;;;;;;;;;4520:158::o;2687:48:6:-;;;;;;;;;;;;;;;:::o;11395:145::-;1171:5:9;;1157:10;-1:-1:-1;;;;;1157:19:9;;;1171:5;;1157:19;1148:29;;;;;;11487:21:6;:46;11395:145::o;2423:31::-;;;;:::o;6304:1195::-;446:6:5;;6519:4:6;;;;;;446:6:5;;445:7;437:16;;;;;;-1:-1:-1;;;;;6625:10:6;6609:27;;;;;:15;:27;;;;;;;;6601:36;;;;;;;;6664:18;:25;;;-1:-1:-1;6664:25:6;;6726:27;;;;;;:::i;:::-;-1:-1:-1;6843:18:6;:29;;6862:9;;6843:29;;;;;;;;;;;;;;;;;;;6882:9;;;:22;;-1:-1:-1;;;;;;6882:22:6;6894:10;-1:-1:-1;;;;;6882:22:6;;;;6843:29;-1:-1:-1;6971:6:6;6954:23;;;6946:32;;;;;;7107:8;;7090:13;:25;;:142;;7224:8;;7211:10;:8;:10::i;:::-;:21;7090:142;;;7163:13;7150:10;:8;:10::i;:::-;:26;7090:142;7070:17;;;:162;7242:11;;;:24;;-1:-1:-1;;7242:24:6;;-1:-1:-1;;;;;7242:24:6;;;;;;7276:8;;;:18;;;7304:14;7070:17;7313:5;;7304:14;:::i;:::-;-1:-1:-1;7328:11:6;;;:24;;;7362:7;;;:16;;-1:-1:-1;;;;;;7362:16:6;-1:-1:-1;;;;;7362:16:6;;;;;;;;;;;7422:11;;;;7435:8;;;;7422:11;;;;;;;7411:9;;7393:73;;7435:8;7445:7;7328:24;7393:73;;;;;-1:-1:-1;;;;;7393:73:6;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;7483:9:6;6304:1195;-1:-1:-1;;;;;;;;6304:1195:6:o;1219:37:8:-;;;-1:-1:-1;;;;;1219:37:8;;:::o;12397:76:6:-;12463:3;12397:76;:::o;724:100:5:-;1171:5:9;;1157:10;-1:-1:-1;;;;;1157:19:9;;;1171:5;;1157:19;1148:29;;;;;;446:6:5;;;;445:7;437:16;;;;;;782:6;:13;;-1:-1:-1;;782:13:5;791:4;782:13;;;810:7;;;;;;;;;;724:100::o;1381:11095:6:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1381:11095:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1381:11095:6;;;-1:-1:-1;1381:11095:6;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;1381:11095:6;;;;;;;;;;;;-1:-1:-1;;;;;;1381:11095:6;;;;;;;;;;;;;;;;;-1:-1:-1;;1381:11095:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::o"
          },
          "methodIdentifiers": {
            "absoluteMinTimeLock()": "ea8a66c7",
            "acceptOwnership()": "79ba5097",
            "allowDisbursePaymentWhenPaused()": "859bcc71",
            "allowedSpenders(address)": "d8528af0",
            "authorizePayment(string,bytes32,address,address,uint256,uint256)": "f37b74ca",
            "authorizeSpender(address,bool)": "793c0fd4",
            "authorizedPayments(uint256)": "a0927a6a",
            "cancelPayment(uint256)": "8422927d",
            "changeHatchEscapeCaller(address)": "d836fbe8",
            "changeOwnership(address)": "2af4c31e",
            "delayPayment(uint256,uint256)": "846a5dde",
            "disburseAuthorizedPayment(uint256)": "52892478",
            "disburseAuthorizedPayments(uint256[])": "863da000",
            "escapeHatch(address)": "a142d608",
            "escapeHatchCaller()": "1f6eb6e7",
            "escapeHatchDestination()": "f5b61230",
            "isTokenEscapable(address)": "892db057",
            "maxSecurityGuardDelay()": "0b2e7423",
            "newOwnerCandidate()": "d091b550",
            "numberOfAuthorizedPayments()": "68b8c5a1",
            "owner()": "8da5cb5b",
            "pause()": "8456cb59",
            "paused()": "5c975abb",
            "proposeOwnership(address)": "710bf322",
            "removeOwnership(address)": "666a3427",
            "securityGuard()": "b2ca3ec4",
            "setAllowDisbursePaymentWhenPaused(bool)": "672f412c",
            "setMaxSecurityGuardDelay(uint256)": "da4793ac",
            "setSecurityGuard(address)": "bb2a51d1",
            "setTimelock(uint256)": "1e891c0a",
            "timeLock()": "d085835a",
            "unpause()": "3f4ba83a"
          }
        },
        "metadata": "{\"compiler\":{\"version\":\"0.4.21+commit.dfe3193c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[],\"name\":\"maxSecurityGuardDelay\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newTimeLock\",\"type\":\"uint256\"}],\"name\":\"setTimelock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"escapeHatchCaller\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_idPayment\",\"type\":\"uint256\"}],\"name\":\"disburseAuthorizedPayment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dac\",\"type\":\"address\"}],\"name\":\"removeOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"setAllowDisbursePaymentWhenPaused\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numberOfAuthorizedPayments\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwnerCandidate\",\"type\":\"address\"}],\"name\":\"proposeOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_authorize\",\"type\":\"bool\"}],\"name\":\"authorizeSpender\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_idPayment\",\"type\":\"uint256\"}],\"name\":\"cancelPayment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_idPayment\",\"type\":\"uint256\"},{\"name\":\"_delay\",\"type\":\"uint256\"}],\"name\":\"delayPayment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allowDisbursePaymentWhenPaused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_idPayments\",\"type\":\"uint256[]\"}],\"name\":\"disburseAuthorizedPayments\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"isTokenEscapable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"authorizedPayments\",\"outputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"reference\",\"type\":\"bytes32\"},{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"earliestPayTime\",\"type\":\"uint256\"},{\"name\":\"canceled\",\"type\":\"bool\"},{\"name\":\"paid\",\"type\":\"bool\"},{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"securityGuardDelay\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"escapeHatch\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"securityGuard\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newSecurityGuard\",\"type\":\"address\"}],\"name\":\"setSecurityGuard\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"timeLock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwnerCandidate\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newEscapeHatchCaller\",\"type\":\"address\"}],\"name\":\"changeHatchEscapeCaller\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowedSpenders\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_maxSecurityGuardDelay\",\"type\":\"uint256\"}],\"name\":\"setMaxSecurityGuardDelay\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"absoluteMinTimeLock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_reference\",\"type\":\"bytes32\"},{\"name\":\"_recipient\",\"type\":\"address\"},{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_paymentDelay\",\"type\":\"uint256\"}],\"name\":\"authorizePayment\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"escapeHatchDestination\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_escapeHatchCaller\",\"type\":\"address\"},{\"name\":\"_escapeHatchDestination\",\"type\":\"address\"},{\"name\":\"_absoluteMinTimeLock\",\"type\":\"uint256\"},{\"name\":\"_timeLock\",\"type\":\"uint256\"},{\"name\":\"_securityGuard\",\"type\":\"address\"},{\"name\":\"_maxSecurityGuardDelay\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"idPayment\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"reference\",\"type\":\"bytes32\"}],\"name\":\"PaymentAuthorized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"idPayment\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"}],\"name\":\"PaymentExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"idPayment\",\"type\":\"uint256\"}],\"name\":\"PaymentCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"authorized\",\"type\":\"bool\"}],\"name\":\"SpenderAuthorization\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"}],\"name\":\"EscapeHatchBlackistedToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EscapeHatchCalled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"by\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"OwnershipRemoved\",\"type\":\"event\"}],\"devdoc\":{\"methods\":{\"authorizePayment(string,bytes32,address,address,uint256,uint256)\":{\"params\":{\"_amount\":\"Amount to be paid in wei\",\"_name\":\"Brief description of the payment that is authorized\",\"_paymentDelay\":\"Number of seconds the payment is to be delayed, if  this value is below `timeLock` then the `timeLock` determines the delay\",\"_recipient\":\"Destination of the payment\",\"_reference\":\"External reference of the payment\"},\"return\":\"The Payment ID number for the new authorized payment\"},\"authorizeSpender(address,bool)\":{\"params\":{\"_authorize\":\"`true` if authorizing and `false` if unauthorizing\",\"_spender\":\"The address of the contract being authorized/unauthorized\"}},\"cancelPayment(uint256)\":{\"params\":{\"_idPayment\":\"ID of the payment to be canceled.\"}},\"changeHatchEscapeCaller(address)\":{\"params\":{\"_newEscapeHatchCaller\":\"The address of a trusted account or  contract to call `escapeHatch()` to send the value in this contract to  the `escapeHatchDestination`; it would be ideal that `escapeHatchCaller`  cannot move funds out of `escapeHatchDestination`\"}},\"changeOwnership(address)\":{\"details\":\"In this 2nd option for ownership transfer `changeOwnership()` can  be called and it will immediately assign ownership to the `newOwner`\",\"params\":{\"_newOwner\":\"The address of the new owner\"}},\"delayPayment(uint256,uint256)\":{\"params\":{\"_delay\":\"The number of seconds to delay the payment\",\"_idPayment\":\"ID of the payment to be delayed\"}},\"disburseAuthorizedPayment(uint256)\":{\"params\":{\"_idPayment\":\"The payment ID to be executed\"}},\"escapeHatch(address)\":{\"params\":{\"_token\":\"to transfer, use 0x0 for ether\"}},\"isTokenEscapable(address)\":{\"params\":{\"_token\":\"the token address being queried\"},\"return\":\"False if `_token` is in the blacklist and can't be taken out of  the contract via the `escapeHatch()`\"},\"numberOfAuthorizedPayments()\":{\"return\":\"The number of payments ever authorized even if they were canceled\"},\"pause()\":{\"details\":\"called by the owner to pause the contract. Triggers a stopped state   and resets allowDisbursePaymentWhenPaused to false\"},\"proposeOwnership(address)\":{\"details\":\"In this 1st option for ownership transfer `proposeOwnership()` must  be called first by the current `owner` then `acceptOwnership()` must be  called by the `newOwnerCandidate`\",\"params\":{\"_newOwnerCandidate\":\"The address being proposed as the new owner\"}},\"removeOwnership(address)\":{\"details\":\"In this 3rd option for ownership transfer `removeOwnership()` can  be called and it will immediately assign ownership to the 0x0 address;  it requires a 0xdece be input as a parameter to prevent accidental use\",\"params\":{\"_dac\":\"`0xdac` has to be entered for this function to work\"}},\"setAllowDisbursePaymentWhenPaused(bool)\":{\"details\":\"only callable whenPaused b/c pausing the contract will reset `allowDisbursePaymentWhenPaused` to false\",\"params\":{\"allowed\":\"`true` if allowing payments to be disbursed when paused, otherwise 'false'\"}},\"setMaxSecurityGuardDelay(uint256)\":{\"params\":{\"_maxSecurityGuardDelay\":\"The new maximum delay in seconds that  `securityGuard` can delay the payment's execution in total\"}},\"setSecurityGuard(address)\":{\"params\":{\"_newSecurityGuard\":\"Address of the new security guard\"}},\"setTimelock(uint256)\":{\"params\":{\"_newTimeLock\":\"Sets the new minimum default `timeLock` in seconds;  pending payments maintain their `earliestPayTime`\"}},\"unpause()\":{\"details\":\"called by the owner to unpause, returns to normal state\"}}},\"userdoc\":{\"methods\":{\"acceptOwnership()\":{\"notice\":\"Can only be called by the `newOwnerCandidate`, accepts the  transfer of ownership\"},\"authorizePayment(string,bytes32,address,address,uint256,uint256)\":{\"notice\":\"/////only `allowedSpenders[]` Creates a new `Payment`\"},\"authorizeSpender(address,bool)\":{\"notice\":\"`onlyOwner` Adds a spender to the `allowedSpenders[]` white list\"},\"cancelPayment(uint256)\":{\"notice\":\"////`onlyOwner` Cancel a payment all together\"},\"changeHatchEscapeCaller(address)\":{\"notice\":\"Changes the address assigned to call `escapeHatch()`\"},\"changeOwnership(address)\":{\"notice\":\"`owner` can step down and assign some other address to this role\"},\"delayPayment(uint256,uint256)\":{\"notice\":\"//////`onlySecurityGuard` Delays a payment for a set number of seconds\"},\"disburseAuthorizedPayment(uint256)\":{\"notice\":\"Anyone can call this function to disburse the payment to   the recipient after `earliestPayTime` has passed\"},\"disburseAuthorizedPayments(uint256[])\":{\"notice\":\"convience function to disburse multiple payments in a single tx\"},\"escapeHatch(address)\":{\"notice\":\"The `escapeHatch()` should only be called as a last resort if a security issue is uncovered or something unexpected happened\"},\"isTokenEscapable(address)\":{\"notice\":\"Checks to see if `_token` is in the blacklist of tokens\"},\"numberOfAuthorizedPayments()\":{\"notice\":\"//////States the total number of authorized payments in this contract\"},\"proposeOwnership(address)\":{\"notice\":\"`onlyOwner` Proposes to transfer control of the contract to a  new owner\"},\"removeOwnership(address)\":{\"notice\":\"Decentralizes the contract, this operation cannot be undone \"},\"setAllowDisbursePaymentWhenPaused(bool)\":{\"notice\":\"Owner can allow payment disbursement when the contract is paused. This is so the bridge can be upgraded without having to migrate any existing authorizedPayments\"},\"setMaxSecurityGuardDelay(uint256)\":{\"notice\":\"`onlyOwner` Changes the maximum number of seconds `securityGuard` can delay a payment\"},\"setSecurityGuard(address)\":{\"notice\":\"`onlyOwner` Sets the address of `securityGuard`\"},\"setTimelock(uint256)\":{\"notice\":\"`onlyOwner` Changes `timeLock`; the new `timeLock` cannot be  lower than `absoluteMinTimeLock`\"}}}},\"settings\":{\"compilationTarget\":{\"./contracts/lib/Vault.sol\":\"Vault\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"./contracts/lib/Pausable.sol\":{\"content\":\"pragma solidity ^0.4.21;\\n\\nimport \\\"giveth-common-contracts/contracts/Owned.sol\\\";\\n\\n/**\\n * @title Pausable\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\n */\\ncontract Pausable is Owned {\\n    event Pause();\\n    event Unpause();\\n\\n    bool public paused = false;\\n\\n    /**\\n    * @dev Modifier to make a function callable only when the contract is not paused.\\n    */\\n    modifier whenNotPaused() {\\n        require(!paused);\\n        _;\\n    }\\n\\n    /**\\n    * @dev Modifier to make a function callable only when the contract is paused.\\n    */\\n    modifier whenPaused() {\\n        require(paused);\\n        _;\\n    }\\n\\n    /**\\n    * @dev called by the owner to pause, triggers stopped state\\n    */\\n    function pause() onlyOwner whenNotPaused public {\\n        paused = true;\\n        emit Pause();\\n    }\\n\\n    /**\\n    * @dev called by the owner to unpause, returns to normal state\\n    */\\n    function unpause() onlyOwner whenPaused public {\\n        paused = false;\\n        emit Unpause();\\n    }\\n}\",\"keccak256\":\"0xd134809350f024c16096d995915c6a348d770e1ec633723419f4f3acbd1e4b46\"},\"./contracts/lib/Vault.sol\":{\"content\":\"pragma solidity ^0.4.21;\\n\\n/*\\n    Copyright 2018, Jordi Baylina, RJ Ewing\\n\\n    This program is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU General Public License as published by\\n    the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    This program is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU General Public License for more details.\\n\\n    You should have received a copy of the GNU General Public License\\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n */\\n\\n/// @title Vault Contract\\n/// @author Jordi Baylina, RJ Ewing\\n/// @notice This contract holds funds for Campaigns and automates payments. For\\n///  this iteration the funds will come straight from the Giveth Multisig as a\\n///  safety precaution, but once fully tested and optimized this contract will\\n///  be a safe place to store funds equipped with optional variable time delays\\n///  to allow for an optional escape hatch\\n\\nimport \\\"giveth-common-contracts/contracts/Escapable.sol\\\";\\nimport \\\"./Pausable.sol\\\";\\n\\n/// @dev `Vault` is a higher level contract built off of the `Escapable`\\n///  contract that holds funds for Campaigns and automates payments.\\ncontract Vault is Escapable, Pausable {\\n\\n    /// @dev `Payment` is a public structure that describes the details of\\n    ///  each payment making it easy to track the movement of funds\\n    ///  transparently\\n    struct Payment {\\n        string name;              // What is the purpose of this payment\\n        bytes32 reference;        // Reference of the payment.\\n        address spender;          // Who is sending the funds\\n        uint earliestPayTime;     // The earliest a payment can be made (Unix Time)\\n        bool canceled;            // If True then the payment has been canceled\\n        bool paid;                // If True then the payment has been paid\\n        address recipient;        // Who is receiving the funds\\n        address token;            // Token this payment represents\\n        uint amount;              // The amount of wei sent in the payment\\n        uint securityGuardDelay;  // The seconds `securityGuard` can delay payment\\n    }\\n\\n    Payment[] public authorizedPayments;\\n\\n    address public securityGuard;\\n    uint public absoluteMinTimeLock;\\n    uint public timeLock;\\n    uint public maxSecurityGuardDelay;\\n    bool public allowDisbursePaymentWhenPaused;\\n\\n    /// @dev The white list of approved addresses allowed to set up && receive\\n    ///  payments from this vault\\n    mapping (address => bool) public allowedSpenders;\\n\\n    // @dev Events to make the payment movements easy to find on the blockchain\\n    event PaymentAuthorized(uint indexed idPayment, address indexed recipient, uint amount, address token, bytes32 reference);\\n    event PaymentExecuted(uint indexed idPayment, address indexed recipient, uint amount, address token);\\n    event PaymentCanceled(uint indexed idPayment);\\n    event SpenderAuthorization(address indexed spender, bool authorized);\\n\\n    /// @dev The address assigned the role of `securityGuard` is the only\\n    ///  addresses that can call a function with this modifier\\n    modifier onlySecurityGuard { \\n        require(msg.sender == securityGuard);\\n        _;\\n    }\\n\\n    /// By default, we dis-allow payment disburements if the contract is paused.\\n    /// However, to facilitate a migration of the bridge, we can allow\\n    /// disbursements when paused if explicitly set\\n    modifier disbursementsAllowed {\\n        require(!paused || allowDisbursePaymentWhenPaused);\\n        _;\\n    }\\n\\n    /// @notice The Constructor creates the Vault on the blockchain\\n    /// @param _escapeHatchCaller The address of a trusted account or contract to\\n    ///  call `escapeHatch()` to send the ether in this contract to the\\n    ///  `escapeHatchDestination` it would be ideal if `escapeHatchCaller` cannot move\\n    ///  funds out of `escapeHatchDestination`\\n    /// @param _escapeHatchDestination The address of a safe location (usu a\\n    ///  Multisig) to send the ether held in this contract in an emergency\\n    /// @param _absoluteMinTimeLock The minimum number of seconds `timelock` can\\n    ///  be set to, if set to 0 the `owner` can remove the `timeLock` completely\\n    /// @param _timeLock Initial number of seconds that payments are delayed\\n    ///  after they are authorized (a security precaution)\\n    /// @param _securityGuard Address that will be able to delay the payments\\n    ///  beyond the initial timelock requirements; can be set to 0x0 to remove\\n    ///  the `securityGuard` functionality\\n    /// @param _maxSecurityGuardDelay The maximum number of seconds in total\\n    ///   that `securityGuard` can delay a payment so that the owner can cancel\\n    ///   the payment if needed\\n    function Vault(\\n        address _escapeHatchCaller,\\n        address _escapeHatchDestination,\\n        uint _absoluteMinTimeLock,\\n        uint _timeLock,\\n        address _securityGuard,\\n        uint _maxSecurityGuardDelay\\n    ) Escapable(_escapeHatchCaller, _escapeHatchDestination) public\\n    {\\n        absoluteMinTimeLock = _absoluteMinTimeLock;\\n        timeLock = _timeLock;\\n        securityGuard = _securityGuard;\\n        maxSecurityGuardDelay = _maxSecurityGuardDelay;\\n    }\\n\\n/////////\\n// Helper functions\\n/////////\\n\\n    /// @notice States the total number of authorized payments in this contract\\n    /// @return The number of payments ever authorized even if they were canceled\\n    function numberOfAuthorizedPayments() public view returns (uint) {\\n        return authorizedPayments.length;\\n    }\\n\\n////////\\n// Spender Interface\\n////////\\n\\n    /// @notice only `allowedSpenders[]` Creates a new `Payment`\\n    /// @param _name Brief description of the payment that is authorized\\n    /// @param _reference External reference of the payment\\n    /// @param _recipient Destination of the payment\\n    /// @param _amount Amount to be paid in wei\\n    /// @param _paymentDelay Number of seconds the payment is to be delayed, if\\n    ///  this value is below `timeLock` then the `timeLock` determines the delay\\n    /// @return The Payment ID number for the new authorized payment\\n    function authorizePayment(\\n        string _name,\\n        bytes32 _reference,\\n        address _recipient,\\n        address _token,\\n        uint _amount,\\n        uint _paymentDelay\\n    ) whenNotPaused external returns(uint) {\\n\\n        // Fail if you arent on the `allowedSpenders` white list\\n        require(allowedSpenders[msg.sender]);\\n        uint idPayment = authorizedPayments.length;       // Unique Payment ID\\n        authorizedPayments.length++;\\n\\n        // The following lines fill out the payment struct\\n        Payment storage p = authorizedPayments[idPayment];\\n        p.spender = msg.sender;\\n\\n        // Overflow protection\\n        require(_paymentDelay <= 10**18);\\n\\n        // Determines the earliest the recipient can receive payment (Unix time)\\n        p.earliestPayTime = _paymentDelay >= timeLock ?\\n                                _getTime() + _paymentDelay :\\n                                _getTime() + timeLock;\\n        p.recipient = _recipient;\\n        p.amount = _amount;\\n        p.name = _name;\\n        p.reference = _reference;\\n        p.token = _token;\\n        emit PaymentAuthorized(idPayment, p.recipient, p.amount, p.token, p.reference);\\n        return idPayment;\\n    }\\n\\n    /// Anyone can call this function to disburse the payment to \\n    ///  the recipient after `earliestPayTime` has passed\\n    /// @param _idPayment The payment ID to be executed\\n    function disburseAuthorizedPayment(uint _idPayment) disbursementsAllowed public {\\n        // Check that the `_idPayment` has been added to the payments struct\\n        require(_idPayment < authorizedPayments.length);\\n\\n        Payment storage p = authorizedPayments[_idPayment];\\n\\n        // Checking for reasons not to execute the payment\\n        require(allowedSpenders[p.spender]);\\n        require(_getTime() >= p.earliestPayTime);\\n        require(!p.canceled);\\n        require(!p.paid);\\n\\n        p.paid = true; // Set the payment to being paid\\n\\n        // Make the payment\\n        if (p.token == 0) {\\n            p.recipient.transfer(p.amount);\\n        } else {\\n            require(ERC20(p.token).transfer(p.recipient, p.amount));\\n        }\\n\\n        emit PaymentExecuted(_idPayment, p.recipient, p.amount, p.token);\\n    }\\n\\n    /// convience function to disburse multiple payments in a single tx\\n    function disburseAuthorizedPayments(uint[] _idPayments) public {\\n        for (uint i = 0; i < _idPayments.length; i++) {\\n            uint _idPayment = _idPayments[i];\\n            disburseAuthorizedPayment(_idPayment);\\n        }\\n    }\\n\\n/////////\\n// SecurityGuard Interface\\n/////////\\n\\n    /// @notice `onlySecurityGuard` Delays a payment for a set number of seconds\\n    /// @param _idPayment ID of the payment to be delayed\\n    /// @param _delay The number of seconds to delay the payment\\n    function delayPayment(uint _idPayment, uint _delay) onlySecurityGuard external {\\n        require(_idPayment < authorizedPayments.length);\\n\\n        // Overflow test\\n        require(_delay <= 10**18);\\n\\n        Payment storage p = authorizedPayments[_idPayment];\\n\\n        require(p.securityGuardDelay + _delay <= maxSecurityGuardDelay);\\n        require(!p.paid);\\n        require(!p.canceled);\\n\\n        p.securityGuardDelay += _delay;\\n        p.earliestPayTime += _delay;\\n    }\\n\\n////////\\n// Owner Interface\\n///////\\n\\n    /// @notice `onlyOwner` Cancel a payment all together\\n    /// @param _idPayment ID of the payment to be canceled.\\n    function cancelPayment(uint _idPayment) onlyOwner external {\\n        require(_idPayment < authorizedPayments.length);\\n\\n        Payment storage p = authorizedPayments[_idPayment];\\n\\n        require(!p.canceled);\\n        require(!p.paid);\\n\\n        p.canceled = true;\\n        emit PaymentCanceled(_idPayment);\\n    }\\n\\n    /// @notice `onlyOwner` Adds a spender to the `allowedSpenders[]` white list\\n    /// @param _spender The address of the contract being authorized/unauthorized\\n    /// @param _authorize `true` if authorizing and `false` if unauthorizing\\n    function authorizeSpender(address _spender, bool _authorize) onlyOwner external {\\n        allowedSpenders[_spender] = _authorize;\\n        emit SpenderAuthorization(_spender, _authorize);\\n    }\\n\\n    /// @notice `onlyOwner` Sets the address of `securityGuard`\\n    /// @param _newSecurityGuard Address of the new security guard\\n    function setSecurityGuard(address _newSecurityGuard) onlyOwner external {\\n        securityGuard = _newSecurityGuard;\\n    }\\n\\n    /// @notice `onlyOwner` Changes `timeLock`; the new `timeLock` cannot be\\n    ///  lower than `absoluteMinTimeLock`\\n    /// @param _newTimeLock Sets the new minimum default `timeLock` in seconds;\\n    ///  pending payments maintain their `earliestPayTime`\\n    function setTimelock(uint _newTimeLock) onlyOwner external {\\n        require(_newTimeLock >= absoluteMinTimeLock);\\n        timeLock = _newTimeLock;\\n    }\\n\\n    /// @notice `onlyOwner` Changes the maximum number of seconds\\n    /// `securityGuard` can delay a payment\\n    /// @param _maxSecurityGuardDelay The new maximum delay in seconds that\\n    ///  `securityGuard` can delay the payment's execution in total\\n    function setMaxSecurityGuardDelay(uint _maxSecurityGuardDelay) onlyOwner external {\\n        maxSecurityGuardDelay = _maxSecurityGuardDelay;\\n    }\\n\\n    /// @dev called by the owner to pause the contract. Triggers a stopped state \\n    ///  and resets allowDisbursePaymentWhenPaused to false\\n    function pause() onlyOwner whenNotPaused public {\\n        allowDisbursePaymentWhenPaused = false;\\n        super.pause();\\n    }\\n\\n    /// Owner can allow payment disbursement when the contract is paused. This is so the\\n    /// bridge can be upgraded without having to migrate any existing authorizedPayments\\n    /// @dev only callable whenPaused b/c pausing the contract will reset `allowDisbursePaymentWhenPaused` to false\\n    /// @param allowed `true` if allowing payments to be disbursed when paused, otherwise 'false'\\n    function setAllowDisbursePaymentWhenPaused(bool allowed) onlyOwner whenPaused public {\\n        allowDisbursePaymentWhenPaused = allowed;\\n    }\\n\\n    // for overidding during testing\\n    function _getTime() internal view returns (uint) {\\n        return now;\\n    }\\n\\n}\",\"keccak256\":\"0x519df8e782548ae72e234de6f5c294def03beb3a3f9308093908311ba0bcd64a\"},\"giveth-common-contracts/contracts/ERC20.sol\":{\"content\":\"pragma solidity ^0.4.19;\\n\\n\\n/**\\n * @title ERC20\\n * @dev A standard interface for tokens.\\n * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\\n */\\ncontract ERC20 {\\n  \\n    /// @dev Returns the total token supply\\n    function totalSupply() public constant returns (uint256 supply);\\n\\n    /// @dev Returns the account balance of the account with address _owner\\n    function balanceOf(address _owner) public constant returns (uint256 balance);\\n\\n    /// @dev Transfers _value number of tokens to address _to\\n    function transfer(address _to, uint256 _value) public returns (bool success);\\n\\n    /// @dev Transfers _value number of tokens from address _from to address _to\\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\\n\\n    /// @dev Allows _spender to withdraw from the msg.sender's account up to the _value amount\\n    function approve(address _spender, uint256 _value) public returns (bool success);\\n\\n    /// @dev Returns the amount which _spender is still allowed to withdraw from _owner\\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\\n\\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\\n\\n}\\n\",\"keccak256\":\"0xe58902b5bdf9f918c6ec8ee4da44bf87faf225098fae84671ab07b46af427338\"},\"giveth-common-contracts/contracts/Escapable.sol\":{\"content\":\"pragma solidity ^0.4.19;\\n/*\\n    Copyright 2016, Jordi Baylina\\n    Contributor: Adrià Massanet <adria@codecontext.io>\\n\\n    This program is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU General Public License as published by\\n    the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    This program is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU General Public License for more details.\\n\\n    You should have received a copy of the GNU General Public License\\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n*/\\n\\nimport \\\"./Owned.sol\\\";\\nimport \\\"./ERC20.sol\\\";\\n\\n\\n/// @dev `Escapable` is a base level contract built off of the `Owned`\\n///  contract; it creates an escape hatch function that can be called in an\\n///  emergency that will allow designated addresses to send any ether or tokens\\n///  held in the contract to an `escapeHatchDestination` as long as they were\\n///  not blacklisted\\ncontract Escapable is Owned {\\n    address public escapeHatchCaller;\\n    address public escapeHatchDestination;\\n    mapping (address=>bool) private escapeBlacklist; // Token contract addresses\\n\\n    /// @notice The Constructor assigns the `escapeHatchDestination` and the\\n    ///  `escapeHatchCaller`\\n    /// @param _escapeHatchCaller The address of a trusted account or contract\\n    ///  to call `escapeHatch()` to send the ether in this contract to the\\n    ///  `escapeHatchDestination` it would be ideal that `escapeHatchCaller`\\n    ///  cannot move funds out of `escapeHatchDestination`\\n    /// @param _escapeHatchDestination The address of a safe location (usu a\\n    ///  Multisig) to send the ether held in this contract; if a neutral address\\n    ///  is required, the WHG Multisig is an option:\\n    ///  0x8Ff920020c8AD673661c8117f2855C384758C572 \\n    function Escapable(address _escapeHatchCaller, address _escapeHatchDestination) public {\\n        escapeHatchCaller = _escapeHatchCaller;\\n        escapeHatchDestination = _escapeHatchDestination;\\n    }\\n\\n    /// @dev The addresses preassigned as `escapeHatchCaller` or `owner`\\n    ///  are the only addresses that can call a function with this modifier\\n    modifier onlyEscapeHatchCallerOrOwner {\\n        require ((msg.sender == escapeHatchCaller)||(msg.sender == owner));\\n        _;\\n    }\\n\\n    /// @notice Creates the blacklist of tokens that are not able to be taken\\n    ///  out of the contract; can only be done at the deployment, and the logic\\n    ///  to add to the blacklist will be in the constructor of a child contract\\n    /// @param _token the token contract address that is to be blacklisted \\n    function blacklistEscapeToken(address _token) internal {\\n        escapeBlacklist[_token] = true;\\n        EscapeHatchBlackistedToken(_token);\\n    }\\n\\n    /// @notice Checks to see if `_token` is in the blacklist of tokens\\n    /// @param _token the token address being queried\\n    /// @return False if `_token` is in the blacklist and can't be taken out of\\n    ///  the contract via the `escapeHatch()`\\n    function isTokenEscapable(address _token) view public returns (bool) {\\n        return !escapeBlacklist[_token];\\n    }\\n\\n    /// @notice The `escapeHatch()` should only be called as a last resort if a\\n    /// security issue is uncovered or something unexpected happened\\n    /// @param _token to transfer, use 0x0 for ether\\n    function escapeHatch(address _token) public onlyEscapeHatchCallerOrOwner {   \\n        require(escapeBlacklist[_token]==false);\\n\\n        uint256 balance;\\n\\n        /// @dev Logic for ether\\n        if (_token == 0x0) {\\n            balance = this.balance;\\n            escapeHatchDestination.transfer(balance);\\n            EscapeHatchCalled(_token, balance);\\n            return;\\n        }\\n        /// @dev Logic for tokens\\n        ERC20 token = ERC20(_token);\\n        balance = token.balanceOf(this);\\n        require(token.transfer(escapeHatchDestination, balance));\\n        EscapeHatchCalled(_token, balance);\\n    }\\n\\n    /// @notice Changes the address assigned to call `escapeHatch()`\\n    /// @param _newEscapeHatchCaller The address of a trusted account or\\n    ///  contract to call `escapeHatch()` to send the value in this contract to\\n    ///  the `escapeHatchDestination`; it would be ideal that `escapeHatchCaller`\\n    ///  cannot move funds out of `escapeHatchDestination`\\n    function changeHatchEscapeCaller(address _newEscapeHatchCaller) public onlyEscapeHatchCallerOrOwner {\\n        escapeHatchCaller = _newEscapeHatchCaller;\\n    }\\n\\n    event EscapeHatchBlackistedToken(address token);\\n    event EscapeHatchCalled(address token, uint amount);\\n}\\n\",\"keccak256\":\"0xd5d7b1a916841b21cfdee2bc9de4a178820421252b0c764070d78e846cd4511d\"},\"giveth-common-contracts/contracts/Owned.sol\":{\"content\":\"pragma solidity ^0.4.19;\\n\\n\\n/// @title Owned\\n/// @author Adrià Massanet <adria@codecontext.io>\\n/// @notice The Owned contract has an owner address, and provides basic \\n///  authorization control functions, this simplifies & the implementation of\\n///  user permissions; this contract has three work flows for a change in\\n///  ownership, the first requires the new owner to validate that they have the\\n///  ability to accept ownership, the second allows the ownership to be\\n///  directly transfered without requiring acceptance, and the third allows for\\n///  the ownership to be removed to allow for decentralization \\ncontract Owned {\\n\\n    address public owner;\\n    address public newOwnerCandidate;\\n\\n    event OwnershipRequested(address indexed by, address indexed to);\\n    event OwnershipTransferred(address indexed from, address indexed to);\\n    event OwnershipRemoved();\\n\\n    /// @dev The constructor sets the `msg.sender` as the`owner` of the contract\\n    function Owned() public {\\n        owner = msg.sender;\\n    }\\n\\n    /// @dev `owner` is the only address that can call a function with this\\n    /// modifier\\n    modifier onlyOwner() {\\n        require (msg.sender == owner);\\n        _;\\n    }\\n    \\n    /// @dev In this 1st option for ownership transfer `proposeOwnership()` must\\n    ///  be called first by the current `owner` then `acceptOwnership()` must be\\n    ///  called by the `newOwnerCandidate`\\n    /// @notice `onlyOwner` Proposes to transfer control of the contract to a\\n    ///  new owner\\n    /// @param _newOwnerCandidate The address being proposed as the new owner\\n    function proposeOwnership(address _newOwnerCandidate) public onlyOwner {\\n        newOwnerCandidate = _newOwnerCandidate;\\n        OwnershipRequested(msg.sender, newOwnerCandidate);\\n    }\\n\\n    /// @notice Can only be called by the `newOwnerCandidate`, accepts the\\n    ///  transfer of ownership\\n    function acceptOwnership() public {\\n        require(msg.sender == newOwnerCandidate);\\n\\n        address oldOwner = owner;\\n        owner = newOwnerCandidate;\\n        newOwnerCandidate = 0x0;\\n\\n        OwnershipTransferred(oldOwner, owner);\\n    }\\n\\n    /// @dev In this 2nd option for ownership transfer `changeOwnership()` can\\n    ///  be called and it will immediately assign ownership to the `newOwner`\\n    /// @notice `owner` can step down and assign some other address to this role\\n    /// @param _newOwner The address of the new owner\\n    function changeOwnership(address _newOwner) public onlyOwner {\\n        require(_newOwner != 0x0);\\n\\n        address oldOwner = owner;\\n        owner = _newOwner;\\n        newOwnerCandidate = 0x0;\\n\\n        OwnershipTransferred(oldOwner, owner);\\n    }\\n\\n    /// @dev In this 3rd option for ownership transfer `removeOwnership()` can\\n    ///  be called and it will immediately assign ownership to the 0x0 address;\\n    ///  it requires a 0xdece be input as a parameter to prevent accidental use\\n    /// @notice Decentralizes the contract, this operation cannot be undone \\n    /// @param _dac `0xdac` has to be entered for this function to work\\n    function removeOwnership(address _dac) public onlyOwner {\\n        require(_dac == 0xdac);\\n        owner = 0x0;\\n        newOwnerCandidate = 0x0;\\n        OwnershipRemoved();     \\n    }\\n} \\n\",\"keccak256\":\"0xc7d1401775fb1b41187de281757de68718fe27ba2660ba4bb194436aab7d0213\"}},\"version\":1}"
      }
    },
    "giveth-common-contracts/contracts/ERC20.sol": {
      "ERC20": {
        "abi": [
          {
            "constant": false,
            "inputs": [
              {
                "name": "_spender",
                "type": "address"
              },
              {
                "name": "_value",
                "type": "uint256"
              }
            ],
            "name": "approve",
            "outputs": [
              {
                "name": "success",
                "type": "bool"
              }
            ],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "totalSupply",
            "outputs": [
              {
                "name": "supply",
                "type": "uint256"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_from",
                "type": "address"
              },
              {
                "name": "_to",
                "type": "address"
              },
              {
                "name": "_value",
                "type": "uint256"
              }
            ],
            "name": "transferFrom",
            "outputs": [
              {
                "name": "success",
                "type": "bool"
              }
            ],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [
              {
                "name": "_owner",
                "type": "address"
              }
            ],
            "name": "balanceOf",
            "outputs": [
              {
                "name": "balance",
                "type": "uint256"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_to",
                "type": "address"
              },
              {
                "name": "_value",
                "type": "uint256"
              }
            ],
            "name": "transfer",
            "outputs": [
              {
                "name": "success",
                "type": "bool"
              }
            ],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [
              {
                "name": "_owner",
                "type": "address"
              },
              {
                "name": "_spender",
                "type": "address"
              }
            ],
            "name": "allowance",
            "outputs": [
              {
                "name": "remaining",
                "type": "uint256"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "name": "_from",
                "type": "address"
              },
              {
                "indexed": true,
                "name": "_to",
                "type": "address"
              },
              {
                "indexed": false,
                "name": "_value",
                "type": "uint256"
              }
            ],
            "name": "Transfer",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "name": "_owner",
                "type": "address"
              },
              {
                "indexed": true,
                "name": "_spender",
                "type": "address"
              },
              {
                "indexed": false,
                "name": "_value",
                "type": "uint256"
              }
            ],
            "name": "Approval",
            "type": "event"
          }
        ],
        "evm": {
          "bytecode": {
            "linkReferences": {},
            "object": "",
            "sourceMap": ""
          },
          "deployedBytecode": {
            "linkReferences": {},
            "object": "",
            "sourceMap": ""
          },
          "methodIdentifiers": {
            "allowance(address,address)": "dd62ed3e",
            "approve(address,uint256)": "095ea7b3",
            "balanceOf(address)": "70a08231",
            "totalSupply()": "18160ddd",
            "transfer(address,uint256)": "a9059cbb",
            "transferFrom(address,address,uint256)": "23b872dd"
          }
        },
        "metadata": ""
      }
    },
    "giveth-common-contracts/contracts/Escapable.sol": {
      "Escapable": {
        "abi": [
          {
            "constant": true,
            "inputs": [],
            "name": "escapeHatchCaller",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_newOwner",
                "type": "address"
              }
            ],
            "name": "changeOwnership",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_dac",
                "type": "address"
              }
            ],
            "name": "removeOwnership",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_newOwnerCandidate",
                "type": "address"
              }
            ],
            "name": "proposeOwnership",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [],
            "name": "acceptOwnership",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [
              {
                "name": "_token",
                "type": "address"
              }
            ],
            "name": "isTokenEscapable",
            "outputs": [
              {
                "name": "",
                "type": "bool"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "owner",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_token",
                "type": "address"
              }
            ],
            "name": "escapeHatch",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "newOwnerCandidate",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_newEscapeHatchCaller",
                "type": "address"
              }
            ],
            "name": "changeHatchEscapeCaller",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "escapeHatchDestination",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "name": "_escapeHatchCaller",
                "type": "address"
              },
              {
                "name": "_escapeHatchDestination",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "constructor"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": false,
                "name": "token",
                "type": "address"
              }
            ],
            "name": "EscapeHatchBlackistedToken",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": false,
                "name": "token",
                "type": "address"
              },
              {
                "indexed": false,
                "name": "amount",
                "type": "uint256"
              }
            ],
            "name": "EscapeHatchCalled",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "name": "by",
                "type": "address"
              },
              {
                "indexed": true,
                "name": "to",
                "type": "address"
              }
            ],
            "name": "OwnershipRequested",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "name": "from",
                "type": "address"
              },
              {
                "indexed": true,
                "name": "to",
                "type": "address"
              }
            ],
            "name": "OwnershipTransferred",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [],
            "name": "OwnershipRemoved",
            "type": "event"
          }
        ],
        "evm": {
          "bytecode": {
            "linkReferences": {},
            "object": "6060604052341561000f57600080fd5b6040516040806107a4833981016040528080519190602001805160008054600160a060020a03338116600160a060020a0319928316179092556002805496831696821696909617909555600380549190921694169390931790925550506107298061007b6000396000f3006060604052600436106100955763ffffffff60e060020a6000350416631f6eb6e7811461009a5780632af4c31e146100c9578063666a3427146100ea578063710bf3221461010957806379ba509714610128578063892db0571461013b5780638da5cb5b1461016e578063a142d60814610181578063d091b550146101a0578063d836fbe8146101b3578063f5b61230146101d2575b600080fd5b34156100a557600080fd5b6100ad6101e5565b604051600160a060020a03909116815260200160405180910390f35b34156100d457600080fd5b6100e8600160a060020a03600435166101f4565b005b34156100f557600080fd5b6100e8600160a060020a0360043516610295565b341561011457600080fd5b6100e8600160a060020a036004351661031f565b341561013357600080fd5b6100e861039d565b341561014657600080fd5b61015a600160a060020a036004351661042a565b604051901515815260200160405180910390f35b341561017957600080fd5b6100ad610449565b341561018c57600080fd5b6100e8600160a060020a0360043516610458565b34156101ab57600080fd5b6100ad61067a565b34156101be57600080fd5b6100e8600160a060020a0360043516610689565b34156101dd57600080fd5b6100ad6106ee565b600254600160a060020a031681565b6000805433600160a060020a0390811691161461021057600080fd5b600160a060020a038216151561022557600080fd5b5060008054600160a060020a0383811673ffffffffffffffffffffffffffffffffffffffff1980841691909117938490556001805490911690559081169116817f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60005433600160a060020a039081169116146102b057600080fd5b610dac600160a060020a038216146102c757600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff199081169091556001805490911690557f94e8b32e01b9eedfddd778ffbd051a7718cdc14781702884561162dca6f74dbb60405160405180910390a150565b60005433600160a060020a0390811691161461033a57600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383811691909117918290559081169033167f13a4b3bc0d5234dd3d87c9f1557d8faefa37986da62c36ba49309e2fb2c9aec460405160405180910390a350565b60015460009033600160a060020a039081169116146103bb57600080fd5b50600080546001805473ffffffffffffffffffffffffffffffffffffffff19808416600160a060020a03838116919091179586905591169091559081169116817f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a350565b600160a060020a031660009081526004602052604090205460ff161590565b600054600160a060020a031681565b600254600090819033600160a060020a0390811691161480610488575060005433600160a060020a039081169116145b151561049357600080fd5b600160a060020a03831660009081526004602052604090205460ff16156104b957600080fd5b600160a060020a038316151561054b57600354600160a060020a033081163193501682156108fc0283604051600060405180830381858888f19350505050151561050257600080fd5b7fa50dde912fa22ea0d215a0236093ac45b4d55d6ef0c604c319f900029c5d10f28383604051600160a060020a03909216825260208201526040908101905180910390a1610675565b5081600160a060020a0381166370a082313060405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b151561059b57600080fd5b5af115156105a857600080fd5b5050506040518051600354909350600160a060020a03808416925063a9059cbb91168460405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151561060e57600080fd5b5af1151561061b57600080fd5b50505060405180519050151561063057600080fd5b7fa50dde912fa22ea0d215a0236093ac45b4d55d6ef0c604c319f900029c5d10f28383604051600160a060020a03909216825260208201526040908101905180910390a15b505050565b600154600160a060020a031681565b60025433600160a060020a03908116911614806106b4575060005433600160a060020a039081169116145b15156106bf57600080fd5b6002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600354600160a060020a0316815600a165627a7a72305820189df89f1bfefe2468263f3f6b57dfd805805c76698f650cefdb3ae607a87cec0029",
            "sourceMap": "1147:3644:8:-;;;2004:200;;;;;;;;;;;;;;;;;;;;;;;;;;;;993:5:9;:18;;-1:-1:-1;;;;;1001:10:9;993:18;;-1:-1:-1;;;;;;993:18:9;;;;;;;2101:17:8;:38;;;;;;;;;;;;;;;2149:22;:48;;;;;;;;;;;;;;;-1:-1:-1;;1147:3644:8;;;;;;"
          },
          "deployedBytecode": {
            "linkReferences": {},
            "object": "6060604052600436106100955763ffffffff60e060020a6000350416631f6eb6e7811461009a5780632af4c31e146100c9578063666a3427146100ea578063710bf3221461010957806379ba509714610128578063892db0571461013b5780638da5cb5b1461016e578063a142d60814610181578063d091b550146101a0578063d836fbe8146101b3578063f5b61230146101d2575b600080fd5b34156100a557600080fd5b6100ad6101e5565b604051600160a060020a03909116815260200160405180910390f35b34156100d457600080fd5b6100e8600160a060020a03600435166101f4565b005b34156100f557600080fd5b6100e8600160a060020a0360043516610295565b341561011457600080fd5b6100e8600160a060020a036004351661031f565b341561013357600080fd5b6100e861039d565b341561014657600080fd5b61015a600160a060020a036004351661042a565b604051901515815260200160405180910390f35b341561017957600080fd5b6100ad610449565b341561018c57600080fd5b6100e8600160a060020a0360043516610458565b34156101ab57600080fd5b6100ad61067a565b34156101be57600080fd5b6100e8600160a060020a0360043516610689565b34156101dd57600080fd5b6100ad6106ee565b600254600160a060020a031681565b6000805433600160a060020a0390811691161461021057600080fd5b600160a060020a038216151561022557600080fd5b5060008054600160a060020a0383811673ffffffffffffffffffffffffffffffffffffffff1980841691909117938490556001805490911690559081169116817f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60005433600160a060020a039081169116146102b057600080fd5b610dac600160a060020a038216146102c757600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff199081169091556001805490911690557f94e8b32e01b9eedfddd778ffbd051a7718cdc14781702884561162dca6f74dbb60405160405180910390a150565b60005433600160a060020a0390811691161461033a57600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383811691909117918290559081169033167f13a4b3bc0d5234dd3d87c9f1557d8faefa37986da62c36ba49309e2fb2c9aec460405160405180910390a350565b60015460009033600160a060020a039081169116146103bb57600080fd5b50600080546001805473ffffffffffffffffffffffffffffffffffffffff19808416600160a060020a03838116919091179586905591169091559081169116817f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a350565b600160a060020a031660009081526004602052604090205460ff161590565b600054600160a060020a031681565b600254600090819033600160a060020a0390811691161480610488575060005433600160a060020a039081169116145b151561049357600080fd5b600160a060020a03831660009081526004602052604090205460ff16156104b957600080fd5b600160a060020a038316151561054b57600354600160a060020a033081163193501682156108fc0283604051600060405180830381858888f19350505050151561050257600080fd5b7fa50dde912fa22ea0d215a0236093ac45b4d55d6ef0c604c319f900029c5d10f28383604051600160a060020a03909216825260208201526040908101905180910390a1610675565b5081600160a060020a0381166370a082313060405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b151561059b57600080fd5b5af115156105a857600080fd5b5050506040518051600354909350600160a060020a03808416925063a9059cbb91168460405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151561060e57600080fd5b5af1151561061b57600080fd5b50505060405180519050151561063057600080fd5b7fa50dde912fa22ea0d215a0236093ac45b4d55d6ef0c604c319f900029c5d10f28383604051600160a060020a03909216825260208201526040908101905180910390a15b505050565b600154600160a060020a031681565b60025433600160a060020a03908116911614806106b4575060005433600160a060020a039081169116145b15156106bf57600080fd5b6002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600354600160a060020a0316815600a165627a7a72305820189df89f1bfefe2468263f3f6b57dfd805805c76698f650cefdb3ae607a87cec0029",
            "sourceMap": "1147:3644:8:-;;;;;;;;;-1:-1:-1;;;1147:3644:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1181:32;;;;;;;;;;;;;;;-1:-1:-1;;;;;1181:32:8;;;;;;;;;;;;;;2422:246:9;;;;;;;;;;-1:-1:-1;;;;;2422:246:9;;;;;;;3062:182;;;;;;;;;;-1:-1:-1;;;;;3062:182:9;;;;;1585:185;;;;;;;;;;-1:-1:-1;;;;;1585:185:9;;;;;1882:242;;;;;;;;;;;;3215:117:8;;;;;;;;;;-1:-1:-1;;;;;3215:117:8;;;;;;;;;;;;;;;;;;;;;;638:20:9;;;;;;;;;;;;3540:611:8;;;;;;;;;;-1:-1:-1;;;;;3540:611:8;;;;;664:32:9;;;;;;;;;;;;4520:158:8;;;;;;;;;;-1:-1:-1;;;;;4520:158:8;;;;;1219:37;;;;;;;;;;;;1181:32;;;-1:-1:-1;;;;;1181:32:8;;:::o;2422:246:9:-;2529:16;1171:5;;1157:10;-1:-1:-1;;;;;1157:19:9;;;1171:5;;1157:19;1148:29;;;;;;-1:-1:-1;;;;;2501:16:9;;;;2493:25;;;;;;-1:-1:-1;2548:5:9;;;-1:-1:-1;;;;;2563:17:9;;;-1:-1:-1;;2563:17:9;;;;;;;;;;;2548:5;2590:23;;;;;;;2548:5;;;;2655;2548;2624:37;;;;;;;;;;2422:246;;:::o;3062:182::-;1171:5;;1157:10;-1:-1:-1;;;;;1157:19:9;;;1171:5;;1157:19;1148:29;;;;;;3144:5;-1:-1:-1;;;;;3136:13:9;;;3128:22;;;;;;3168:3;3160:11;;-1:-1:-1;;3160:11:9;;;;;;;3181:23;;;;;;;3214:18;;;;;;;;;;3062:182;:::o;1585:185::-;1171:5;;1157:10;-1:-1:-1;;;;;1157:19:9;;;1171:5;;1157:19;1148:29;;;;;;1666:17;:38;;-1:-1:-1;;1666:38:9;-1:-1:-1;;;;;1666:38:9;;;;;;;;;;;1745:17;;;;1733:10;1714:49;;;;;;;;;;;1585:185;:::o;1882:242::-;1948:17;;1977:16;;1934:10;-1:-1:-1;;;;;1934:31:9;;;1948:17;;1934:31;1926:40;;;;;;-1:-1:-1;1996:5:9;;;;2019:17;;-1:-1:-1;;2011:25:9;;;-1:-1:-1;;;;;2019:17:9;;;2011:25;;;;;;;;2046:23;;;;;1996:5;;;;2111;1996;2080:37;;;;;;;;;;1882:242;:::o;3215:117:8:-;-1:-1:-1;;;;;3302:23:8;3278:4;3302:23;;;:15;:23;;;;;;;;3301:24;;3215:117::o;638:20:9:-;;;-1:-1:-1;;;;;638:20:9;;:::o;3540:611:8:-;2431:17;;3676:15;;;;2417:10;-1:-1:-1;;;;;2417:31:8;;;2431:17;;2417:31;;2416:56;;-1:-1:-1;2466:5:8;;2452:10;-1:-1:-1;;;;;2452:19:8;;;2466:5;;2452:19;2416:56;2407:66;;;;;;;;-1:-1:-1;;;;;3634:23:8;;;;;;:15;:23;;;;;;;;:30;3626:39;;;;;;-1:-1:-1;;;;;3739:13:8;;;3735:188;;;3804:22;;-1:-1:-1;;;;;3778:4:8;:12;;;;-1:-1:-1;3804:22:8;:40;;;;3778:12;3804:40;;;;;;;;;;;;;;;;;;;;;;;;;;3858:34;3876:6;3884:7;3858:34;;-1:-1:-1;;;;;3858:34:8;;;;;;;;;;;;;;;;;;;;3906:7;;3735:188;-1:-1:-1;3986:6:8;-1:-1:-1;;;;;4013:15:8;;;4029:4;4013:21;;-1:-1:-1;;;4013:21:8;;;;;;-1:-1:-1;;;;;4013:21:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4067:22;;4013:21;;-1:-1:-1;;;;;;4052:14:8;;;;-1:-1:-1;4052:14:8;;4067:22;4013:21;4052:47;;-1:-1:-1;;;4052:47:8;;;;;;-1:-1:-1;;;;;4052:47:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4044:56;;;;;;;;4110:34;4128:6;4136:7;4110:34;;-1:-1:-1;;;;;4110:34:8;;;;;;;;;;;;;;;;;;;;2483:1;3540:611;;;:::o;664:32:9:-;;;-1:-1:-1;;;;;664:32:9;;:::o;4520:158:8:-;2431:17;;2417:10;-1:-1:-1;;;;;2417:31:8;;;2431:17;;2417:31;;2416:56;;-1:-1:-1;2466:5:8;;2452:10;-1:-1:-1;;;;;2452:19:8;;;2466:5;;2452:19;2416:56;2407:66;;;;;;;;4630:17;:41;;-1:-1:-1;;4630:41:8;-1:-1:-1;;;;;4630:41:8;;;;;;;;;;4520:158::o;1219:37::-;;;-1:-1:-1;;;;;1219:37:8;;:::o"
          },
          "methodIdentifiers": {
            "acceptOwnership()": "79ba5097",
            "changeHatchEscapeCaller(address)": "d836fbe8",
            "changeOwnership(address)": "2af4c31e",
            "escapeHatch(address)": "a142d608",
            "escapeHatchCaller()": "1f6eb6e7",
            "escapeHatchDestination()": "f5b61230",
            "isTokenEscapable(address)": "892db057",
            "newOwnerCandidate()": "d091b550",
            "owner()": "8da5cb5b",
            "proposeOwnership(address)": "710bf322",
            "removeOwnership(address)": "666a3427"
          }
        },
        "metadata": "{\"compiler\":{\"version\":\"0.4.21+commit.dfe3193c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[],\"name\":\"escapeHatchCaller\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dac\",\"type\":\"address\"}],\"name\":\"removeOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwnerCandidate\",\"type\":\"address\"}],\"name\":\"proposeOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"isTokenEscapable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"escapeHatch\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwnerCandidate\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newEscapeHatchCaller\",\"type\":\"address\"}],\"name\":\"changeHatchEscapeCaller\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"escapeHatchDestination\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_escapeHatchCaller\",\"type\":\"address\"},{\"name\":\"_escapeHatchDestination\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"}],\"name\":\"EscapeHatchBlackistedToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EscapeHatchCalled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"by\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"OwnershipRemoved\",\"type\":\"event\"}],\"devdoc\":{\"methods\":{\"changeHatchEscapeCaller(address)\":{\"params\":{\"_newEscapeHatchCaller\":\"The address of a trusted account or  contract to call `escapeHatch()` to send the value in this contract to  the `escapeHatchDestination`; it would be ideal that `escapeHatchCaller`  cannot move funds out of `escapeHatchDestination`\"}},\"changeOwnership(address)\":{\"details\":\"In this 2nd option for ownership transfer `changeOwnership()` can  be called and it will immediately assign ownership to the `newOwner`\",\"params\":{\"_newOwner\":\"The address of the new owner\"}},\"escapeHatch(address)\":{\"params\":{\"_token\":\"to transfer, use 0x0 for ether\"}},\"isTokenEscapable(address)\":{\"params\":{\"_token\":\"the token address being queried\"},\"return\":\"False if `_token` is in the blacklist and can't be taken out of  the contract via the `escapeHatch()`\"},\"proposeOwnership(address)\":{\"details\":\"In this 1st option for ownership transfer `proposeOwnership()` must  be called first by the current `owner` then `acceptOwnership()` must be  called by the `newOwnerCandidate`\",\"params\":{\"_newOwnerCandidate\":\"The address being proposed as the new owner\"}},\"removeOwnership(address)\":{\"details\":\"In this 3rd option for ownership transfer `removeOwnership()` can  be called and it will immediately assign ownership to the 0x0 address;  it requires a 0xdece be input as a parameter to prevent accidental use\",\"params\":{\"_dac\":\"`0xdac` has to be entered for this function to work\"}}}},\"userdoc\":{\"methods\":{\"acceptOwnership()\":{\"notice\":\"Can only be called by the `newOwnerCandidate`, accepts the  transfer of ownership\"},\"changeHatchEscapeCaller(address)\":{\"notice\":\"Changes the address assigned to call `escapeHatch()`\"},\"changeOwnership(address)\":{\"notice\":\"`owner` can step down and assign some other address to this role\"},\"escapeHatch(address)\":{\"notice\":\"The `escapeHatch()` should only be called as a last resort if a security issue is uncovered or something unexpected happened\"},\"isTokenEscapable(address)\":{\"notice\":\"Checks to see if `_token` is in the blacklist of tokens\"},\"proposeOwnership(address)\":{\"notice\":\"`onlyOwner` Proposes to transfer control of the contract to a  new owner\"},\"removeOwnership(address)\":{\"notice\":\"Decentralizes the contract, this operation cannot be undone \"}}}},\"settings\":{\"compilationTarget\":{\"giveth-common-contracts/contracts/Escapable.sol\":\"Escapable\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"giveth-common-contracts/contracts/ERC20.sol\":{\"content\":\"pragma solidity ^0.4.19;\\n\\n\\n/**\\n * @title ERC20\\n * @dev A standard interface for tokens.\\n * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\\n */\\ncontract ERC20 {\\n  \\n    /// @dev Returns the total token supply\\n    function totalSupply() public constant returns (uint256 supply);\\n\\n    /// @dev Returns the account balance of the account with address _owner\\n    function balanceOf(address _owner) public constant returns (uint256 balance);\\n\\n    /// @dev Transfers _value number of tokens to address _to\\n    function transfer(address _to, uint256 _value) public returns (bool success);\\n\\n    /// @dev Transfers _value number of tokens from address _from to address _to\\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\\n\\n    /// @dev Allows _spender to withdraw from the msg.sender's account up to the _value amount\\n    function approve(address _spender, uint256 _value) public returns (bool success);\\n\\n    /// @dev Returns the amount which _spender is still allowed to withdraw from _owner\\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\\n\\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\\n\\n}\\n\",\"keccak256\":\"0xe58902b5bdf9f918c6ec8ee4da44bf87faf225098fae84671ab07b46af427338\"},\"giveth-common-contracts/contracts/Escapable.sol\":{\"content\":\"pragma solidity ^0.4.19;\\n/*\\n    Copyright 2016, Jordi Baylina\\n    Contributor: Adrià Massanet <adria@codecontext.io>\\n\\n    This program is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU General Public License as published by\\n    the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    This program is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU General Public License for more details.\\n\\n    You should have received a copy of the GNU General Public License\\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n*/\\n\\nimport \\\"./Owned.sol\\\";\\nimport \\\"./ERC20.sol\\\";\\n\\n\\n/// @dev `Escapable` is a base level contract built off of the `Owned`\\n///  contract; it creates an escape hatch function that can be called in an\\n///  emergency that will allow designated addresses to send any ether or tokens\\n///  held in the contract to an `escapeHatchDestination` as long as they were\\n///  not blacklisted\\ncontract Escapable is Owned {\\n    address public escapeHatchCaller;\\n    address public escapeHatchDestination;\\n    mapping (address=>bool) private escapeBlacklist; // Token contract addresses\\n\\n    /// @notice The Constructor assigns the `escapeHatchDestination` and the\\n    ///  `escapeHatchCaller`\\n    /// @param _escapeHatchCaller The address of a trusted account or contract\\n    ///  to call `escapeHatch()` to send the ether in this contract to the\\n    ///  `escapeHatchDestination` it would be ideal that `escapeHatchCaller`\\n    ///  cannot move funds out of `escapeHatchDestination`\\n    /// @param _escapeHatchDestination The address of a safe location (usu a\\n    ///  Multisig) to send the ether held in this contract; if a neutral address\\n    ///  is required, the WHG Multisig is an option:\\n    ///  0x8Ff920020c8AD673661c8117f2855C384758C572 \\n    function Escapable(address _escapeHatchCaller, address _escapeHatchDestination) public {\\n        escapeHatchCaller = _escapeHatchCaller;\\n        escapeHatchDestination = _escapeHatchDestination;\\n    }\\n\\n    /// @dev The addresses preassigned as `escapeHatchCaller` or `owner`\\n    ///  are the only addresses that can call a function with this modifier\\n    modifier onlyEscapeHatchCallerOrOwner {\\n        require ((msg.sender == escapeHatchCaller)||(msg.sender == owner));\\n        _;\\n    }\\n\\n    /// @notice Creates the blacklist of tokens that are not able to be taken\\n    ///  out of the contract; can only be done at the deployment, and the logic\\n    ///  to add to the blacklist will be in the constructor of a child contract\\n    /// @param _token the token contract address that is to be blacklisted \\n    function blacklistEscapeToken(address _token) internal {\\n        escapeBlacklist[_token] = true;\\n        EscapeHatchBlackistedToken(_token);\\n    }\\n\\n    /// @notice Checks to see if `_token` is in the blacklist of tokens\\n    /// @param _token the token address being queried\\n    /// @return False if `_token` is in the blacklist and can't be taken out of\\n    ///  the contract via the `escapeHatch()`\\n    function isTokenEscapable(address _token) view public returns (bool) {\\n        return !escapeBlacklist[_token];\\n    }\\n\\n    /// @notice The `escapeHatch()` should only be called as a last resort if a\\n    /// security issue is uncovered or something unexpected happened\\n    /// @param _token to transfer, use 0x0 for ether\\n    function escapeHatch(address _token) public onlyEscapeHatchCallerOrOwner {   \\n        require(escapeBlacklist[_token]==false);\\n\\n        uint256 balance;\\n\\n        /// @dev Logic for ether\\n        if (_token == 0x0) {\\n            balance = this.balance;\\n            escapeHatchDestination.transfer(balance);\\n            EscapeHatchCalled(_token, balance);\\n            return;\\n        }\\n        /// @dev Logic for tokens\\n        ERC20 token = ERC20(_token);\\n        balance = token.balanceOf(this);\\n        require(token.transfer(escapeHatchDestination, balance));\\n        EscapeHatchCalled(_token, balance);\\n    }\\n\\n    /// @notice Changes the address assigned to call `escapeHatch()`\\n    /// @param _newEscapeHatchCaller The address of a trusted account or\\n    ///  contract to call `escapeHatch()` to send the value in this contract to\\n    ///  the `escapeHatchDestination`; it would be ideal that `escapeHatchCaller`\\n    ///  cannot move funds out of `escapeHatchDestination`\\n    function changeHatchEscapeCaller(address _newEscapeHatchCaller) public onlyEscapeHatchCallerOrOwner {\\n        escapeHatchCaller = _newEscapeHatchCaller;\\n    }\\n\\n    event EscapeHatchBlackistedToken(address token);\\n    event EscapeHatchCalled(address token, uint amount);\\n}\\n\",\"keccak256\":\"0xd5d7b1a916841b21cfdee2bc9de4a178820421252b0c764070d78e846cd4511d\"},\"giveth-common-contracts/contracts/Owned.sol\":{\"content\":\"pragma solidity ^0.4.19;\\n\\n\\n/// @title Owned\\n/// @author Adrià Massanet <adria@codecontext.io>\\n/// @notice The Owned contract has an owner address, and provides basic \\n///  authorization control functions, this simplifies & the implementation of\\n///  user permissions; this contract has three work flows for a change in\\n///  ownership, the first requires the new owner to validate that they have the\\n///  ability to accept ownership, the second allows the ownership to be\\n///  directly transfered without requiring acceptance, and the third allows for\\n///  the ownership to be removed to allow for decentralization \\ncontract Owned {\\n\\n    address public owner;\\n    address public newOwnerCandidate;\\n\\n    event OwnershipRequested(address indexed by, address indexed to);\\n    event OwnershipTransferred(address indexed from, address indexed to);\\n    event OwnershipRemoved();\\n\\n    /// @dev The constructor sets the `msg.sender` as the`owner` of the contract\\n    function Owned() public {\\n        owner = msg.sender;\\n    }\\n\\n    /// @dev `owner` is the only address that can call a function with this\\n    /// modifier\\n    modifier onlyOwner() {\\n        require (msg.sender == owner);\\n        _;\\n    }\\n    \\n    /// @dev In this 1st option for ownership transfer `proposeOwnership()` must\\n    ///  be called first by the current `owner` then `acceptOwnership()` must be\\n    ///  called by the `newOwnerCandidate`\\n    /// @notice `onlyOwner` Proposes to transfer control of the contract to a\\n    ///  new owner\\n    /// @param _newOwnerCandidate The address being proposed as the new owner\\n    function proposeOwnership(address _newOwnerCandidate) public onlyOwner {\\n        newOwnerCandidate = _newOwnerCandidate;\\n        OwnershipRequested(msg.sender, newOwnerCandidate);\\n    }\\n\\n    /// @notice Can only be called by the `newOwnerCandidate`, accepts the\\n    ///  transfer of ownership\\n    function acceptOwnership() public {\\n        require(msg.sender == newOwnerCandidate);\\n\\n        address oldOwner = owner;\\n        owner = newOwnerCandidate;\\n        newOwnerCandidate = 0x0;\\n\\n        OwnershipTransferred(oldOwner, owner);\\n    }\\n\\n    /// @dev In this 2nd option for ownership transfer `changeOwnership()` can\\n    ///  be called and it will immediately assign ownership to the `newOwner`\\n    /// @notice `owner` can step down and assign some other address to this role\\n    /// @param _newOwner The address of the new owner\\n    function changeOwnership(address _newOwner) public onlyOwner {\\n        require(_newOwner != 0x0);\\n\\n        address oldOwner = owner;\\n        owner = _newOwner;\\n        newOwnerCandidate = 0x0;\\n\\n        OwnershipTransferred(oldOwner, owner);\\n    }\\n\\n    /// @dev In this 3rd option for ownership transfer `removeOwnership()` can\\n    ///  be called and it will immediately assign ownership to the 0x0 address;\\n    ///  it requires a 0xdece be input as a parameter to prevent accidental use\\n    /// @notice Decentralizes the contract, this operation cannot be undone \\n    /// @param _dac `0xdac` has to be entered for this function to work\\n    function removeOwnership(address _dac) public onlyOwner {\\n        require(_dac == 0xdac);\\n        owner = 0x0;\\n        newOwnerCandidate = 0x0;\\n        OwnershipRemoved();     \\n    }\\n} \\n\",\"keccak256\":\"0xc7d1401775fb1b41187de281757de68718fe27ba2660ba4bb194436aab7d0213\"}},\"version\":1}"
      }
    },
    "giveth-common-contracts/contracts/Owned.sol": {
      "Owned": {
        "abi": [
          {
            "constant": false,
            "inputs": [
              {
                "name": "_newOwner",
                "type": "address"
              }
            ],
            "name": "changeOwnership",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_dac",
                "type": "address"
              }
            ],
            "name": "removeOwnership",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_newOwnerCandidate",
                "type": "address"
              }
            ],
            "name": "proposeOwnership",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [],
            "name": "acceptOwnership",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "owner",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "newOwnerCandidate",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "constructor"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "name": "by",
                "type": "address"
              },
              {
                "indexed": true,
                "name": "to",
                "type": "address"
              }
            ],
            "name": "OwnershipRequested",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "name": "from",
                "type": "address"
              },
              {
                "indexed": true,
                "name": "to",
                "type": "address"
              }
            ],
            "name": "OwnershipTransferred",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [],
            "name": "OwnershipRemoved",
            "type": "event"
          }
        ],
        "evm": {
          "bytecode": {
            "linkReferences": {},
            "object": "6060604052341561000f57600080fd5b60008054600160a060020a033316600160a060020a03199091161790556103b08061003b6000396000f3006060604052600436106100775763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416632af4c31e811461007c578063666a34271461009d578063710bf322146100bc57806379ba5097146100db5780638da5cb5b146100ee578063d091b5501461011d575b600080fd5b341561008757600080fd5b61009b600160a060020a0360043516610130565b005b34156100a857600080fd5b61009b600160a060020a03600435166101d1565b34156100c757600080fd5b61009b600160a060020a036004351661025b565b34156100e657600080fd5b61009b6102d9565b34156100f957600080fd5b610101610366565b604051600160a060020a03909116815260200160405180910390f35b341561012857600080fd5b610101610375565b6000805433600160a060020a0390811691161461014c57600080fd5b600160a060020a038216151561016157600080fd5b5060008054600160a060020a0383811673ffffffffffffffffffffffffffffffffffffffff1980841691909117938490556001805490911690559081169116817f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60005433600160a060020a039081169116146101ec57600080fd5b610dac600160a060020a0382161461020357600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff199081169091556001805490911690557f94e8b32e01b9eedfddd778ffbd051a7718cdc14781702884561162dca6f74dbb60405160405180910390a150565b60005433600160a060020a0390811691161461027657600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383811691909117918290559081169033167f13a4b3bc0d5234dd3d87c9f1557d8faefa37986da62c36ba49309e2fb2c9aec460405160405180910390a350565b60015460009033600160a060020a039081169116146102f757600080fd5b50600080546001805473ffffffffffffffffffffffffffffffffffffffff19808416600160a060020a03838116919091179586905591169091559081169116817f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a350565b600054600160a060020a031681565b600154600160a060020a0316815600a165627a7a7230582094f3ef431e86235027f139567f8a43276a952d0a2b46179793b470721c69ca240029",
            "sourceMap": "616:2630:9:-;;;959:59;;;;;;;;993:5;:18;;-1:-1:-1;;;;;1001:10:9;993:18;-1:-1:-1;;;;;;993:18:9;;;;;;616:2630;;;;;;"
          },
          "deployedBytecode": {
            "linkReferences": {},
            "object": "6060604052600436106100775763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416632af4c31e811461007c578063666a34271461009d578063710bf322146100bc57806379ba5097146100db5780638da5cb5b146100ee578063d091b5501461011d575b600080fd5b341561008757600080fd5b61009b600160a060020a0360043516610130565b005b34156100a857600080fd5b61009b600160a060020a03600435166101d1565b34156100c757600080fd5b61009b600160a060020a036004351661025b565b34156100e657600080fd5b61009b6102d9565b34156100f957600080fd5b610101610366565b604051600160a060020a03909116815260200160405180910390f35b341561012857600080fd5b610101610375565b6000805433600160a060020a0390811691161461014c57600080fd5b600160a060020a038216151561016157600080fd5b5060008054600160a060020a0383811673ffffffffffffffffffffffffffffffffffffffff1980841691909117938490556001805490911690559081169116817f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60005433600160a060020a039081169116146101ec57600080fd5b610dac600160a060020a0382161461020357600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff199081169091556001805490911690557f94e8b32e01b9eedfddd778ffbd051a7718cdc14781702884561162dca6f74dbb60405160405180910390a150565b60005433600160a060020a0390811691161461027657600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383811691909117918290559081169033167f13a4b3bc0d5234dd3d87c9f1557d8faefa37986da62c36ba49309e2fb2c9aec460405160405180910390a350565b60015460009033600160a060020a039081169116146102f757600080fd5b50600080546001805473ffffffffffffffffffffffffffffffffffffffff19808416600160a060020a03838116919091179586905591169091559081169116817f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a350565b600054600160a060020a031681565b600154600160a060020a0316815600a165627a7a7230582094f3ef431e86235027f139567f8a43276a952d0a2b46179793b470721c69ca240029",
            "sourceMap": "616:2630:9:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2422:246;;;;;;;;;;-1:-1:-1;;;;;2422:246:9;;;;;;;3062:182;;;;;;;;;;-1:-1:-1;;;;;3062:182:9;;;;;1585:185;;;;;;;;;;-1:-1:-1;;;;;1585:185:9;;;;;1882:242;;;;;;;;;;;;638:20;;;;;;;;;;;;;;;-1:-1:-1;;;;;638:20:9;;;;;;;;;;;;;;664:32;;;;;;;;;;;;2422:246;2529:16;1171:5;;1157:10;-1:-1:-1;;;;;1157:19:9;;;1171:5;;1157:19;1148:29;;;;;;-1:-1:-1;;;;;2501:16:9;;;;2493:25;;;;;;-1:-1:-1;2548:5:9;;;-1:-1:-1;;;;;2563:17:9;;;-1:-1:-1;;2563:17:9;;;;;;;;;;;2548:5;2590:23;;;;;;;2548:5;;;;2655;2548;2624:37;;;;;;;;;;2422:246;;:::o;3062:182::-;1171:5;;1157:10;-1:-1:-1;;;;;1157:19:9;;;1171:5;;1157:19;1148:29;;;;;;3144:5;-1:-1:-1;;;;;3136:13:9;;;3128:22;;;;;;3168:3;3160:11;;-1:-1:-1;;3160:11:9;;;;;;;3181:23;;;;;;;3214:18;;;;;;;;;;3062:182;:::o;1585:185::-;1171:5;;1157:10;-1:-1:-1;;;;;1157:19:9;;;1171:5;;1157:19;1148:29;;;;;;1666:17;:38;;-1:-1:-1;;1666:38:9;-1:-1:-1;;;;;1666:38:9;;;;;;;;;;;1745:17;;;;1733:10;1714:49;;;;;;;;;;;1585:185;:::o;1882:242::-;1948:17;;1977:16;;1934:10;-1:-1:-1;;;;;1934:31:9;;;1948:17;;1934:31;1926:40;;;;;;-1:-1:-1;1996:5:9;;;;2019:17;;-1:-1:-1;;2011:25:9;;;-1:-1:-1;;;;;2019:17:9;;;2011:25;;;;;;;;2046:23;;;;;1996:5;;;;2111;1996;2080:37;;;;;;;;;;1882:242;:::o;638:20::-;;;-1:-1:-1;;;;;638:20:9;;:::o;664:32::-;;;-1:-1:-1;;;;;664:32:9;;:::o"
          },
          "methodIdentifiers": {
            "acceptOwnership()": "79ba5097",
            "changeOwnership(address)": "2af4c31e",
            "newOwnerCandidate()": "d091b550",
            "owner()": "8da5cb5b",
            "proposeOwnership(address)": "710bf322",
            "removeOwnership(address)": "666a3427"
          }
        },
        "metadata": "{\"compiler\":{\"version\":\"0.4.21+commit.dfe3193c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dac\",\"type\":\"address\"}],\"name\":\"removeOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwnerCandidate\",\"type\":\"address\"}],\"name\":\"proposeOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwnerCandidate\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"by\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"OwnershipRemoved\",\"type\":\"event\"}],\"devdoc\":{\"author\":\"Adrià Massanet <adria@codecontext.io>\",\"methods\":{\"changeOwnership(address)\":{\"details\":\"In this 2nd option for ownership transfer `changeOwnership()` can  be called and it will immediately assign ownership to the `newOwner`\",\"params\":{\"_newOwner\":\"The address of the new owner\"}},\"proposeOwnership(address)\":{\"details\":\"In this 1st option for ownership transfer `proposeOwnership()` must  be called first by the current `owner` then `acceptOwnership()` must be  called by the `newOwnerCandidate`\",\"params\":{\"_newOwnerCandidate\":\"The address being proposed as the new owner\"}},\"removeOwnership(address)\":{\"details\":\"In this 3rd option for ownership transfer `removeOwnership()` can  be called and it will immediately assign ownership to the 0x0 address;  it requires a 0xdece be input as a parameter to prevent accidental use\",\"params\":{\"_dac\":\"`0xdac` has to be entered for this function to work\"}}},\"title\":\"Owned\"},\"userdoc\":{\"methods\":{\"acceptOwnership()\":{\"notice\":\"Can only be called by the `newOwnerCandidate`, accepts the  transfer of ownership\"},\"changeOwnership(address)\":{\"notice\":\"`owner` can step down and assign some other address to this role\"},\"proposeOwnership(address)\":{\"notice\":\"`onlyOwner` Proposes to transfer control of the contract to a  new owner\"},\"removeOwnership(address)\":{\"notice\":\"Decentralizes the contract, this operation cannot be undone \"}}}},\"settings\":{\"compilationTarget\":{\"giveth-common-contracts/contracts/Owned.sol\":\"Owned\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"giveth-common-contracts/contracts/Owned.sol\":{\"content\":\"pragma solidity ^0.4.19;\\n\\n\\n/// @title Owned\\n/// @author Adrià Massanet <adria@codecontext.io>\\n/// @notice The Owned contract has an owner address, and provides basic \\n///  authorization control functions, this simplifies & the implementation of\\n///  user permissions; this contract has three work flows for a change in\\n///  ownership, the first requires the new owner to validate that they have the\\n///  ability to accept ownership, the second allows the ownership to be\\n///  directly transfered without requiring acceptance, and the third allows for\\n///  the ownership to be removed to allow for decentralization \\ncontract Owned {\\n\\n    address public owner;\\n    address public newOwnerCandidate;\\n\\n    event OwnershipRequested(address indexed by, address indexed to);\\n    event OwnershipTransferred(address indexed from, address indexed to);\\n    event OwnershipRemoved();\\n\\n    /// @dev The constructor sets the `msg.sender` as the`owner` of the contract\\n    function Owned() public {\\n        owner = msg.sender;\\n    }\\n\\n    /// @dev `owner` is the only address that can call a function with this\\n    /// modifier\\n    modifier onlyOwner() {\\n        require (msg.sender == owner);\\n        _;\\n    }\\n    \\n    /// @dev In this 1st option for ownership transfer `proposeOwnership()` must\\n    ///  be called first by the current `owner` then `acceptOwnership()` must be\\n    ///  called by the `newOwnerCandidate`\\n    /// @notice `onlyOwner` Proposes to transfer control of the contract to a\\n    ///  new owner\\n    /// @param _newOwnerCandidate The address being proposed as the new owner\\n    function proposeOwnership(address _newOwnerCandidate) public onlyOwner {\\n        newOwnerCandidate = _newOwnerCandidate;\\n        OwnershipRequested(msg.sender, newOwnerCandidate);\\n    }\\n\\n    /// @notice Can only be called by the `newOwnerCandidate`, accepts the\\n    ///  transfer of ownership\\n    function acceptOwnership() public {\\n        require(msg.sender == newOwnerCandidate);\\n\\n        address oldOwner = owner;\\n        owner = newOwnerCandidate;\\n        newOwnerCandidate = 0x0;\\n\\n        OwnershipTransferred(oldOwner, owner);\\n    }\\n\\n    /// @dev In this 2nd option for ownership transfer `changeOwnership()` can\\n    ///  be called and it will immediately assign ownership to the `newOwner`\\n    /// @notice `owner` can step down and assign some other address to this role\\n    /// @param _newOwner The address of the new owner\\n    function changeOwnership(address _newOwner) public onlyOwner {\\n        require(_newOwner != 0x0);\\n\\n        address oldOwner = owner;\\n        owner = _newOwner;\\n        newOwnerCandidate = 0x0;\\n\\n        OwnershipTransferred(oldOwner, owner);\\n    }\\n\\n    /// @dev In this 3rd option for ownership transfer `removeOwnership()` can\\n    ///  be called and it will immediately assign ownership to the 0x0 address;\\n    ///  it requires a 0xdece be input as a parameter to prevent accidental use\\n    /// @notice Decentralizes the contract, this operation cannot be undone \\n    /// @param _dac `0xdac` has to be entered for this function to work\\n    function removeOwnership(address _dac) public onlyOwner {\\n        require(_dac == 0xdac);\\n        owner = 0x0;\\n        newOwnerCandidate = 0x0;\\n        OwnershipRemoved();     \\n    }\\n} \\n\",\"keccak256\":\"0xc7d1401775fb1b41187de281757de68718fe27ba2660ba4bb194436aab7d0213\"}},\"version\":1}"
      }
    },
    "minimetoken/contracts/Controlled.sol": {
      "Controlled": {
        "abi": [
          {
            "constant": false,
            "inputs": [
              {
                "name": "_newController",
                "type": "address"
              }
            ],
            "name": "changeController",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "controller",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "constructor"
          }
        ],
        "evm": {
          "bytecode": {
            "linkReferences": {},
            "object": "6060604052341561000f57600080fd5b60008054600160a060020a033316600160a060020a03199091161790556101668061003b6000396000f30060606040526004361061004b5763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416633cebb8238114610050578063f77c47911461007e575b600080fd5b341561005b57600080fd5b61007c73ffffffffffffffffffffffffffffffffffffffff600435166100ba565b005b341561008957600080fd5b61009161011e565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b6000543373ffffffffffffffffffffffffffffffffffffffff9081169116146100e257600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff191673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60005473ffffffffffffffffffffffffffffffffffffffff16815600a165627a7a723058200854002cb66be0d0d09610166112a7b86336158083da362a374cc31735a23c810029",
            "sourceMap": "26:548:10:-;;;274:56;;;;;;;;305:10;:23;;-1:-1:-1;;;;;318:10:10;305:23;-1:-1:-1;;;;;;305:23:10;;;;;;26:548;;;;;;"
          },
          "deployedBytecode": {
            "linkReferences": {},
            "object": "60606040526004361061004b5763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416633cebb8238114610050578063f77c47911461007e575b600080fd5b341561005b57600080fd5b61007c73ffffffffffffffffffffffffffffffffffffffff600435166100ba565b005b341561008957600080fd5b61009161011e565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b6000543373ffffffffffffffffffffffffffffffffffffffff9081169116146100e257600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff191673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60005473ffffffffffffffffffffffffffffffffffffffff16815600a165627a7a723058200854002cb66be0d0d09610166112a7b86336158083da362a374cc31735a23c810029",
            "sourceMap": "26:548:10:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;456:116;;;;;;;;;;;;;;;;;;242:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;456:116;219:10;;205;219;205:24;;;219:10;;205:24;197:33;;;;;;538:10;:27;;-1:-1:-1;;538:27:10;;;;;;;;;;;;456:116::o;242:25::-;;;;;;:::o"
          },
          "methodIdentifiers": {
            "changeController(address)": "3cebb823",
            "controller()": "f77c4791"
          }
        },
        "metadata": "{\"compiler\":{\"version\":\"0.4.21+commit.dfe3193c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":false,\"inputs\":[{\"name\":\"_newController\",\"type\":\"address\"}],\"name\":\"changeController\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}],\"devdoc\":{\"methods\":{\"changeController(address)\":{\"params\":{\"_newController\":\"The new controller of the contract\"}}}},\"userdoc\":{\"methods\":{\"changeController(address)\":{\"notice\":\"Changes the controller of the contract\"}}}},\"settings\":{\"compilationTarget\":{\"minimetoken/contracts/Controlled.sol\":\"Controlled\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"minimetoken/contracts/Controlled.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\ncontract Controlled {\\n    /// @notice The address of the controller is the only address that can call\\n    ///  a function with this modifier\\n    modifier onlyController { require(msg.sender == controller); _; }\\n\\n    address public controller;\\n\\n    function Controlled() public { controller = msg.sender;}\\n\\n    /// @notice Changes the controller of the contract\\n    /// @param _newController The new controller of the contract\\n    function changeController(address _newController) public onlyController {\\n        controller = _newController;\\n    }\\n}\\n\",\"keccak256\":\"0x770798704985a4588762ea932b913bc1df01b4625ab86c5a7278883bbde44b78\"}},\"version\":1}"
      }
    },
    "minimetoken/contracts/MiniMeToken.sol": {
      "ApproveAndCallFallBack": {
        "abi": [
          {
            "constant": false,
            "inputs": [
              {
                "name": "from",
                "type": "address"
              },
              {
                "name": "_amount",
                "type": "uint256"
              },
              {
                "name": "_token",
                "type": "address"
              },
              {
                "name": "_data",
                "type": "bytes"
              }
            ],
            "name": "receiveApproval",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          }
        ],
        "evm": {
          "bytecode": {
            "linkReferences": {},
            "object": "",
            "sourceMap": ""
          },
          "deployedBytecode": {
            "linkReferences": {},
            "object": "",
            "sourceMap": ""
          },
          "methodIdentifiers": {
            "receiveApproval(address,uint256,address,bytes)": "8f4ffcb1"
          }
        },
        "metadata": ""
      },
      "MiniMeToken": {
        "abi": [
          {
            "constant": true,
            "inputs": [],
            "name": "name",
            "outputs": [
              {
                "name": "",
                "type": "string"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_spender",
                "type": "address"
              },
              {
                "name": "_amount",
                "type": "uint256"
              }
            ],
            "name": "approve",
            "outputs": [
              {
                "name": "success",
                "type": "bool"
              }
            ],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "creationBlock",
            "outputs": [
              {
                "name": "",
                "type": "uint256"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "totalSupply",
            "outputs": [
              {
                "name": "",
                "type": "uint256"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_from",
                "type": "address"
              },
              {
                "name": "_to",
                "type": "address"
              },
              {
                "name": "_amount",
                "type": "uint256"
              }
            ],
            "name": "transferFrom",
            "outputs": [
              {
                "name": "success",
                "type": "bool"
              }
            ],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "decimals",
            "outputs": [
              {
                "name": "",
                "type": "uint8"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_newController",
                "type": "address"
              }
            ],
            "name": "changeController",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [
              {
                "name": "_owner",
                "type": "address"
              },
              {
                "name": "_blockNumber",
                "type": "uint256"
              }
            ],
            "name": "balanceOfAt",
            "outputs": [
              {
                "name": "",
                "type": "uint256"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "version",
            "outputs": [
              {
                "name": "",
                "type": "string"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_cloneTokenName",
                "type": "string"
              },
              {
                "name": "_cloneDecimalUnits",
                "type": "uint8"
              },
              {
                "name": "_cloneTokenSymbol",
                "type": "string"
              },
              {
                "name": "_snapshotBlock",
                "type": "uint256"
              },
              {
                "name": "_transfersEnabled",
                "type": "bool"
              }
            ],
            "name": "createCloneToken",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [
              {
                "name": "_owner",
                "type": "address"
              }
            ],
            "name": "balanceOf",
            "outputs": [
              {
                "name": "balance",
                "type": "uint256"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "parentToken",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_owner",
                "type": "address"
              },
              {
                "name": "_amount",
                "type": "uint256"
              }
            ],
            "name": "generateTokens",
            "outputs": [
              {
                "name": "",
                "type": "bool"
              }
            ],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "symbol",
            "outputs": [
              {
                "name": "",
                "type": "string"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [
              {
                "name": "_blockNumber",
                "type": "uint256"
              }
            ],
            "name": "totalSupplyAt",
            "outputs": [
              {
                "name": "",
                "type": "uint256"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_to",
                "type": "address"
              },
              {
                "name": "_amount",
                "type": "uint256"
              }
            ],
            "name": "transfer",
            "outputs": [
              {
                "name": "success",
                "type": "bool"
              }
            ],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "transfersEnabled",
            "outputs": [
              {
                "name": "",
                "type": "bool"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "parentSnapShotBlock",
            "outputs": [
              {
                "name": "",
                "type": "uint256"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_spender",
                "type": "address"
              },
              {
                "name": "_amount",
                "type": "uint256"
              },
              {
                "name": "_extraData",
                "type": "bytes"
              }
            ],
            "name": "approveAndCall",
            "outputs": [
              {
                "name": "success",
                "type": "bool"
              }
            ],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_owner",
                "type": "address"
              },
              {
                "name": "_amount",
                "type": "uint256"
              }
            ],
            "name": "destroyTokens",
            "outputs": [
              {
                "name": "",
                "type": "bool"
              }
            ],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [
              {
                "name": "_owner",
                "type": "address"
              },
              {
                "name": "_spender",
                "type": "address"
              }
            ],
            "name": "allowance",
            "outputs": [
              {
                "name": "remaining",
                "type": "uint256"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_token",
                "type": "address"
              }
            ],
            "name": "claimTokens",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "tokenFactory",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_transfersEnabled",
                "type": "bool"
              }
            ],
            "name": "enableTransfers",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "controller",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "name": "_tokenFactory",
                "type": "address"
              },
              {
                "name": "_parentToken",
                "type": "address"
              },
              {
                "name": "_parentSnapShotBlock",
                "type": "uint256"
              },
              {
                "name": "_tokenName",
                "type": "string"
              },
              {
                "name": "_decimalUnits",
                "type": "uint8"
              },
              {
                "name": "_tokenSymbol",
                "type": "string"
              },
              {
                "name": "_transfersEnabled",
                "type": "bool"
              }
            ],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "constructor"
          },
          {
            "payable": true,
            "stateMutability": "payable",
            "type": "fallback"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "name": "_token",
                "type": "address"
              },
              {
                "indexed": true,
                "name": "_controller",
                "type": "address"
              },
              {
                "indexed": false,
                "name": "_amount",
                "type": "uint256"
              }
            ],
            "name": "ClaimedTokens",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "name": "_from",
                "type": "address"
              },
              {
                "indexed": true,
                "name": "_to",
                "type": "address"
              },
              {
                "indexed": false,
                "name": "_amount",
                "type": "uint256"
              }
            ],
            "name": "Transfer",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "name": "_cloneToken",
                "type": "address"
              },
              {
                "indexed": false,
                "name": "_snapshotBlock",
                "type": "uint256"
              }
            ],
            "name": "NewCloneToken",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "name": "_owner",
                "type": "address"
              },
              {
                "indexed": true,
                "name": "_spender",
                "type": "address"
              },
              {
                "indexed": false,
                "name": "_amount",
                "type": "uint256"
              }
            ],
            "name": "Approval",
            "type": "event"
          }
        ],
        "evm": {
          "bytecode": {
            "linkReferences": {},
            "object": "",
            "sourceMap": "1541:19804:11:-;;;1809:33;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;4244:728;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;305:10:10;:23;;-1:-1:-1;;;;;318:10:10;305:23;;-1:-1:-1;;;;;;305:23:10;;;;;;;;;;4501:12:11;:48;;;;;305:23:10;4501:48:11;-1:-1:-1;;;;;;4501:48:11;;;;;;;;;4244:728;-1:-1:-1;305:23:10;;-1:-1:-1;4566:10:11;;4559:17;;;;;;;;:::i;:::-;-1:-1:-1;4634:8:11;:24;;-1:-1:-1;;4634:24:11;;;;;;;4713:6;4722:12;;4713:21;;;;;;;;:::i;:::-;-1:-1:-1;4790:11:11;:39;;-1:-1:-1;;;;;;4790:39:11;-1:-1:-1;;;;;4790:39:11;;;;;;;;;;;-1:-1:-1;;;4839:19:11;:42;4891:16;:36;;-1:-1:-1;;4891:36:11;;;;;;;;;;-1:-1:-1;4953:12:11;4937:13;:28;1541:19804;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1541:19804:11;;;-1:-1:-1;1541:19804:11;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;"
          },
          "deployedBytecode": {
            "linkReferences": {},
            "object": "",
            "sourceMap": "1541:19804:11:-;;;;;;;;;-1:-1:-1;;;1541:19804:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;20156:10;;20145:22;;-1:-1:-1;;;;;20156:10:11;20145;:22::i;:::-;20137:31;;;;;;;;20202:10;;-1:-1:-1;;;;;20202:10:11;20186:40;20233:9;20244:10;20186:69;;-1:-1:-1;;;20186:69:11;;;;;;-1:-1:-1;;;;;20186:69:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;20178:78;;;;;;;;1541:19804;1583:18;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;1583:18:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9074:829;;;;;;;;;;-1:-1:-1;;;;;9074:829:11;;;;;;;;;;;;;;;;;;;;;;;;2724:25;;;;;;;;;;;;;;;;;;;;;;;;;;;11356:105;;;;;;;;;;;;5794:705;;;;;;;;;;-1:-1:-1;;;;;5794:705:11;;;;;;;;;;;;1663:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;456:116:10;;;;;;;;;;-1:-1:-1;;;;;456:116:10;;;;;11815:938:11;;;;;;;;;;-1:-1:-1;;;;;11815:938:11;;;;;;;1809:33;;;;;;;;;;;;14613:755;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;14613:755:11;;-1:-1:-1;;14613:755:11;;;;;;;;;-1:-1:-1;14613:755:11;;-1:-1:-1;;;14613:755:11;;;;-1:-1:-1;;;;;14613:755:11;;;;;;;;;;;;;;;8541:134;;;;;;;;;;-1:-1:-1;;;;;8541:134:11;;;;;2423:30;;;;;;;;;;;;15699:576;;;;;;;;;;-1:-1:-1;;;;;15699:576:11;;;;;;;1744:20;;;;;;;;;;;;12966:910;;;;;;;;;;;;;;5271:173;;;;;;;;;;-1:-1:-1;;;;;5271:173:11;;;;;;;3303:28;;;;;;;;;;;;2610:31;;;;;;;;;;;;10890:342;;;;;;;;;;;;;-1:-1:-1;;;;;10890:342:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;10890:342:11;;-1:-1:-1;10890:342:11;;-1:-1:-1;;;;;;10890:342:11;16505:500;;;;;;;;;;-1:-1:-1;;;;;16505:500:11;;;;;;;10222:151;;;;;;;;;;-1:-1:-1;;;;;10222:151:11;;;;;;;;;;20563:365;;;;;;;;;;-1:-1:-1;;;;;20563:365:11;;;;;3389:38;;;;;;;;;;;;17228:124;;;;;;;;;;;;;;;;242:25:10;;;;;;;;;;;;19467:222:11;19528:4;;-1:-1:-1;;;;;19567:10:11;;;19563:28;;;19586:5;19579:12;;;;19563:28;19644:5;19632:18;19624:26;;19681:1;19676:4;:6;19669:13;;19467:222;;;;;:::o;1583:18::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;9074:829::-;9174:16;;9142:12;;9174:16;;9166:25;;;;;;;;9514:12;;;9513:54;;-1:-1:-1;;;;;;9540:10:11;9532:19;;;;;;:7;:19;;;;;;;;:29;;;;;;;;;;:34;9513:54;9505:63;;;;;;;;9662:10;;9651:22;;-1:-1:-1;;;;;9662:10:11;9651;:22::i;:::-;9647:130;;;9713:10;;-1:-1:-1;;;;;9713:10:11;9697:37;9735:10;9747:8;9757:7;9697:68;;-1:-1:-1;;;9697:68:11;;;;;;-1:-1:-1;;;;;9697:68:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9689:77;;;;;;;;-1:-1:-1;;;;;9795:10:11;9787:19;;;;;;:7;:19;;;;;;;;:29;;;;;;;;;;;;;;:39;;;9836;;9787;;9836;;;;;;;;;;;;;-1:-1:-1;9892:4:11;9074:829;;;;;:::o;2724:25::-;;;;:::o;11356:105::-;11404:4;11427:27;11441:12;11427:13;:27::i;:::-;11420:34;;11356:105;;:::o;5794:705::-;5882:12;6201:10;;6187;-1:-1:-1;;;;;6187:24:11;;;6201:10;;6187:24;6183:262;;6235:16;;;;6227:25;;;;;;;;-1:-1:-1;;;;;6333:14:11;;;;;;;:7;:14;;;;;;;;6348:10;6333:26;;;;;;;;;;:36;;;6329:54;;;-1:-1:-1;6378:5:11;6371:12;;6329:54;-1:-1:-1;;;;;6397:14:11;;;;;;;:7;:14;;;;;;;;6412:10;6397:26;;;;;;;;;:37;;;;;;;6183:262;6461:31;6472:5;6479:3;6484:7;6461:10;:31::i;:::-;6454:38;;5794:705;;;;;;:::o;1663:21::-;;;;;;:::o;456:116:10:-;219:10;;205;-1:-1:-1;;;;;205:24:10;;;219:10;;205:24;197:33;;;;;;538:10;:27;;-1:-1:-1;;538:27:10;-1:-1:-1;;;;;538:27:10;;;;;;;;;;456:116::o;11815:938:11:-;-1:-1:-1;;;;;12253:16:11;;11904:4;12253:16;;;:8;:16;;;;;:23;:28;;12252:92;;-1:-1:-1;;;;;;12299:16:11;;;;;;:8;:16;;;;;:19;;12331:12;;12299:16;:19;;;;;;;;;;;;;;;:29;-1:-1:-1;;;;;12299:29:11;:44;12252:92;12248:499;;;12372:11;;-1:-1:-1;;;;;12372:11:11;12364:25;12360:222;;12416:11;;12466:19;;-1:-1:-1;;;;;12416:11:11;;;;:23;;12440:6;;12448:38;;12452:12;;12448:3;:38::i;:::-;12416:71;;-1:-1:-1;;;12416:71:11;;;;;;-1:-1:-1;;;;;12416:71:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12409:78;;;;12360:222;-1:-1:-1;12566:1:11;12559:8;;12248:499;-1:-1:-1;;;;;12705:16:11;;;;;;:8;:16;;;;;12694:42;;12723:12;12694:10;:42::i;:::-;12687:49;;;;1809:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14613:755;14825:7;;14848:19;;14844:54;;;14886:12;14869:29;;14844:54;14933:12;;;;;-1:-1:-1;;;;;14933:12:11;:29;14976:4;14994:14;15022:15;15051:18;15083:17;15114;14933:212;;-1:-1:-1;;;14933:212:11;;;;;;-1:-1:-1;;;;;14933:212:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;14933:212:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;14933:212:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;;15156:27:11;;;15184:10;15156:39;;-1:-1:-1;;;15156:39:11;;;;;;-1:-1:-1;;;;;15156:39:11;;;;;;;;;;-1:-1:-1;15156:39:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;15275:50:11;;;15310:14;15275:50;;;;;;;;;;;;;;15350:10;14613:755;-1:-1:-1;;;;;;14613:755:11:o;8541:134::-;8601:15;8635:33;8647:6;8655:12;8635:11;:33::i;:::-;8628:40;;8541:134;;;;:::o;2423:30::-;;;-1:-1:-1;;;;;2423:30:11;;:::o;15699:576::-;15789:4;219:10:10;;15789:4:11;;;;205:10:10;-1:-1:-1;;;;;205:24:10;;;219:10;;205:24;197:33;;;;;;15827:13:11;:11;:13::i;:::-;15805:35;-1:-1:-1;15858:24:11;;;:42;;;;15850:51;;;;;;15958:17;15968:6;15958:9;:17::i;:::-;15933:42;-1:-1:-1;15993:27:11;;;:48;;;;15985:57;;;;;;16074:62;16091:18;16128:7;16111:14;:24;16074:16;:62::i;:::-;-1:-1:-1;;;;;16163:16:11;;;;;;:8;:16;;;;;16146:63;;16181:27;;;16146:16;:63::i;:::-;-1:-1:-1;;;;;16219:28:11;;16228:1;16219:28;16239:7;16219:28;;;;;;;;;;;;;;-1:-1:-1;16264:4:11;;15699:576;-1:-1:-1;;;;15699:576:11:o;1744:20::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12966:910;13405:18;:25;13032:4;;13405:30;;13404:96;;;13487:12;13453:18;13472:1;13453:21;;;;;;;;;;;;;;;;;;;:31;-1:-1:-1;;;;;13453:31:11;:46;13404:96;13400:470;;;13528:11;;-1:-1:-1;;;;;13528:11:11;13520:25;13516:183;;13572:11;;13616:19;;-1:-1:-1;;;;;13572:11:11;;;;:25;;13598:38;;13602:12;;13598:3;:38::i;:::-;13572:65;;-1:-1:-1;;;13572:65:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;13565:72;;;;13516:183;-1:-1:-1;13683:1:11;13676:8;;13400:470;13815:44;13826:18;13846:12;13815:10;:44::i;:::-;13808:51;;;;5271:173;5367:16;;5335:12;;5367:16;;5359:25;;;;;;;;5401:36;5412:10;5424:3;5429:7;5401:10;:36::i;3303:28::-;;;;;;:::o;2610:31::-;;;;:::o;10890:342::-;10988:12;11020:26;11028:8;11038:7;11020;:26::i;:::-;11012:35;;;;;;;;-1:-1:-1;;;;;11058:48:11;;;11120:10;11144:7;11165:4;11183:10;11058:145;;;;;-1:-1:-1;;;11058:145:11;;;-1:-1:-1;;;;;11058:145:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;11058:145:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;11221:4:11;;10890:342;-1:-1:-1;;;;;;10890:342:11:o;16505:500::-;16594:4;219:10:10;;16594:4:11;;;;205:10:10;-1:-1:-1;;;;;205:24:10;;;219:10;;205:24;197:33;;;;;;16632:13:11;:11;:13::i;:::-;16610:35;-1:-1:-1;16663:25:11;;;;16655:34;;;;;;16726:17;16736:6;16726:9;:17::i;:::-;16699:44;-1:-1:-1;16761:30:11;;;;16753:39;;;;;;16802:62;16819:18;16856:7;16839:14;:24;16802:16;:62::i;:::-;-1:-1:-1;;;;;16891:16:11;;;;;;:8;:16;;;;;16874:65;;16909:29;;;16874:16;:65::i;:::-;16966:1;-1:-1:-1;;;;;16949:28:11;;;16969:7;16949:28;;;;;;;;;;;;;;-1:-1:-1;16994:4:11;;16505:500;-1:-1:-1;;;;16505:500:11:o;10222:151::-;-1:-1:-1;;;;;10341:15:11;;;10305:17;10341:15;;;:7;:15;;;;;;;;:25;;;;;;;;;;;;;10222:151::o;20563:365::-;20739:17;219:10:10;;20739:17:11;;205:10:10;-1:-1:-1;;;;;205:24:10;;;219:10;;205:24;197:33;;;;;;-1:-1:-1;;;;;20636:13:11;;;20632:97;;;20665:10;;-1:-1:-1;;;;;20665:10:11;;;;20685:4;:12;;20665:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;20712:7;;20632:97;20771:6;;-1:-1:-1;;;;;;20803:15:11;;;20819:4;20803:21;;-1:-1:-1;;;20803:21:11;;;;;;-1:-1:-1;;;;;20803:21:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;20849:10;;20803:21;;-1:-1:-1;;;;;;20834:14:11;;;;-1:-1:-1;20834:14:11;;20849:10;20803:21;20834:35;;-1:-1:-1;;;20834:35:11;;;;;;-1:-1:-1;;;;;20834:35:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;20901:10:11;;-1:-1:-1;;;;;20901:10:11;;;;20879:42;;;20913:7;20879:42;;;;;;;;;;;;;;232:1:10;20563:365:11;;;:::o;3389:38::-;;;;;;-1:-1:-1;;;;;3389:38:11;;:::o;17228:124::-;219:10:10;;205;-1:-1:-1;;;;;205:24:10;;;219:10;;205:24;197:33;;;;;;17309:16:11;:36;;-1:-1:-1;;17309:36:11;;;;;;;;;;17228:124::o;242:25:10:-;;;-1:-1:-1;;;;;242:25:10;;:::o;6878:1528:11:-;6962:4;;;6986:12;;6982:60;;;7024:4;7017:11;;;;6982:60;7063:19;;7085:12;7063:34;;7055:43;;;;;;-1:-1:-1;;;;;7193:8:11;;;;;;7192:36;;-1:-1:-1;7222:4:11;-1:-1:-1;;;;;7207:20:11;;;;;;;;7192:36;7184:45;;;;;;;;7396:32;7408:5;7415:12;7396:11;:32::i;:::-;7370:58;;7467:7;7445:19;:29;7441:78;;;7500:5;7493:12;;;;7441:78;7605:10;;7594:22;;-1:-1:-1;;;;;7605:10:11;7594;:22::i;:::-;7590:127;;;7659:10;;-1:-1:-1;;;;;7659:10:11;7643:38;7682:5;7689:3;7694:7;7643:59;;-1:-1:-1;;;7643:59:11;;;;;;-1:-1:-1;;;;;7643:59:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7635:68;;;;;;;;-1:-1:-1;;;;;7861:15:11;;;;;;:8;:15;;;;;7844:64;;7878:29;;;7844:16;:64::i;:::-;8061:30;8073:3;8078:12;8061:11;:30::i;:::-;8037:54;-1:-1:-1;8112:27:11;;;:48;;;;8104:57;;;;;;-1:-1:-1;;;;;8213:13:11;;;;;;:8;:13;;;;;8196:60;;8228:27;;;8196:16;:60::i;:::-;-1:-1:-1;;;;;8345:29:11;;;;;;;8366:7;8345:29;;;;;;;;;;;;;;8395:4;8388:11;;6878:1528;;;;;;;;:::o;19761:95::-;19813:4;19840:1;19836;:5;:13;;19848:1;19836:13;;;-1:-1:-1;19844:1:11;;19761:95;-1:-1:-1;19761:95:11:o;17726:765::-;17825:4;18166:8;18188;18261;17845:11;:18;;;;17867:1;17845:23;17841:37;;;17877:1;17870:8;;;;17841:37;17956:18;;;;-1:-1:-1;;17956:20:11;;;17944:33;;;;;;;;;;;;;;;:43;-1:-1:-1;;;;;17944:43:11;17934:53;;17930:117;;18020:18;;;;-1:-1:-1;;18020:20:11;;;18008:33;;;;;;;;;;;;;;;:39;;;;-1:-1:-1;;;;;18008:39:11;;-1:-1:-1;18001:46:11;;17930:117;18070:11;18082:1;18070:14;;;;;;;;;;;;;;;;;;;:24;-1:-1:-1;;;;;18070:24:11;18061:33;;18057:47;;;18103:1;18096:8;;;;18057:47;18199:18;;18177:1;;-1:-1:-1;;;18199:20:11;;-1:-1:-1;18229:217:11;18242:3;18236;:9;18229:217;;;18289:1;18285;18273:9;;;:13;18272:18;18261:29;;18336:6;18308:11;18320:3;18308:16;;;;;;;;;;;;;;;;;;;:26;-1:-1:-1;;;;;18308:26:11;:34;18304:132;;18368:3;18362:9;;18304:132;;;18420:1;18416:3;:5;18410:11;;18304:132;18229:217;;;18462:11;18474:3;18462:16;;;;;;;;;;;;;;;;;;;:22;;;;-1:-1:-1;;;;;18462:22:11;;-1:-1:-1;17726:765:11;;;;;;;;:::o;18709:587::-;18812:18;;18928:32;;;;18812:23;;18811:98;;-1:-1:-1;18861:18:11;;18896:12;;18861:18;;-1:-1:-1;;18861:21:11;;;18849:34;;;;;;;;;;;;;;;:44;-1:-1:-1;;;;;18849:44:11;:59;18811:98;18807:483;;;18976:20;;18963:11;;18976:20;18963:11;18976:20;;;;:::i;:::-;18963:35;;;;;;;;;;;;;;;;;19015:48;;-1:-1:-1;;;;;19080:37:11;;;-1:-1:-1;19080:37:11;19050:12;19015:48;;-1:-1:-1;;19015:48:11;;;;;;;19080:37;;;;18963:35;-1:-1:-1;18807:483:11;;;19201:18;;;;-1:-1:-1;;19201:20:11;;;19189:33;;;;;;;;;;;;;;;19239:37;;-1:-1:-1;;;;;19239:37:11;;;-1:-1:-1;19239:37:11;;;;;;19189:33;-1:-1:-1;18807:483:11;18709:587;;;;:::o;1541:19804::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
          },
          "methodIdentifiers": {
            "allowance(address,address)": "dd62ed3e",
            "approve(address,uint256)": "095ea7b3",
            "approveAndCall(address,uint256,bytes)": "cae9ca51",
            "balanceOf(address)": "70a08231",
            "balanceOfAt(address,uint256)": "4ee2cd7e",
            "changeController(address)": "3cebb823",
            "claimTokens(address)": "df8de3e7",
            "controller()": "f77c4791",
            "createCloneToken(string,uint8,string,uint256,bool)": "6638c087",
            "creationBlock()": "17634514",
            "decimals()": "313ce567",
            "destroyTokens(address,uint256)": "d3ce77fe",
            "enableTransfers(bool)": "f41e60c5",
            "generateTokens(address,uint256)": "827f32c0",
            "name()": "06fdde03",
            "parentSnapShotBlock()": "c5bcc4f1",
            "parentToken()": "80a54001",
            "symbol()": "95d89b41",
            "tokenFactory()": "e77772fe",
            "totalSupply()": "18160ddd",
            "totalSupplyAt(uint256)": "981b24d0",
            "transfer(address,uint256)": "a9059cbb",
            "transferFrom(address,address,uint256)": "23b872dd",
            "transfersEnabled()": "bef97c87",
            "version()": "54fd4d50"
          }
        },
        "metadata": "{\"compiler\":{\"version\":\"0.4.21+commit.dfe3193c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creationBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newController\",\"type\":\"address\"}],\"name\":\"changeController\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"balanceOfAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cloneTokenName\",\"type\":\"string\"},{\"name\":\"_cloneDecimalUnits\",\"type\":\"uint8\"},{\"name\":\"_cloneTokenSymbol\",\"type\":\"string\"},{\"name\":\"_snapshotBlock\",\"type\":\"uint256\"},{\"name\":\"_transfersEnabled\",\"type\":\"bool\"}],\"name\":\"createCloneToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"parentToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"generateTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"totalSupplyAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transfersEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"parentSnapShotBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"destroyTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"claimTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenFactory\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_transfersEnabled\",\"type\":\"bool\"}],\"name\":\"enableTransfers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenFactory\",\"type\":\"address\"},{\"name\":\"_parentToken\",\"type\":\"address\"},{\"name\":\"_parentSnapShotBlock\",\"type\":\"uint256\"},{\"name\":\"_tokenName\",\"type\":\"string\"},{\"name\":\"_decimalUnits\",\"type\":\"uint8\"},{\"name\":\"_tokenSymbol\",\"type\":\"string\"},{\"name\":\"_transfersEnabled\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_controller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"ClaimedTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_cloneToken\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_snapshotBlock\",\"type\":\"uint256\"}],\"name\":\"NewCloneToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}],\"devdoc\":{\"methods\":{\"allowance(address,address)\":{\"details\":\"This function makes it easy to read the `allowed[]` map\",\"params\":{\"_owner\":\"The address of the account that owns the token\",\"_spender\":\"The address of the account able to transfer the tokens\"},\"return\":\"Amount of remaining tokens of _owner that _spender is allowed  to spend\"},\"approve(address,uint256)\":{\"params\":{\"_amount\":\"The amount of tokens to be approved for transfer\",\"_spender\":\"The address of the account able to transfer the tokens\"},\"return\":\"True if the approval was successful\"},\"approveAndCall(address,uint256,bytes)\":{\"params\":{\"_amount\":\"The amount of tokens to be approved for transfer\",\"_spender\":\"The address of the contract able to transfer the tokens\"},\"return\":\"True if the function call was successful\"},\"balanceOf(address)\":{\"params\":{\"_owner\":\"The address that's balance is being requested\"},\"return\":\"The balance of `_owner` at the current block\"},\"balanceOfAt(address,uint256)\":{\"details\":\"Queries the balance of `_owner` at a specific `_blockNumber`\",\"params\":{\"_blockNumber\":\"The block number when the balance is queried\",\"_owner\":\"The address from which the balance will be retrieved\"},\"return\":\"The balance at `_blockNumber`\"},\"changeController(address)\":{\"params\":{\"_newController\":\"The new controller of the contract\"}},\"claimTokens(address)\":{\"params\":{\"_token\":\"The address of the token contract that you want to recover  set to 0 in case you want to extract ether.\"}},\"createCloneToken(string,uint8,string,uint256,bool)\":{\"params\":{\"_cloneDecimalUnits\":\"Number of decimals of the smallest unit\",\"_cloneTokenName\":\"Name of the clone token\",\"_cloneTokenSymbol\":\"Symbol of the clone token\",\"_snapshotBlock\":\"Block when the distribution of the parent token is  copied to set the initial distribution of the new clone token;  if the block is zero than the actual block, the current block is used\",\"_transfersEnabled\":\"True if transfers are allowed in the clone\"},\"return\":\"The address of the new MiniMeToken Contract\"},\"destroyTokens(address,uint256)\":{\"params\":{\"_amount\":\"The quantity of tokens to burn\",\"_owner\":\"The address that will lose the tokens\"},\"return\":\"True if the tokens are burned correctly\"},\"enableTransfers(bool)\":{\"params\":{\"_transfersEnabled\":\"True if transfers are allowed in the clone\"}},\"generateTokens(address,uint256)\":{\"params\":{\"_amount\":\"The quantity of tokens generated\",\"_owner\":\"The address that will be assigned the new tokens\"},\"return\":\"True if the tokens are generated correctly\"},\"totalSupply()\":{\"details\":\"This function makes it easy to get the total number of tokens\",\"return\":\"The total number of tokens\"},\"totalSupplyAt(uint256)\":{\"params\":{\"_blockNumber\":\"The block number when the totalSupply is queried\"},\"return\":\"The total amount of tokens at `_blockNumber`\"},\"transfer(address,uint256)\":{\"params\":{\"_amount\":\"The amount of tokens to be transferred\",\"_to\":\"The address of the recipient\"},\"return\":\"Whether the transfer was successful or not\"},\"transferFrom(address,address,uint256)\":{\"params\":{\"_amount\":\"The amount of tokens to be transferred\",\"_from\":\"The address holding the tokens being transferred\",\"_to\":\"The address of the recipient\"},\"return\":\"True if the transfer was successful\"}}},\"userdoc\":{\"methods\":{\"approve(address,uint256)\":{\"notice\":\"`msg.sender` approves `_spender` to spend `_amount` tokens on  its behalf. This is a modified version of the ERC20 approve function  to be a little bit safer\"},\"approveAndCall(address,uint256,bytes)\":{\"notice\":\"`msg.sender` approves `_spender` to send `_amount` tokens on  its behalf, and then a function is triggered in the contract that is  being approved, `_spender`. This allows users to use their tokens to  interact with contracts in one function call instead of two\"},\"balanceOfAt(address,uint256)\":{\"notice\":\"/////////////\"},\"changeController(address)\":{\"notice\":\"Changes the controller of the contract\"},\"claimTokens(address)\":{\"notice\":\"///////This method can be used by the controller to extract mistakenly  sent tokens to this contract.\"},\"createCloneToken(string,uint8,string,uint256,bool)\":{\"notice\":\"/////////////Creates a new clone token with the initial distribution being  this token at `_snapshotBlock`\"},\"destroyTokens(address,uint256)\":{\"notice\":\"Burns `_amount` tokens from `_owner`\"},\"enableTransfers(bool)\":{\"notice\":\"/////////////Enables token holders to transfer their tokens freely if true\"},\"generateTokens(address,uint256)\":{\"notice\":\"/////////////Generates `_amount` tokens that are assigned to `_owner`\"},\"totalSupplyAt(uint256)\":{\"notice\":\"Total amount of tokens at a specific `_blockNumber`.\"},\"transfer(address,uint256)\":{\"notice\":\"////////////////Send `_amount` tokens to `_to` from `msg.sender`\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Send `_amount` tokens to `_to` from `_from` on the condition it  is approved by `_from`\"}}}},\"settings\":{\"compilationTarget\":{\"minimetoken/contracts/MiniMeToken.sol\":\"MiniMeToken\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"minimetoken/contracts/Controlled.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\ncontract Controlled {\\n    /// @notice The address of the controller is the only address that can call\\n    ///  a function with this modifier\\n    modifier onlyController { require(msg.sender == controller); _; }\\n\\n    address public controller;\\n\\n    function Controlled() public { controller = msg.sender;}\\n\\n    /// @notice Changes the controller of the contract\\n    /// @param _newController The new controller of the contract\\n    function changeController(address _newController) public onlyController {\\n        controller = _newController;\\n    }\\n}\\n\",\"keccak256\":\"0x770798704985a4588762ea932b913bc1df01b4625ab86c5a7278883bbde44b78\"},\"minimetoken/contracts/MiniMeToken.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\n/*\\n    Copyright 2016, Jordi Baylina\\n\\n    This program is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU General Public License as published by\\n    the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    This program is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU General Public License for more details.\\n\\n    You should have received a copy of the GNU General Public License\\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n */\\n\\n/// @title MiniMeToken Contract\\n/// @author Jordi Baylina\\n/// @dev This token contract's goal is to make it easy for anyone to clone this\\n///  token using the token distribution at a given block, this will allow DAO's\\n///  and DApps to upgrade their features in a decentralized manner without\\n///  affecting the original token\\n/// @dev It is ERC20 compliant, but still needs to under go further testing.\\n\\nimport \\\"./Controlled.sol\\\";\\nimport \\\"./TokenController.sol\\\";\\n\\ncontract ApproveAndCallFallBack {\\n    function receiveApproval(address from, uint256 _amount, address _token, bytes _data) public;\\n}\\n\\n/// @dev The actual token contract, the default controller is the msg.sender\\n///  that deploys the contract, so usually this token will be deployed by a\\n///  token controller contract, which Giveth will call a \\\"Campaign\\\"\\ncontract MiniMeToken is Controlled {\\n\\n    string public name;                //The Token's name: e.g. DigixDAO Tokens\\n    uint8 public decimals;             //Number of decimals of the smallest unit\\n    string public symbol;              //An identifier: e.g. REP\\n    string public version = 'MMT_0.2'; //An arbitrary versioning scheme\\n\\n\\n    /// @dev `Checkpoint` is the structure that attaches a block number to a\\n    ///  given value, the block number attached is the one that last changed the\\n    ///  value\\n    struct  Checkpoint {\\n\\n        // `fromBlock` is the block number that the value was generated from\\n        uint128 fromBlock;\\n\\n        // `value` is the amount of tokens at a specific block number\\n        uint128 value;\\n    }\\n\\n    // `parentToken` is the Token address that was cloned to produce this token;\\n    //  it will be 0x0 for a token that was not cloned\\n    MiniMeToken public parentToken;\\n\\n    // `parentSnapShotBlock` is the block number from the Parent Token that was\\n    //  used to determine the initial distribution of the Clone Token\\n    uint public parentSnapShotBlock;\\n\\n    // `creationBlock` is the block number that the Clone Token was created\\n    uint public creationBlock;\\n\\n    // `balances` is the map that tracks the balance of each address, in this\\n    //  contract when the balance changes the block number that the change\\n    //  occurred is also included in the map\\n    mapping (address => Checkpoint[]) balances;\\n\\n    // `allowed` tracks any extra transfer rights as in all ERC20 tokens\\n    mapping (address => mapping (address => uint256)) allowed;\\n\\n    // Tracks the history of the `totalSupply` of the token\\n    Checkpoint[] totalSupplyHistory;\\n\\n    // Flag that determines if the token is transferable or not.\\n    bool public transfersEnabled;\\n\\n    // The factory used to create new clone tokens\\n    MiniMeTokenFactory public tokenFactory;\\n\\n////////////////\\n// Constructor\\n////////////////\\n\\n    /// @notice Constructor to create a MiniMeToken\\n    /// @param _tokenFactory The address of the MiniMeTokenFactory contract that\\n    ///  will create the Clone token contracts, the token factory needs to be\\n    ///  deployed first\\n    /// @param _parentToken Address of the parent token, set to 0x0 if it is a\\n    ///  new token\\n    /// @param _parentSnapShotBlock Block of the parent token that will\\n    ///  determine the initial distribution of the clone token, set to 0 if it\\n    ///  is a new token\\n    /// @param _tokenName Name of the new token\\n    /// @param _decimalUnits Number of decimals of the new token\\n    /// @param _tokenSymbol Token Symbol for the new token\\n    /// @param _transfersEnabled If true, tokens will be able to be transferred\\n    function MiniMeToken(\\n        address _tokenFactory,\\n        address _parentToken,\\n        uint _parentSnapShotBlock,\\n        string _tokenName,\\n        uint8 _decimalUnits,\\n        string _tokenSymbol,\\n        bool _transfersEnabled\\n    ) public {\\n        tokenFactory = MiniMeTokenFactory(_tokenFactory);\\n        name = _tokenName;                                 // Set the name\\n        decimals = _decimalUnits;                          // Set the decimals\\n        symbol = _tokenSymbol;                             // Set the symbol\\n        parentToken = MiniMeToken(_parentToken);\\n        parentSnapShotBlock = _parentSnapShotBlock;\\n        transfersEnabled = _transfersEnabled;\\n        creationBlock = block.number;\\n    }\\n\\n\\n///////////////////\\n// ERC20 Methods\\n///////////////////\\n\\n    /// @notice Send `_amount` tokens to `_to` from `msg.sender`\\n    /// @param _to The address of the recipient\\n    /// @param _amount The amount of tokens to be transferred\\n    /// @return Whether the transfer was successful or not\\n    function transfer(address _to, uint256 _amount) public returns (bool success) {\\n        require(transfersEnabled);\\n        return doTransfer(msg.sender, _to, _amount);\\n    }\\n\\n    /// @notice Send `_amount` tokens to `_to` from `_from` on the condition it\\n    ///  is approved by `_from`\\n    /// @param _from The address holding the tokens being transferred\\n    /// @param _to The address of the recipient\\n    /// @param _amount The amount of tokens to be transferred\\n    /// @return True if the transfer was successful\\n    function transferFrom(address _from, address _to, uint256 _amount\\n    ) public returns (bool success) {\\n\\n        // The controller of this contract can move tokens around at will,\\n        //  this is important to recognize! Confirm that you trust the\\n        //  controller of this contract, which in most situations should be\\n        //  another open source smart contract or 0x0\\n        if (msg.sender != controller) {\\n            require(transfersEnabled);\\n\\n            // The standard ERC 20 transferFrom functionality\\n            if (allowed[_from][msg.sender] < _amount) return false;\\n            allowed[_from][msg.sender] -= _amount;\\n        }\\n        return doTransfer(_from, _to, _amount);\\n    }\\n\\n    /// @dev This is the actual transfer function in the token contract, it can\\n    ///  only be called by other functions in this contract.\\n    /// @param _from The address holding the tokens being transferred\\n    /// @param _to The address of the recipient\\n    /// @param _amount The amount of tokens to be transferred\\n    /// @return True if the transfer was successful\\n    function doTransfer(address _from, address _to, uint _amount\\n    ) internal returns(bool) {\\n\\n           if (_amount == 0) {\\n               return true;\\n           }\\n\\n           require(parentSnapShotBlock < block.number);\\n\\n           // Do not allow transfer to 0x0 or the token contract itself\\n           require((_to != 0) && (_to != address(this)));\\n\\n           // If the amount being transfered is more than the balance of the\\n           //  account the transfer returns false\\n           var previousBalanceFrom = balanceOfAt(_from, block.number);\\n           if (previousBalanceFrom < _amount) {\\n               return false;\\n           }\\n\\n           // Alerts the token controller of the transfer\\n           if (isContract(controller)) {\\n               require(TokenController(controller).onTransfer(_from, _to, _amount));\\n           }\\n\\n           // First update the balance array with the new value for the address\\n           //  sending the tokens\\n           updateValueAtNow(balances[_from], previousBalanceFrom - _amount);\\n\\n           // Then update the balance array with the new value for the address\\n           //  receiving the tokens\\n           var previousBalanceTo = balanceOfAt(_to, block.number);\\n           require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\\n           updateValueAtNow(balances[_to], previousBalanceTo + _amount);\\n\\n           // An event to make the transfer easy to find on the blockchain\\n           Transfer(_from, _to, _amount);\\n\\n           return true;\\n    }\\n\\n    /// @param _owner The address that's balance is being requested\\n    /// @return The balance of `_owner` at the current block\\n    function balanceOf(address _owner) public constant returns (uint256 balance) {\\n        return balanceOfAt(_owner, block.number);\\n    }\\n\\n    /// @notice `msg.sender` approves `_spender` to spend `_amount` tokens on\\n    ///  its behalf. This is a modified version of the ERC20 approve function\\n    ///  to be a little bit safer\\n    /// @param _spender The address of the account able to transfer the tokens\\n    /// @param _amount The amount of tokens to be approved for transfer\\n    /// @return True if the approval was successful\\n    function approve(address _spender, uint256 _amount) public returns (bool success) {\\n        require(transfersEnabled);\\n\\n        // To change the approve amount you first have to reduce the addresses`\\n        //  allowance to zero by calling `approve(_spender,0)` if it is not\\n        //  already 0 to mitigate the race condition described here:\\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n        require((_amount == 0) || (allowed[msg.sender][_spender] == 0));\\n\\n        // Alerts the token controller of the approve function call\\n        if (isContract(controller)) {\\n            require(TokenController(controller).onApprove(msg.sender, _spender, _amount));\\n        }\\n\\n        allowed[msg.sender][_spender] = _amount;\\n        Approval(msg.sender, _spender, _amount);\\n        return true;\\n    }\\n\\n    /// @dev This function makes it easy to read the `allowed[]` map\\n    /// @param _owner The address of the account that owns the token\\n    /// @param _spender The address of the account able to transfer the tokens\\n    /// @return Amount of remaining tokens of _owner that _spender is allowed\\n    ///  to spend\\n    function allowance(address _owner, address _spender\\n    ) public constant returns (uint256 remaining) {\\n        return allowed[_owner][_spender];\\n    }\\n\\n    /// @notice `msg.sender` approves `_spender` to send `_amount` tokens on\\n    ///  its behalf, and then a function is triggered in the contract that is\\n    ///  being approved, `_spender`. This allows users to use their tokens to\\n    ///  interact with contracts in one function call instead of two\\n    /// @param _spender The address of the contract able to transfer the tokens\\n    /// @param _amount The amount of tokens to be approved for transfer\\n    /// @return True if the function call was successful\\n    function approveAndCall(address _spender, uint256 _amount, bytes _extraData\\n    ) public returns (bool success) {\\n        require(approve(_spender, _amount));\\n\\n        ApproveAndCallFallBack(_spender).receiveApproval(\\n            msg.sender,\\n            _amount,\\n            this,\\n            _extraData\\n        );\\n\\n        return true;\\n    }\\n\\n    /// @dev This function makes it easy to get the total number of tokens\\n    /// @return The total number of tokens\\n    function totalSupply() public constant returns (uint) {\\n        return totalSupplyAt(block.number);\\n    }\\n\\n\\n////////////////\\n// Query balance and totalSupply in History\\n////////////////\\n\\n    /// @dev Queries the balance of `_owner` at a specific `_blockNumber`\\n    /// @param _owner The address from which the balance will be retrieved\\n    /// @param _blockNumber The block number when the balance is queried\\n    /// @return The balance at `_blockNumber`\\n    function balanceOfAt(address _owner, uint _blockNumber) public constant\\n        returns (uint) {\\n\\n        // These next few lines are used when the balance of the token is\\n        //  requested before a check point was ever created for this token, it\\n        //  requires that the `parentToken.balanceOfAt` be queried at the\\n        //  genesis block for that token as this contains initial balance of\\n        //  this token\\n        if ((balances[_owner].length == 0)\\n            || (balances[_owner][0].fromBlock > _blockNumber)) {\\n            if (address(parentToken) != 0) {\\n                return parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock));\\n            } else {\\n                // Has no parent\\n                return 0;\\n            }\\n\\n        // This will return the expected balance during normal situations\\n        } else {\\n            return getValueAt(balances[_owner], _blockNumber);\\n        }\\n    }\\n\\n    /// @notice Total amount of tokens at a specific `_blockNumber`.\\n    /// @param _blockNumber The block number when the totalSupply is queried\\n    /// @return The total amount of tokens at `_blockNumber`\\n    function totalSupplyAt(uint _blockNumber) public constant returns(uint) {\\n\\n        // These next few lines are used when the totalSupply of the token is\\n        //  requested before a check point was ever created for this token, it\\n        //  requires that the `parentToken.totalSupplyAt` be queried at the\\n        //  genesis block for this token as that contains totalSupply of this\\n        //  token at this block number.\\n        if ((totalSupplyHistory.length == 0)\\n            || (totalSupplyHistory[0].fromBlock > _blockNumber)) {\\n            if (address(parentToken) != 0) {\\n                return parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock));\\n            } else {\\n                return 0;\\n            }\\n\\n        // This will return the expected totalSupply during normal situations\\n        } else {\\n            return getValueAt(totalSupplyHistory, _blockNumber);\\n        }\\n    }\\n\\n////////////////\\n// Clone Token Method\\n////////////////\\n\\n    /// @notice Creates a new clone token with the initial distribution being\\n    ///  this token at `_snapshotBlock`\\n    /// @param _cloneTokenName Name of the clone token\\n    /// @param _cloneDecimalUnits Number of decimals of the smallest unit\\n    /// @param _cloneTokenSymbol Symbol of the clone token\\n    /// @param _snapshotBlock Block when the distribution of the parent token is\\n    ///  copied to set the initial distribution of the new clone token;\\n    ///  if the block is zero than the actual block, the current block is used\\n    /// @param _transfersEnabled True if transfers are allowed in the clone\\n    /// @return The address of the new MiniMeToken Contract\\n    function createCloneToken(\\n        string _cloneTokenName,\\n        uint8 _cloneDecimalUnits,\\n        string _cloneTokenSymbol,\\n        uint _snapshotBlock,\\n        bool _transfersEnabled\\n        ) public returns(address) {\\n        if (_snapshotBlock == 0) _snapshotBlock = block.number;\\n        MiniMeToken cloneToken = tokenFactory.createCloneToken(\\n            this,\\n            _snapshotBlock,\\n            _cloneTokenName,\\n            _cloneDecimalUnits,\\n            _cloneTokenSymbol,\\n            _transfersEnabled\\n            );\\n\\n        cloneToken.changeController(msg.sender);\\n\\n        // An event to make the token easy to find on the blockchain\\n        NewCloneToken(address(cloneToken), _snapshotBlock);\\n        return address(cloneToken);\\n    }\\n\\n////////////////\\n// Generate and destroy tokens\\n////////////////\\n\\n    /// @notice Generates `_amount` tokens that are assigned to `_owner`\\n    /// @param _owner The address that will be assigned the new tokens\\n    /// @param _amount The quantity of tokens generated\\n    /// @return True if the tokens are generated correctly\\n    function generateTokens(address _owner, uint _amount\\n    ) public onlyController returns (bool) {\\n        uint curTotalSupply = totalSupply();\\n        require(curTotalSupply + _amount >= curTotalSupply); // Check for overflow\\n        uint previousBalanceTo = balanceOf(_owner);\\n        require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\\n        updateValueAtNow(totalSupplyHistory, curTotalSupply + _amount);\\n        updateValueAtNow(balances[_owner], previousBalanceTo + _amount);\\n        Transfer(0, _owner, _amount);\\n        return true;\\n    }\\n\\n\\n    /// @notice Burns `_amount` tokens from `_owner`\\n    /// @param _owner The address that will lose the tokens\\n    /// @param _amount The quantity of tokens to burn\\n    /// @return True if the tokens are burned correctly\\n    function destroyTokens(address _owner, uint _amount\\n    ) onlyController public returns (bool) {\\n        uint curTotalSupply = totalSupply();\\n        require(curTotalSupply >= _amount);\\n        uint previousBalanceFrom = balanceOf(_owner);\\n        require(previousBalanceFrom >= _amount);\\n        updateValueAtNow(totalSupplyHistory, curTotalSupply - _amount);\\n        updateValueAtNow(balances[_owner], previousBalanceFrom - _amount);\\n        Transfer(_owner, 0, _amount);\\n        return true;\\n    }\\n\\n////////////////\\n// Enable tokens transfers\\n////////////////\\n\\n\\n    /// @notice Enables token holders to transfer their tokens freely if true\\n    /// @param _transfersEnabled True if transfers are allowed in the clone\\n    function enableTransfers(bool _transfersEnabled) public onlyController {\\n        transfersEnabled = _transfersEnabled;\\n    }\\n\\n////////////////\\n// Internal helper functions to query and set a value in a snapshot array\\n////////////////\\n\\n    /// @dev `getValueAt` retrieves the number of tokens at a given block number\\n    /// @param checkpoints The history of values being queried\\n    /// @param _block The block number to retrieve the value at\\n    /// @return The number of tokens being queried\\n    function getValueAt(Checkpoint[] storage checkpoints, uint _block\\n    ) constant internal returns (uint) {\\n        if (checkpoints.length == 0) return 0;\\n\\n        // Shortcut for the actual value\\n        if (_block >= checkpoints[checkpoints.length-1].fromBlock)\\n            return checkpoints[checkpoints.length-1].value;\\n        if (_block < checkpoints[0].fromBlock) return 0;\\n\\n        // Binary search of the value in the array\\n        uint min = 0;\\n        uint max = checkpoints.length-1;\\n        while (max > min) {\\n            uint mid = (max + min + 1)/ 2;\\n            if (checkpoints[mid].fromBlock<=_block) {\\n                min = mid;\\n            } else {\\n                max = mid-1;\\n            }\\n        }\\n        return checkpoints[min].value;\\n    }\\n\\n    /// @dev `updateValueAtNow` used to update the `balances` map and the\\n    ///  `totalSupplyHistory`\\n    /// @param checkpoints The history of data being updated\\n    /// @param _value The new number of tokens\\n    function updateValueAtNow(Checkpoint[] storage checkpoints, uint _value\\n    ) internal  {\\n        if ((checkpoints.length == 0)\\n        || (checkpoints[checkpoints.length -1].fromBlock < block.number)) {\\n               Checkpoint storage newCheckPoint = checkpoints[ checkpoints.length++ ];\\n               newCheckPoint.fromBlock =  uint128(block.number);\\n               newCheckPoint.value = uint128(_value);\\n           } else {\\n               Checkpoint storage oldCheckPoint = checkpoints[checkpoints.length-1];\\n               oldCheckPoint.value = uint128(_value);\\n           }\\n    }\\n\\n    /// @dev Internal function to determine if an address is a contract\\n    /// @param _addr The address being queried\\n    /// @return True if `_addr` is a contract\\n    function isContract(address _addr) constant internal returns(bool) {\\n        uint size;\\n        if (_addr == 0) return false;\\n        assembly {\\n            size := extcodesize(_addr)\\n        }\\n        return size>0;\\n    }\\n\\n    /// @dev Helper function to return a min betwen the two uints\\n    function min(uint a, uint b) pure internal returns (uint) {\\n        return a < b ? a : b;\\n    }\\n\\n    /// @notice The fallback function: If the contract's controller has not been\\n    ///  set to 0, then the `proxyPayment` method is called which relays the\\n    ///  ether and creates tokens as described in the token controller contract\\n    function () public payable {\\n        require(isContract(controller));\\n        require(TokenController(controller).proxyPayment.value(msg.value)(msg.sender));\\n    }\\n\\n//////////\\n// Safety Methods\\n//////////\\n\\n    /// @notice This method can be used by the controller to extract mistakenly\\n    ///  sent tokens to this contract.\\n    /// @param _token The address of the token contract that you want to recover\\n    ///  set to 0 in case you want to extract ether.\\n    function claimTokens(address _token) public onlyController {\\n        if (_token == 0x0) {\\n            controller.transfer(this.balance);\\n            return;\\n        }\\n\\n        MiniMeToken token = MiniMeToken(_token);\\n        uint balance = token.balanceOf(this);\\n        token.transfer(controller, balance);\\n        ClaimedTokens(_token, controller, balance);\\n    }\\n\\n////////////////\\n// Events\\n////////////////\\n    event ClaimedTokens(address indexed _token, address indexed _controller, uint _amount);\\n    event Transfer(address indexed _from, address indexed _to, uint256 _amount);\\n    event NewCloneToken(address indexed _cloneToken, uint _snapshotBlock);\\n    event Approval(\\n        address indexed _owner,\\n        address indexed _spender,\\n        uint256 _amount\\n        );\\n\\n}\\n\\n\\n////////////////\\n// MiniMeTokenFactory\\n////////////////\\n\\n/// @dev This contract is used to generate clone contracts from a contract.\\n///  In solidity this is the way to create a contract from a contract of the\\n///  same class\\ncontract MiniMeTokenFactory {\\n\\n    /// @notice Update the DApp by creating a new token with new functionalities\\n    ///  the msg.sender becomes the controller of this clone token\\n    /// @param _parentToken Address of the token being cloned\\n    /// @param _snapshotBlock Block of the parent token that will\\n    ///  determine the initial distribution of the clone token\\n    /// @param _tokenName Name of the new token\\n    /// @param _decimalUnits Number of decimals of the new token\\n    /// @param _tokenSymbol Token Symbol for the new token\\n    /// @param _transfersEnabled If true, tokens will be able to be transferred\\n    /// @return The address of the new token contract\\n    function createCloneToken(\\n        address _parentToken,\\n        uint _snapshotBlock,\\n        string _tokenName,\\n        uint8 _decimalUnits,\\n        string _tokenSymbol,\\n        bool _transfersEnabled\\n    ) public returns (MiniMeToken) {\\n        MiniMeToken newToken = new MiniMeToken(\\n            this,\\n            _parentToken,\\n            _snapshotBlock,\\n            _tokenName,\\n            _decimalUnits,\\n            _tokenSymbol,\\n            _transfersEnabled\\n            );\\n\\n        newToken.changeController(msg.sender);\\n        return newToken;\\n    }\\n}\\n\",\"keccak256\":\"0x3dba5ff0dd1de9ebff6cd48898e78f7ce7c9996d345c702dca6a3a7d69750ed4\"},\"minimetoken/contracts/TokenController.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\n/// @dev The token controller contract must implement these functions\\ncontract TokenController {\\n    /// @notice Called when `_owner` sends ether to the MiniMe Token contract\\n    /// @param _owner The address that sent the ether to create tokens\\n    /// @return True if the ether is accepted, false if it throws\\n    function proxyPayment(address _owner) public payable returns(bool);\\n\\n    /// @notice Notifies the controller about a token transfer allowing the\\n    ///  controller to react if desired\\n    /// @param _from The origin of the transfer\\n    /// @param _to The destination of the transfer\\n    /// @param _amount The amount of the transfer\\n    /// @return False if the controller does not authorize the transfer\\n    function onTransfer(address _from, address _to, uint _amount) public returns(bool);\\n\\n    /// @notice Notifies the controller about an approval allowing the\\n    ///  controller to react if desired\\n    /// @param _owner The address that calls `approve()`\\n    /// @param _spender The spender in the `approve()` call\\n    /// @param _amount The amount in the `approve()` call\\n    /// @return False if the controller does not authorize the approval\\n    function onApprove(address _owner, address _spender, uint _amount) public\\n        returns(bool);\\n}\\n\",\"keccak256\":\"0xf8bf7de20c0412ab90ec43c1432508a8316e17bd246adffa737e0d779413ff5e\"}},\"version\":1}"
      },
      "MiniMeTokenFactory": {
        "abi": [
          {
            "constant": false,
            "inputs": [
              {
                "name": "_parentToken",
                "type": "address"
              },
              {
                "name": "_snapshotBlock",
                "type": "uint256"
              },
              {
                "name": "_tokenName",
                "type": "string"
              },
              {
                "name": "_decimalUnits",
                "type": "uint8"
              },
              {
                "name": "_tokenSymbol",
                "type": "string"
              },
              {
                "name": "_transfersEnabled",
                "type": "bool"
              }
            ],
            "name": "createCloneToken",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          }
        ],
        "evm": {
          "bytecode": {
            "linkReferences": {},
            "object": "",
            "sourceMap": "21574:1241:11:-;;;;;;;;;;;;;;;;;"
          },
          "deployedBytecode": {
            "linkReferences": {},
            "object": "6060604052600436106100405763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416635b7b72c18114610045575b600080fd5b341561005057600080fd5b6101096004803573ffffffffffffffffffffffffffffffffffffffff169060248035919060649060443590810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284378201915050505050509190803560ff1690602001909190803590602001908201803590602001908080601f0160208091040260200160405190810160405281815292919060208401838380828437509496505050509135151591506101329050565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b6000803088888888888861014461030f565b73ffffffffffffffffffffffffffffffffffffffff8089168252871660208201526040810186905260ff8416608082015281151560c082015260e0606082018181529060a0830190830187818151815260200191508051906020019080838360005b838110156101be5780820151838201526020016101a6565b50505050905090810190601f1680156101eb5780820380516001836020036101000a031916815260200191505b50838103825285818151815260200191508051906020019080838360005b83811015610221578082015183820152602001610209565b50505050905090810190601f16801561024e5780820380516001836020036101000a031916815260200191505b509950505050505050505050604051809103906000f080151561027057600080fd5b90508073ffffffffffffffffffffffffffffffffffffffff16633cebb823336040517c010000000000000000000000000000000000000000000000000000000063ffffffff841602815273ffffffffffffffffffffffffffffffffffffffff9091166004820152602401600060405180830381600087803b15156102f357600080fd5b5af1151561030057600080fd5b50919998505050505050505050565b6040516119dd80610320833901905600606060405260408051908101604052600781527f4d4d545f302e3200000000000000000000000000000000000000000000000000602082015260049080516200004d92916020019062000162565b5034156200005a57600080fd5b604051620019dd380380620019dd833981016040528080519190602001805191906020018051919060200180518201919060200180519190602001805182019190602001805160008054600160a060020a03338116600160a060020a031990921691909117909155600b8054918b166101000261010060a860020a0319909216919091179055915060019050848051620000f992916020019062000162565b506002805460ff191660ff851617905560038280516200011e92916020019062000162565b5060058054600160a060020a031916600160a060020a039790971696909617909555505050600655600b805460ff1916911515919091179055504360075562000207565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620001a557805160ff1916838001178555620001d5565b82800160010185558215620001d5579182015b82811115620001d5578251825591602001919060010190620001b8565b50620001e3929150620001e7565b5090565b6200020491905b80821115620001e35760008155600101620001ee565b90565b6117c680620002176000396000f30060606040526004361061012f5763ffffffff60e060020a60003504166306fdde0381146101c4578063095ea7b31461024e578063176345141461028457806318160ddd146102a957806323b872dd146102bc578063313ce567146102e45780633cebb8231461030d5780634ee2cd7e1461032c57806354fd4d501461034e5780636638c0871461036157806370a082311461042557806380a5400114610444578063827f32c01461045757806395d89b4114610479578063981b24d01461048c578063a9059cbb146104a2578063bef97c87146104c4578063c5bcc4f1146104d7578063cae9ca51146104ea578063d3ce77fe1461054f578063dd62ed3e14610571578063df8de3e714610596578063e77772fe146105b5578063f41e60c5146105c8578063f77c4791146105e0575b60005461014490600160a060020a03166105f3565b151561014f57600080fd5b600054600160a060020a031663f48c3054343360405160e060020a63ffffffff8516028152600160a060020a0390911660048201526024016020604051808303818588803b151561019f57600080fd5b5af115156101ac57600080fd5b505050506040518051905015156101c257600080fd5b005b34156101cf57600080fd5b6101d7610620565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156102135780820151838201526020016101fb565b50505050905090810190601f1680156102405780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561025957600080fd5b610270600160a060020a03600435166024356106be565b604051901515815260200160405180910390f35b341561028f57600080fd5b610297610816565b60405190815260200160405180910390f35b34156102b457600080fd5b61029761081c565b34156102c757600080fd5b610270600160a060020a036004358116906024351660443561082d565b34156102ef57600080fd5b6102f76108cf565b60405160ff909116815260200160405180910390f35b341561031857600080fd5b6101c2600160a060020a03600435166108d8565b341561033757600080fd5b610297600160a060020a0360043516602435610922565b341561035957600080fd5b6101d7610a4b565b341561036c57600080fd5b61040960046024813581810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284378201915050505050509190803560ff1690602001909190803590602001908201803590602001908080601f016020809104026020016040519081016040528181529291906020840183838082843750949650508435946020013515159350610ab692505050565b604051600160a060020a03909116815260200160405180910390f35b341561043057600080fd5b610297600160a060020a0360043516610ccf565b341561044f57600080fd5b610409610ce3565b341561046257600080fd5b610270600160a060020a0360043516602435610cf2565b341561048457600080fd5b6101d7610dc2565b341561049757600080fd5b610297600435610e2d565b34156104ad57600080fd5b610270600160a060020a0360043516602435610f09565b34156104cf57600080fd5b610270610f28565b34156104e257600080fd5b610297610f31565b34156104f557600080fd5b61027060048035600160a060020a03169060248035919060649060443590810190830135806020601f82018190048102016040519081016040528181529291906020840183838082843750949650610f3795505050505050565b341561055a57600080fd5b610270600160a060020a036004351660243561104e565b341561057c57600080fd5b610297600160a060020a0360043581169060243516611118565b34156105a157600080fd5b6101c2600160a060020a0360043516611143565b34156105c057600080fd5b6104096112d4565b34156105d357600080fd5b6101c260043515156112e8565b34156105eb57600080fd5b610409611316565b600080600160a060020a038316151561060f576000915061061a565b823b90506000811191505b50919050565b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156106b65780601f1061068b576101008083540402835291602001916106b6565b820191906000526020600020905b81548152906001019060200180831161069957829003601f168201915b505050505081565b600b5460009060ff1615156106d257600080fd5b8115806107025750600160a060020a03338116600090815260096020908152604080832093871683529290522054155b151561070d57600080fd5b60005461072290600160a060020a03166105f3565b156107ac57600054600160a060020a031663da682aeb33858560405160e060020a63ffffffff8616028152600160a060020a0393841660048201529190921660248201526044810191909152606401602060405180830381600087803b151561078a57600080fd5b5af1151561079757600080fd5b5050506040518051905015156107ac57600080fd5b600160a060020a03338116600081815260096020908152604080832094881680845294909152908190208590557f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a35060015b92915050565b60075481565b600061082743610e2d565b90505b90565b6000805433600160a060020a039081169116146108ba57600b5460ff16151561085557600080fd5b600160a060020a03808516600090815260096020908152604080832033909416835292905220548290101561088c575060006108c8565b600160a060020a03808516600090815260096020908152604080832033909416835292905220805483900390555b6108c5848484611325565b90505b9392505050565b60025460ff1681565b60005433600160a060020a039081169116146108f357600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600160a060020a038216600090815260086020526040812054158061097e5750600160a060020a03831660009081526008602052604081208054849290811061096757fe5b6000918252602090912001546001608060020a0316115b15610a2257600554600160a060020a031615610a1a57600554600654600160a060020a0390911690634ee2cd7e9085906109b99086906114f2565b60405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b15156109fc57600080fd5b5af11515610a0957600080fd5b505050604051805190509050610810565b506000610810565b600160a060020a0383166000908152600860205260409020610a449083611508565b9050610810565b60048054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156106b65780601f1061068b576101008083540402835291602001916106b6565b600080831515610ac4574393505b600b546101009004600160a060020a0316635b7b72c130868a8a8a8960405160e060020a63ffffffff8916028152600160a060020a038716600482019081526024820187905260ff8516606483015282151560a483015260c0604483019081529091608481019060c40187818151815260200191508051906020019080838360005b83811015610b5e578082015183820152602001610b46565b50505050905090810190601f168015610b8b5780820380516001836020036101000a031916815260200191505b50838103825285818151815260200191508051906020019080838360005b83811015610bc1578082015183820152602001610ba9565b50505050905090810190601f168015610bee5780820380516001836020036101000a031916815260200191505b5098505050505050505050602060405180830381600087803b1515610c1257600080fd5b5af11515610c1f57600080fd5b5050506040518051915050600160a060020a038116633cebb8233360405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401600060405180830381600087803b1515610c7857600080fd5b5af11515610c8557600080fd5b50505080600160a060020a03167f086c875b377f900b07ce03575813022f05dd10ed7640b5282cf6d3c3fc352ade8560405190815260200160405180910390a29695505050505050565b6000610cdb8243610922565b90505b919050565b600554600160a060020a031681565b600080548190819033600160a060020a03908116911614610d1257600080fd5b610d1a61081c565b915083820182901015610d2c57600080fd5b610d3585610ccf565b905083810181901015610d4757600080fd5b610d54600a858401611667565b600160a060020a0385166000908152600860205260409020610d7890828601611667565b84600160a060020a031660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8660405190815260200160405180910390a3506001949350505050565b60038054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156106b65780601f1061068b576101008083540402835291602001916106b6565b600a546000901580610e62575081600a6000815481101515610e4b57fe5b6000918252602090912001546001608060020a0316115b15610ef757600554600160a060020a031615610eef57600554600654600160a060020a039091169063981b24d090610e9b9085906114f2565b60405160e060020a63ffffffff84160281526004810191909152602401602060405180830381600087803b1515610ed157600080fd5b5af11515610ede57600080fd5b505050604051805190509050610cde565b506000610cde565b610f02600a83611508565b9050610cde565b600b5460009060ff161515610f1d57600080fd5b6108c8338484611325565b600b5460ff1681565b60065481565b6000610f4384846106be565b1515610f4e57600080fd5b83600160a060020a0316638f4ffcb1338530866040518563ffffffff1660e060020a0281526004018085600160a060020a0316600160a060020a0316815260200184815260200183600160a060020a0316600160a060020a0316815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610fe6578082015183820152602001610fce565b50505050905090810190601f1680156110135780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b151561103457600080fd5b5af1151561104157600080fd5b5060019695505050505050565b600080548190819033600160a060020a0390811691161461106e57600080fd5b61107661081c565b91508382101561108557600080fd5b61108e85610ccf565b90508381101561109d57600080fd5b6110aa600a858403611667565b600160a060020a03851660009081526008602052604090206110ce90858303611667565b600085600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8660405190815260200160405180910390a3506001949350505050565b600160a060020a03918216600090815260096020908152604080832093909416825291909152205490565b60008054819033600160a060020a0390811691161461116157600080fd5b600160a060020a03831615156111af57600054600160a060020a039081169030163180156108fc0290604051600060405180830381858888f1935050505015156111aa57600080fd5b6112cf565b82915081600160a060020a03166370a082313060405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b151561120057600080fd5b5af1151561120d57600080fd5b5050506040518051600054909250600160a060020a03808516925063a9059cbb91168360405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151561127357600080fd5b5af1151561128057600080fd5b50505060405180515050600054600160a060020a039081169084167ff931edb47c50b4b4104c187b5814a9aef5f709e17e2ecf9617e860cacade929c8360405190815260200160405180910390a35b505050565b600b546101009004600160a060020a031681565b60005433600160a060020a0390811691161461130357600080fd5b600b805460ff1916911515919091179055565b600054600160a060020a031681565b6000808083151561133957600192506114e9565b60065443901061134857600080fd5b600160a060020a03851615801590611372575030600160a060020a031685600160a060020a031614155b151561137d57600080fd5b6113878643610922565b91508382101561139a57600092506114e9565b6000546113af90600160a060020a03166105f3565b1561143957600054600160a060020a0316634a39314987878760405160e060020a63ffffffff8616028152600160a060020a0393841660048201529190921660248201526044810191909152606401602060405180830381600087803b151561141757600080fd5b5af1151561142457600080fd5b50505060405180519050151561143957600080fd5b600160a060020a038616600090815260086020526040902061145d90858403611667565b6114678543610922565b90508381018190101561147957600080fd5b600160a060020a038516600090815260086020526040902061149d90828601611667565b84600160a060020a031686600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8660405190815260200160405180910390a3600192505b50509392505050565b600081831061150157816108c8565b5090919050565b600080600080858054905060001415611524576000935061165e565b85548690600019810190811061153657fe5b6000918252602090912001546001608060020a031685106115935785548690600019810190811061156357fe5b60009182526020909120015470010000000000000000000000000000000090046001608060020a0316935061165e565b8560008154811015156115a257fe5b6000918252602090912001546001608060020a03168510156115c7576000935061165e565b8554600093506000190191505b828211156116245760026001838501010490508486828154811015156115f657fe5b6000918252602090912001546001608060020a0316116116185780925061161f565b6001810391505b6115d4565b858381548110151561163257fe5b60009182526020909120015470010000000000000000000000000000000090046001608060020a031693505b50505092915050565b8154600090819015806116a05750835443908590600019810190811061168957fe5b6000918252602090912001546001608060020a0316105b1561171257835484906116b6826001830161175d565b815481106116c057fe5b600091825260209091200180546001608060020a03858116700100000000000000000000000000000000024382166fffffffffffffffffffffffffffffffff1990931692909217161781559150611757565b83548490600019810190811061172457fe5b600091825260209091200180546001608060020a0380861670010000000000000000000000000000000002911617815590505b50505050565b8154818355818115116112cf576000838152602090206112cf91810190830161082a91905b808211156117965760008155600101611782565b50905600a165627a7a7230582005c9c98a3395f1477580383a230dcb712727fb2333a7981f32c68597082d28050029a165627a7a72305820e228c0f9799f645af5214a70339e7955606e55f64d663d7da3025f86bd7a48120029",
            "sourceMap": "21574:1241:11:-;;;;;;;;;;;;;;;;;;;;;;;22254:559;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;22254:559:11;;-1:-1:-1;;;;22254:559:11;;;;;-1:-1:-1;22254:559:11;;-1:-1:-1;22254:559:11;;;;;;;;;;;;;;;;;;;;22478:11;22501:20;22553:4;22571:12;22597:14;22625:10;22649:13;22676:12;22702:17;22524:209;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;22524:209:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;22524:209:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;22501:232;;22744:8;:25;;;22770:10;22744:37;;;;;;;;;;;;;;;;;;;-1:-1:-1;22744:37:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;22798:8:11;;22254:559;-1:-1:-1;;;;;;;;;22254:559:11:o;21574:1241::-;;;;;;;;;;:::o"
          },
          "methodIdentifiers": {
            "createCloneToken(address,uint256,string,uint8,string,bool)": "5b7b72c1"
          }
        },
        "metadata": "{\"compiler\":{\"version\":\"0.4.21+commit.dfe3193c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":false,\"inputs\":[{\"name\":\"_parentToken\",\"type\":\"address\"},{\"name\":\"_snapshotBlock\",\"type\":\"uint256\"},{\"name\":\"_tokenName\",\"type\":\"string\"},{\"name\":\"_decimalUnits\",\"type\":\"uint8\"},{\"name\":\"_tokenSymbol\",\"type\":\"string\"},{\"name\":\"_transfersEnabled\",\"type\":\"bool\"}],\"name\":\"createCloneToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"createCloneToken(address,uint256,string,uint8,string,bool)\":{\"params\":{\"_decimalUnits\":\"Number of decimals of the new token\",\"_parentToken\":\"Address of the token being cloned\",\"_snapshotBlock\":\"Block of the parent token that will  determine the initial distribution of the clone token\",\"_tokenName\":\"Name of the new token\",\"_tokenSymbol\":\"Token Symbol for the new token\",\"_transfersEnabled\":\"If true, tokens will be able to be transferred\"},\"return\":\"The address of the new token contract\"}}},\"userdoc\":{\"methods\":{\"createCloneToken(address,uint256,string,uint8,string,bool)\":{\"notice\":\"Update the DApp by creating a new token with new functionalities  the msg.sender becomes the controller of this clone token\"}}}},\"settings\":{\"compilationTarget\":{\"minimetoken/contracts/MiniMeToken.sol\":\"MiniMeTokenFactory\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"minimetoken/contracts/Controlled.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\ncontract Controlled {\\n    /// @notice The address of the controller is the only address that can call\\n    ///  a function with this modifier\\n    modifier onlyController { require(msg.sender == controller); _; }\\n\\n    address public controller;\\n\\n    function Controlled() public { controller = msg.sender;}\\n\\n    /// @notice Changes the controller of the contract\\n    /// @param _newController The new controller of the contract\\n    function changeController(address _newController) public onlyController {\\n        controller = _newController;\\n    }\\n}\\n\",\"keccak256\":\"0x770798704985a4588762ea932b913bc1df01b4625ab86c5a7278883bbde44b78\"},\"minimetoken/contracts/MiniMeToken.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\n/*\\n    Copyright 2016, Jordi Baylina\\n\\n    This program is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU General Public License as published by\\n    the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    This program is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU General Public License for more details.\\n\\n    You should have received a copy of the GNU General Public License\\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n */\\n\\n/// @title MiniMeToken Contract\\n/// @author Jordi Baylina\\n/// @dev This token contract's goal is to make it easy for anyone to clone this\\n///  token using the token distribution at a given block, this will allow DAO's\\n///  and DApps to upgrade their features in a decentralized manner without\\n///  affecting the original token\\n/// @dev It is ERC20 compliant, but still needs to under go further testing.\\n\\nimport \\\"./Controlled.sol\\\";\\nimport \\\"./TokenController.sol\\\";\\n\\ncontract ApproveAndCallFallBack {\\n    function receiveApproval(address from, uint256 _amount, address _token, bytes _data) public;\\n}\\n\\n/// @dev The actual token contract, the default controller is the msg.sender\\n///  that deploys the contract, so usually this token will be deployed by a\\n///  token controller contract, which Giveth will call a \\\"Campaign\\\"\\ncontract MiniMeToken is Controlled {\\n\\n    string public name;                //The Token's name: e.g. DigixDAO Tokens\\n    uint8 public decimals;             //Number of decimals of the smallest unit\\n    string public symbol;              //An identifier: e.g. REP\\n    string public version = 'MMT_0.2'; //An arbitrary versioning scheme\\n\\n\\n    /// @dev `Checkpoint` is the structure that attaches a block number to a\\n    ///  given value, the block number attached is the one that last changed the\\n    ///  value\\n    struct  Checkpoint {\\n\\n        // `fromBlock` is the block number that the value was generated from\\n        uint128 fromBlock;\\n\\n        // `value` is the amount of tokens at a specific block number\\n        uint128 value;\\n    }\\n\\n    // `parentToken` is the Token address that was cloned to produce this token;\\n    //  it will be 0x0 for a token that was not cloned\\n    MiniMeToken public parentToken;\\n\\n    // `parentSnapShotBlock` is the block number from the Parent Token that was\\n    //  used to determine the initial distribution of the Clone Token\\n    uint public parentSnapShotBlock;\\n\\n    // `creationBlock` is the block number that the Clone Token was created\\n    uint public creationBlock;\\n\\n    // `balances` is the map that tracks the balance of each address, in this\\n    //  contract when the balance changes the block number that the change\\n    //  occurred is also included in the map\\n    mapping (address => Checkpoint[]) balances;\\n\\n    // `allowed` tracks any extra transfer rights as in all ERC20 tokens\\n    mapping (address => mapping (address => uint256)) allowed;\\n\\n    // Tracks the history of the `totalSupply` of the token\\n    Checkpoint[] totalSupplyHistory;\\n\\n    // Flag that determines if the token is transferable or not.\\n    bool public transfersEnabled;\\n\\n    // The factory used to create new clone tokens\\n    MiniMeTokenFactory public tokenFactory;\\n\\n////////////////\\n// Constructor\\n////////////////\\n\\n    /// @notice Constructor to create a MiniMeToken\\n    /// @param _tokenFactory The address of the MiniMeTokenFactory contract that\\n    ///  will create the Clone token contracts, the token factory needs to be\\n    ///  deployed first\\n    /// @param _parentToken Address of the parent token, set to 0x0 if it is a\\n    ///  new token\\n    /// @param _parentSnapShotBlock Block of the parent token that will\\n    ///  determine the initial distribution of the clone token, set to 0 if it\\n    ///  is a new token\\n    /// @param _tokenName Name of the new token\\n    /// @param _decimalUnits Number of decimals of the new token\\n    /// @param _tokenSymbol Token Symbol for the new token\\n    /// @param _transfersEnabled If true, tokens will be able to be transferred\\n    function MiniMeToken(\\n        address _tokenFactory,\\n        address _parentToken,\\n        uint _parentSnapShotBlock,\\n        string _tokenName,\\n        uint8 _decimalUnits,\\n        string _tokenSymbol,\\n        bool _transfersEnabled\\n    ) public {\\n        tokenFactory = MiniMeTokenFactory(_tokenFactory);\\n        name = _tokenName;                                 // Set the name\\n        decimals = _decimalUnits;                          // Set the decimals\\n        symbol = _tokenSymbol;                             // Set the symbol\\n        parentToken = MiniMeToken(_parentToken);\\n        parentSnapShotBlock = _parentSnapShotBlock;\\n        transfersEnabled = _transfersEnabled;\\n        creationBlock = block.number;\\n    }\\n\\n\\n///////////////////\\n// ERC20 Methods\\n///////////////////\\n\\n    /// @notice Send `_amount` tokens to `_to` from `msg.sender`\\n    /// @param _to The address of the recipient\\n    /// @param _amount The amount of tokens to be transferred\\n    /// @return Whether the transfer was successful or not\\n    function transfer(address _to, uint256 _amount) public returns (bool success) {\\n        require(transfersEnabled);\\n        return doTransfer(msg.sender, _to, _amount);\\n    }\\n\\n    /// @notice Send `_amount` tokens to `_to` from `_from` on the condition it\\n    ///  is approved by `_from`\\n    /// @param _from The address holding the tokens being transferred\\n    /// @param _to The address of the recipient\\n    /// @param _amount The amount of tokens to be transferred\\n    /// @return True if the transfer was successful\\n    function transferFrom(address _from, address _to, uint256 _amount\\n    ) public returns (bool success) {\\n\\n        // The controller of this contract can move tokens around at will,\\n        //  this is important to recognize! Confirm that you trust the\\n        //  controller of this contract, which in most situations should be\\n        //  another open source smart contract or 0x0\\n        if (msg.sender != controller) {\\n            require(transfersEnabled);\\n\\n            // The standard ERC 20 transferFrom functionality\\n            if (allowed[_from][msg.sender] < _amount) return false;\\n            allowed[_from][msg.sender] -= _amount;\\n        }\\n        return doTransfer(_from, _to, _amount);\\n    }\\n\\n    /// @dev This is the actual transfer function in the token contract, it can\\n    ///  only be called by other functions in this contract.\\n    /// @param _from The address holding the tokens being transferred\\n    /// @param _to The address of the recipient\\n    /// @param _amount The amount of tokens to be transferred\\n    /// @return True if the transfer was successful\\n    function doTransfer(address _from, address _to, uint _amount\\n    ) internal returns(bool) {\\n\\n           if (_amount == 0) {\\n               return true;\\n           }\\n\\n           require(parentSnapShotBlock < block.number);\\n\\n           // Do not allow transfer to 0x0 or the token contract itself\\n           require((_to != 0) && (_to != address(this)));\\n\\n           // If the amount being transfered is more than the balance of the\\n           //  account the transfer returns false\\n           var previousBalanceFrom = balanceOfAt(_from, block.number);\\n           if (previousBalanceFrom < _amount) {\\n               return false;\\n           }\\n\\n           // Alerts the token controller of the transfer\\n           if (isContract(controller)) {\\n               require(TokenController(controller).onTransfer(_from, _to, _amount));\\n           }\\n\\n           // First update the balance array with the new value for the address\\n           //  sending the tokens\\n           updateValueAtNow(balances[_from], previousBalanceFrom - _amount);\\n\\n           // Then update the balance array with the new value for the address\\n           //  receiving the tokens\\n           var previousBalanceTo = balanceOfAt(_to, block.number);\\n           require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\\n           updateValueAtNow(balances[_to], previousBalanceTo + _amount);\\n\\n           // An event to make the transfer easy to find on the blockchain\\n           Transfer(_from, _to, _amount);\\n\\n           return true;\\n    }\\n\\n    /// @param _owner The address that's balance is being requested\\n    /// @return The balance of `_owner` at the current block\\n    function balanceOf(address _owner) public constant returns (uint256 balance) {\\n        return balanceOfAt(_owner, block.number);\\n    }\\n\\n    /// @notice `msg.sender` approves `_spender` to spend `_amount` tokens on\\n    ///  its behalf. This is a modified version of the ERC20 approve function\\n    ///  to be a little bit safer\\n    /// @param _spender The address of the account able to transfer the tokens\\n    /// @param _amount The amount of tokens to be approved for transfer\\n    /// @return True if the approval was successful\\n    function approve(address _spender, uint256 _amount) public returns (bool success) {\\n        require(transfersEnabled);\\n\\n        // To change the approve amount you first have to reduce the addresses`\\n        //  allowance to zero by calling `approve(_spender,0)` if it is not\\n        //  already 0 to mitigate the race condition described here:\\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n        require((_amount == 0) || (allowed[msg.sender][_spender] == 0));\\n\\n        // Alerts the token controller of the approve function call\\n        if (isContract(controller)) {\\n            require(TokenController(controller).onApprove(msg.sender, _spender, _amount));\\n        }\\n\\n        allowed[msg.sender][_spender] = _amount;\\n        Approval(msg.sender, _spender, _amount);\\n        return true;\\n    }\\n\\n    /// @dev This function makes it easy to read the `allowed[]` map\\n    /// @param _owner The address of the account that owns the token\\n    /// @param _spender The address of the account able to transfer the tokens\\n    /// @return Amount of remaining tokens of _owner that _spender is allowed\\n    ///  to spend\\n    function allowance(address _owner, address _spender\\n    ) public constant returns (uint256 remaining) {\\n        return allowed[_owner][_spender];\\n    }\\n\\n    /// @notice `msg.sender` approves `_spender` to send `_amount` tokens on\\n    ///  its behalf, and then a function is triggered in the contract that is\\n    ///  being approved, `_spender`. This allows users to use their tokens to\\n    ///  interact with contracts in one function call instead of two\\n    /// @param _spender The address of the contract able to transfer the tokens\\n    /// @param _amount The amount of tokens to be approved for transfer\\n    /// @return True if the function call was successful\\n    function approveAndCall(address _spender, uint256 _amount, bytes _extraData\\n    ) public returns (bool success) {\\n        require(approve(_spender, _amount));\\n\\n        ApproveAndCallFallBack(_spender).receiveApproval(\\n            msg.sender,\\n            _amount,\\n            this,\\n            _extraData\\n        );\\n\\n        return true;\\n    }\\n\\n    /// @dev This function makes it easy to get the total number of tokens\\n    /// @return The total number of tokens\\n    function totalSupply() public constant returns (uint) {\\n        return totalSupplyAt(block.number);\\n    }\\n\\n\\n////////////////\\n// Query balance and totalSupply in History\\n////////////////\\n\\n    /// @dev Queries the balance of `_owner` at a specific `_blockNumber`\\n    /// @param _owner The address from which the balance will be retrieved\\n    /// @param _blockNumber The block number when the balance is queried\\n    /// @return The balance at `_blockNumber`\\n    function balanceOfAt(address _owner, uint _blockNumber) public constant\\n        returns (uint) {\\n\\n        // These next few lines are used when the balance of the token is\\n        //  requested before a check point was ever created for this token, it\\n        //  requires that the `parentToken.balanceOfAt` be queried at the\\n        //  genesis block for that token as this contains initial balance of\\n        //  this token\\n        if ((balances[_owner].length == 0)\\n            || (balances[_owner][0].fromBlock > _blockNumber)) {\\n            if (address(parentToken) != 0) {\\n                return parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock));\\n            } else {\\n                // Has no parent\\n                return 0;\\n            }\\n\\n        // This will return the expected balance during normal situations\\n        } else {\\n            return getValueAt(balances[_owner], _blockNumber);\\n        }\\n    }\\n\\n    /// @notice Total amount of tokens at a specific `_blockNumber`.\\n    /// @param _blockNumber The block number when the totalSupply is queried\\n    /// @return The total amount of tokens at `_blockNumber`\\n    function totalSupplyAt(uint _blockNumber) public constant returns(uint) {\\n\\n        // These next few lines are used when the totalSupply of the token is\\n        //  requested before a check point was ever created for this token, it\\n        //  requires that the `parentToken.totalSupplyAt` be queried at the\\n        //  genesis block for this token as that contains totalSupply of this\\n        //  token at this block number.\\n        if ((totalSupplyHistory.length == 0)\\n            || (totalSupplyHistory[0].fromBlock > _blockNumber)) {\\n            if (address(parentToken) != 0) {\\n                return parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock));\\n            } else {\\n                return 0;\\n            }\\n\\n        // This will return the expected totalSupply during normal situations\\n        } else {\\n            return getValueAt(totalSupplyHistory, _blockNumber);\\n        }\\n    }\\n\\n////////////////\\n// Clone Token Method\\n////////////////\\n\\n    /// @notice Creates a new clone token with the initial distribution being\\n    ///  this token at `_snapshotBlock`\\n    /// @param _cloneTokenName Name of the clone token\\n    /// @param _cloneDecimalUnits Number of decimals of the smallest unit\\n    /// @param _cloneTokenSymbol Symbol of the clone token\\n    /// @param _snapshotBlock Block when the distribution of the parent token is\\n    ///  copied to set the initial distribution of the new clone token;\\n    ///  if the block is zero than the actual block, the current block is used\\n    /// @param _transfersEnabled True if transfers are allowed in the clone\\n    /// @return The address of the new MiniMeToken Contract\\n    function createCloneToken(\\n        string _cloneTokenName,\\n        uint8 _cloneDecimalUnits,\\n        string _cloneTokenSymbol,\\n        uint _snapshotBlock,\\n        bool _transfersEnabled\\n        ) public returns(address) {\\n        if (_snapshotBlock == 0) _snapshotBlock = block.number;\\n        MiniMeToken cloneToken = tokenFactory.createCloneToken(\\n            this,\\n            _snapshotBlock,\\n            _cloneTokenName,\\n            _cloneDecimalUnits,\\n            _cloneTokenSymbol,\\n            _transfersEnabled\\n            );\\n\\n        cloneToken.changeController(msg.sender);\\n\\n        // An event to make the token easy to find on the blockchain\\n        NewCloneToken(address(cloneToken), _snapshotBlock);\\n        return address(cloneToken);\\n    }\\n\\n////////////////\\n// Generate and destroy tokens\\n////////////////\\n\\n    /// @notice Generates `_amount` tokens that are assigned to `_owner`\\n    /// @param _owner The address that will be assigned the new tokens\\n    /// @param _amount The quantity of tokens generated\\n    /// @return True if the tokens are generated correctly\\n    function generateTokens(address _owner, uint _amount\\n    ) public onlyController returns (bool) {\\n        uint curTotalSupply = totalSupply();\\n        require(curTotalSupply + _amount >= curTotalSupply); // Check for overflow\\n        uint previousBalanceTo = balanceOf(_owner);\\n        require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\\n        updateValueAtNow(totalSupplyHistory, curTotalSupply + _amount);\\n        updateValueAtNow(balances[_owner], previousBalanceTo + _amount);\\n        Transfer(0, _owner, _amount);\\n        return true;\\n    }\\n\\n\\n    /// @notice Burns `_amount` tokens from `_owner`\\n    /// @param _owner The address that will lose the tokens\\n    /// @param _amount The quantity of tokens to burn\\n    /// @return True if the tokens are burned correctly\\n    function destroyTokens(address _owner, uint _amount\\n    ) onlyController public returns (bool) {\\n        uint curTotalSupply = totalSupply();\\n        require(curTotalSupply >= _amount);\\n        uint previousBalanceFrom = balanceOf(_owner);\\n        require(previousBalanceFrom >= _amount);\\n        updateValueAtNow(totalSupplyHistory, curTotalSupply - _amount);\\n        updateValueAtNow(balances[_owner], previousBalanceFrom - _amount);\\n        Transfer(_owner, 0, _amount);\\n        return true;\\n    }\\n\\n////////////////\\n// Enable tokens transfers\\n////////////////\\n\\n\\n    /// @notice Enables token holders to transfer their tokens freely if true\\n    /// @param _transfersEnabled True if transfers are allowed in the clone\\n    function enableTransfers(bool _transfersEnabled) public onlyController {\\n        transfersEnabled = _transfersEnabled;\\n    }\\n\\n////////////////\\n// Internal helper functions to query and set a value in a snapshot array\\n////////////////\\n\\n    /// @dev `getValueAt` retrieves the number of tokens at a given block number\\n    /// @param checkpoints The history of values being queried\\n    /// @param _block The block number to retrieve the value at\\n    /// @return The number of tokens being queried\\n    function getValueAt(Checkpoint[] storage checkpoints, uint _block\\n    ) constant internal returns (uint) {\\n        if (checkpoints.length == 0) return 0;\\n\\n        // Shortcut for the actual value\\n        if (_block >= checkpoints[checkpoints.length-1].fromBlock)\\n            return checkpoints[checkpoints.length-1].value;\\n        if (_block < checkpoints[0].fromBlock) return 0;\\n\\n        // Binary search of the value in the array\\n        uint min = 0;\\n        uint max = checkpoints.length-1;\\n        while (max > min) {\\n            uint mid = (max + min + 1)/ 2;\\n            if (checkpoints[mid].fromBlock<=_block) {\\n                min = mid;\\n            } else {\\n                max = mid-1;\\n            }\\n        }\\n        return checkpoints[min].value;\\n    }\\n\\n    /// @dev `updateValueAtNow` used to update the `balances` map and the\\n    ///  `totalSupplyHistory`\\n    /// @param checkpoints The history of data being updated\\n    /// @param _value The new number of tokens\\n    function updateValueAtNow(Checkpoint[] storage checkpoints, uint _value\\n    ) internal  {\\n        if ((checkpoints.length == 0)\\n        || (checkpoints[checkpoints.length -1].fromBlock < block.number)) {\\n               Checkpoint storage newCheckPoint = checkpoints[ checkpoints.length++ ];\\n               newCheckPoint.fromBlock =  uint128(block.number);\\n               newCheckPoint.value = uint128(_value);\\n           } else {\\n               Checkpoint storage oldCheckPoint = checkpoints[checkpoints.length-1];\\n               oldCheckPoint.value = uint128(_value);\\n           }\\n    }\\n\\n    /// @dev Internal function to determine if an address is a contract\\n    /// @param _addr The address being queried\\n    /// @return True if `_addr` is a contract\\n    function isContract(address _addr) constant internal returns(bool) {\\n        uint size;\\n        if (_addr == 0) return false;\\n        assembly {\\n            size := extcodesize(_addr)\\n        }\\n        return size>0;\\n    }\\n\\n    /// @dev Helper function to return a min betwen the two uints\\n    function min(uint a, uint b) pure internal returns (uint) {\\n        return a < b ? a : b;\\n    }\\n\\n    /// @notice The fallback function: If the contract's controller has not been\\n    ///  set to 0, then the `proxyPayment` method is called which relays the\\n    ///  ether and creates tokens as described in the token controller contract\\n    function () public payable {\\n        require(isContract(controller));\\n        require(TokenController(controller).proxyPayment.value(msg.value)(msg.sender));\\n    }\\n\\n//////////\\n// Safety Methods\\n//////////\\n\\n    /// @notice This method can be used by the controller to extract mistakenly\\n    ///  sent tokens to this contract.\\n    /// @param _token The address of the token contract that you want to recover\\n    ///  set to 0 in case you want to extract ether.\\n    function claimTokens(address _token) public onlyController {\\n        if (_token == 0x0) {\\n            controller.transfer(this.balance);\\n            return;\\n        }\\n\\n        MiniMeToken token = MiniMeToken(_token);\\n        uint balance = token.balanceOf(this);\\n        token.transfer(controller, balance);\\n        ClaimedTokens(_token, controller, balance);\\n    }\\n\\n////////////////\\n// Events\\n////////////////\\n    event ClaimedTokens(address indexed _token, address indexed _controller, uint _amount);\\n    event Transfer(address indexed _from, address indexed _to, uint256 _amount);\\n    event NewCloneToken(address indexed _cloneToken, uint _snapshotBlock);\\n    event Approval(\\n        address indexed _owner,\\n        address indexed _spender,\\n        uint256 _amount\\n        );\\n\\n}\\n\\n\\n////////////////\\n// MiniMeTokenFactory\\n////////////////\\n\\n/// @dev This contract is used to generate clone contracts from a contract.\\n///  In solidity this is the way to create a contract from a contract of the\\n///  same class\\ncontract MiniMeTokenFactory {\\n\\n    /// @notice Update the DApp by creating a new token with new functionalities\\n    ///  the msg.sender becomes the controller of this clone token\\n    /// @param _parentToken Address of the token being cloned\\n    /// @param _snapshotBlock Block of the parent token that will\\n    ///  determine the initial distribution of the clone token\\n    /// @param _tokenName Name of the new token\\n    /// @param _decimalUnits Number of decimals of the new token\\n    /// @param _tokenSymbol Token Symbol for the new token\\n    /// @param _transfersEnabled If true, tokens will be able to be transferred\\n    /// @return The address of the new token contract\\n    function createCloneToken(\\n        address _parentToken,\\n        uint _snapshotBlock,\\n        string _tokenName,\\n        uint8 _decimalUnits,\\n        string _tokenSymbol,\\n        bool _transfersEnabled\\n    ) public returns (MiniMeToken) {\\n        MiniMeToken newToken = new MiniMeToken(\\n            this,\\n            _parentToken,\\n            _snapshotBlock,\\n            _tokenName,\\n            _decimalUnits,\\n            _tokenSymbol,\\n            _transfersEnabled\\n            );\\n\\n        newToken.changeController(msg.sender);\\n        return newToken;\\n    }\\n}\\n\",\"keccak256\":\"0x3dba5ff0dd1de9ebff6cd48898e78f7ce7c9996d345c702dca6a3a7d69750ed4\"},\"minimetoken/contracts/TokenController.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\n/// @dev The token controller contract must implement these functions\\ncontract TokenController {\\n    /// @notice Called when `_owner` sends ether to the MiniMe Token contract\\n    /// @param _owner The address that sent the ether to create tokens\\n    /// @return True if the ether is accepted, false if it throws\\n    function proxyPayment(address _owner) public payable returns(bool);\\n\\n    /// @notice Notifies the controller about a token transfer allowing the\\n    ///  controller to react if desired\\n    /// @param _from The origin of the transfer\\n    /// @param _to The destination of the transfer\\n    /// @param _amount The amount of the transfer\\n    /// @return False if the controller does not authorize the transfer\\n    function onTransfer(address _from, address _to, uint _amount) public returns(bool);\\n\\n    /// @notice Notifies the controller about an approval allowing the\\n    ///  controller to react if desired\\n    /// @param _owner The address that calls `approve()`\\n    /// @param _spender The spender in the `approve()` call\\n    /// @param _amount The amount in the `approve()` call\\n    /// @return False if the controller does not authorize the approval\\n    function onApprove(address _owner, address _spender, uint _amount) public\\n        returns(bool);\\n}\\n\",\"keccak256\":\"0xf8bf7de20c0412ab90ec43c1432508a8316e17bd246adffa737e0d779413ff5e\"}},\"version\":1}"
      }
    },
    "minimetoken/contracts/TokenController.sol": {
      "TokenController": {
        "abi": [
          {
            "constant": false,
            "inputs": [
              {
                "name": "_from",
                "type": "address"
              },
              {
                "name": "_to",
                "type": "address"
              },
              {
                "name": "_amount",
                "type": "uint256"
              }
            ],
            "name": "onTransfer",
            "outputs": [
              {
                "name": "",
                "type": "bool"
              }
            ],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_owner",
                "type": "address"
              },
              {
                "name": "_spender",
                "type": "address"
              },
              {
                "name": "_amount",
                "type": "uint256"
              }
            ],
            "name": "onApprove",
            "outputs": [
              {
                "name": "",
                "type": "bool"
              }
            ],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_owner",
                "type": "address"
              }
            ],
            "name": "proxyPayment",
            "outputs": [
              {
                "name": "",
                "type": "bool"
              }
            ],
            "payable": true,
            "stateMutability": "payable",
            "type": "function"
          }
        ],
        "evm": {
          "bytecode": {
            "linkReferences": {},
            "object": "",
            "sourceMap": ""
          },
          "deployedBytecode": {
            "linkReferences": {},
            "object": "",
            "sourceMap": ""
          },
          "methodIdentifiers": {
            "onApprove(address,address,uint256)": "da682aeb",
            "onTransfer(address,address,uint256)": "4a393149",
            "proxyPayment(address)": "f48c3054"
          }
        },
        "metadata": ""
      }
    }
  },
  "errors": [
    {
      "component": "general",
      "formattedMessage": "minimetoken/contracts/MiniMeToken.sol:179:12: Warning: Use of the \"var\" keyword is deprecated.\n           var previousBalanceFrom = balanceOfAt(_from, block.number);\n           ^---------------------^\n",
      "message": "Use of the \"var\" keyword is deprecated.",
      "severity": "warning",
      "sourceLocation": {
        "end": 7393,
        "file": "minimetoken/contracts/MiniMeToken.sol",
        "start": 7370
      },
      "type": "Warning"
    },
    {
      "component": "general",
      "formattedMessage": "minimetoken/contracts/MiniMeToken.sol:195:12: Warning: Use of the \"var\" keyword is deprecated.\n           var previousBalanceTo = balanceOfAt(_to, block.number);\n           ^-------------------^\n",
      "message": "Use of the \"var\" keyword is deprecated.",
      "severity": "warning",
      "sourceLocation": {
        "end": 8058,
        "file": "minimetoken/contracts/MiniMeToken.sol",
        "start": 8037
      },
      "type": "Warning"
    },
    {
      "component": "general",
      "formattedMessage": "giveth-common-contracts/contracts/Owned.sol:42:9: Warning: Invoking events without \"emit\" prefix is deprecated.\n        OwnershipRequested(msg.sender, newOwnerCandidate);\n        ^-----------------------------------------------^\n",
      "message": "Invoking events without \"emit\" prefix is deprecated.",
      "severity": "warning",
      "sourceLocation": {
        "end": 1763,
        "file": "giveth-common-contracts/contracts/Owned.sol",
        "start": 1714
      },
      "type": "Warning"
    },
    {
      "component": "general",
      "formattedMessage": "giveth-common-contracts/contracts/Owned.sol:54:9: Warning: Invoking events without \"emit\" prefix is deprecated.\n        OwnershipTransferred(oldOwner, owner);\n        ^-----------------------------------^\n",
      "message": "Invoking events without \"emit\" prefix is deprecated.",
      "severity": "warning",
      "sourceLocation": {
        "end": 2117,
        "file": "giveth-common-contracts/contracts/Owned.sol",
        "start": 2080
      },
      "type": "Warning"
    },
    {
      "component": "general",
      "formattedMessage": "giveth-common-contracts/contracts/Owned.sol:68:9: Warning: Invoking events without \"emit\" prefix is deprecated.\n        OwnershipTransferred(oldOwner, owner);\n        ^-----------------------------------^\n",
      "message": "Invoking events without \"emit\" prefix is deprecated.",
      "severity": "warning",
      "sourceLocation": {
        "end": 2661,
        "file": "giveth-common-contracts/contracts/Owned.sol",
        "start": 2624
      },
      "type": "Warning"
    },
    {
      "component": "general",
      "formattedMessage": "giveth-common-contracts/contracts/Owned.sol:80:9: Warning: Invoking events without \"emit\" prefix is deprecated.\n        OwnershipRemoved();     \n        ^----------------^\n",
      "message": "Invoking events without \"emit\" prefix is deprecated.",
      "severity": "warning",
      "sourceLocation": {
        "end": 3232,
        "file": "giveth-common-contracts/contracts/Owned.sol",
        "start": 3214
      },
      "type": "Warning"
    },
    {
      "component": "general",
      "formattedMessage": "giveth-common-contracts/contracts/Escapable.sol:62:9: Warning: Invoking events without \"emit\" prefix is deprecated.\n        EscapeHatchBlackistedToken(_token);\n        ^--------------------------------^\n",
      "message": "Invoking events without \"emit\" prefix is deprecated.",
      "severity": "warning",
      "sourceLocation": {
        "end": 2950,
        "file": "giveth-common-contracts/contracts/Escapable.sol",
        "start": 2916
      },
      "type": "Warning"
    },
    {
      "component": "general",
      "formattedMessage": "giveth-common-contracts/contracts/Escapable.sol:83:23: Warning: Using contract member \"balance\" inherited from the address type is deprecated. Convert the contract to \"address\" type to access the member.\n            balance = this.balance;\n                      ^----------^\n",
      "message": "Using contract member \"balance\" inherited from the address type is deprecated. Convert the contract to \"address\" type to access the member.",
      "severity": "warning",
      "sourceLocation": {
        "end": 3790,
        "file": "giveth-common-contracts/contracts/Escapable.sol",
        "start": 3778
      },
      "type": "Warning"
    },
    {
      "component": "general",
      "formattedMessage": "giveth-common-contracts/contracts/Escapable.sol:85:13: Warning: Invoking events without \"emit\" prefix is deprecated.\n            EscapeHatchCalled(_token, balance);\n            ^--------------------------------^\n",
      "message": "Invoking events without \"emit\" prefix is deprecated.",
      "severity": "warning",
      "sourceLocation": {
        "end": 3892,
        "file": "giveth-common-contracts/contracts/Escapable.sol",
        "start": 3858
      },
      "type": "Warning"
    },
    {
      "component": "general",
      "formattedMessage": "giveth-common-contracts/contracts/Escapable.sol:92:9: Warning: Invoking events without \"emit\" prefix is deprecated.\n        EscapeHatchCalled(_token, balance);\n        ^--------------------------------^\n",
      "message": "Invoking events without \"emit\" prefix is deprecated.",
      "severity": "warning",
      "sourceLocation": {
        "end": 4144,
        "file": "giveth-common-contracts/contracts/Escapable.sol",
        "start": 4110
      },
      "type": "Warning"
    },
    {
      "component": "general",
      "formattedMessage": "minimetoken/contracts/MiniMeToken.sol:200:12: Warning: Invoking events without \"emit\" prefix is deprecated.\n           Transfer(_from, _to, _amount);\n           ^---------------------------^\n",
      "message": "Invoking events without \"emit\" prefix is deprecated.",
      "severity": "warning",
      "sourceLocation": {
        "end": 8374,
        "file": "minimetoken/contracts/MiniMeToken.sol",
        "start": 8345
      },
      "type": "Warning"
    },
    {
      "component": "general",
      "formattedMessage": "minimetoken/contracts/MiniMeToken.sol:232:9: Warning: Invoking events without \"emit\" prefix is deprecated.\n        Approval(msg.sender, _spender, _amount);\n        ^-------------------------------------^\n",
      "message": "Invoking events without \"emit\" prefix is deprecated.",
      "severity": "warning",
      "sourceLocation": {
        "end": 9875,
        "file": "minimetoken/contracts/MiniMeToken.sol",
        "start": 9836
      },
      "type": "Warning"
    },
    {
      "component": "general",
      "formattedMessage": "minimetoken/contracts/MiniMeToken.sol:363:9: Warning: Invoking events without \"emit\" prefix is deprecated.\n        NewCloneToken(address(cloneToken), _snapshotBlock);\n        ^------------------------------------------------^\n",
      "message": "Invoking events without \"emit\" prefix is deprecated.",
      "severity": "warning",
      "sourceLocation": {
        "end": 15325,
        "file": "minimetoken/contracts/MiniMeToken.sol",
        "start": 15275
      },
      "type": "Warning"
    },
    {
      "component": "general",
      "formattedMessage": "minimetoken/contracts/MiniMeToken.sol:383:9: Warning: Invoking events without \"emit\" prefix is deprecated.\n        Transfer(0, _owner, _amount);\n        ^--------------------------^\n",
      "message": "Invoking events without \"emit\" prefix is deprecated.",
      "severity": "warning",
      "sourceLocation": {
        "end": 16247,
        "file": "minimetoken/contracts/MiniMeToken.sol",
        "start": 16219
      },
      "type": "Warning"
    },
    {
      "component": "general",
      "formattedMessage": "minimetoken/contracts/MiniMeToken.sol:400:9: Warning: Invoking events without \"emit\" prefix is deprecated.\n        Transfer(_owner, 0, _amount);\n        ^--------------------------^\n",
      "message": "Invoking events without \"emit\" prefix is deprecated.",
      "severity": "warning",
      "sourceLocation": {
        "end": 16977,
        "file": "minimetoken/contracts/MiniMeToken.sol",
        "start": 16949
      },
      "type": "Warning"
    },
    {
      "component": "general",
      "formattedMessage": "minimetoken/contracts/MiniMeToken.sol:498:33: Warning: Using contract member \"balance\" inherited from the address type is deprecated. Convert the contract to \"address\" type to access the member.\n            controller.transfer(this.balance);\n                                ^----------^\n",
      "message": "Using contract member \"balance\" inherited from the address type is deprecated. Convert the contract to \"address\" type to access the member.",
      "severity": "warning",
      "sourceLocation": {
        "end": 20697,
        "file": "minimetoken/contracts/MiniMeToken.sol",
        "start": 20685
      },
      "type": "Warning"
    },
    {
      "component": "general",
      "formattedMessage": "minimetoken/contracts/MiniMeToken.sol:505:9: Warning: Invoking events without \"emit\" prefix is deprecated.\n        ClaimedTokens(_token, controller, balance);\n        ^----------------------------------------^\n",
      "message": "Invoking events without \"emit\" prefix is deprecated.",
      "severity": "warning",
      "sourceLocation": {
        "end": 20921,
        "file": "minimetoken/contracts/MiniMeToken.sol",
        "start": 20879
      },
      "type": "Warning"
    },
    {
      "component": "general",
      "formattedMessage": "./contracts/IForeignGivethBridge.sol:26:5: Warning: Functions in interfaces should be declared external.\n    function withdraw(address recipient, address sideToken, uint amount) public;\n    ^--------------------------------------------------------------------------^\n",
      "message": "Functions in interfaces should be declared external.",
      "severity": "warning",
      "sourceLocation": {
        "end": 1163,
        "file": "./contracts/IForeignGivethBridge.sol",
        "start": 1087
      },
      "type": "Warning"
    },
    {
      "component": "general",
      "formattedMessage": "./contracts/ForeignGivethBridge.sol:196:27: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\n    function proxyPayment(address _owner) public payable returns(bool) {\n                          ^------------^\n",
      "message": "Unused function parameter. Remove or comment out the variable name to silence this warning.",
      "severity": "warning",
      "sourceLocation": {
        "end": 8142,
        "file": "./contracts/ForeignGivethBridge.sol",
        "start": 8128
      },
      "type": "Warning"
    },
    {
      "component": "general",
      "formattedMessage": "./contracts/ForeignGivethBridge.sol:206:25: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\n    function onTransfer(address _from, address _to, uint _amount) public returns(bool) {\n                        ^-----------^\n",
      "message": "Unused function parameter. Remove or comment out the variable name to silence this warning.",
      "severity": "warning",
      "sourceLocation": {
        "end": 8578,
        "file": "./contracts/ForeignGivethBridge.sol",
        "start": 8565
      },
      "type": "Warning"
    },
    {
      "component": "general",
      "formattedMessage": "./contracts/ForeignGivethBridge.sol:206:40: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\n    function onTransfer(address _from, address _to, uint _amount) public returns(bool) {\n                                       ^---------^\n",
      "message": "Unused function parameter. Remove or comment out the variable name to silence this warning.",
      "severity": "warning",
      "sourceLocation": {
        "end": 8591,
        "file": "./contracts/ForeignGivethBridge.sol",
        "start": 8580
      },
      "type": "Warning"
    },
    {
      "component": "general",
      "formattedMessage": "./contracts/ForeignGivethBridge.sol:206:53: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\n    function onTransfer(address _from, address _to, uint _amount) public returns(bool) {\n                                                    ^----------^\n",
      "message": "Unused function parameter. Remove or comment out the variable name to silence this warning.",
      "severity": "warning",
      "sourceLocation": {
        "end": 8605,
        "file": "./contracts/ForeignGivethBridge.sol",
        "start": 8593
      },
      "type": "Warning"
    },
    {
      "component": "general",
      "formattedMessage": "./contracts/ForeignGivethBridge.sol:216:24: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\n    function onApprove(address _owner, address _spender, uint _amount) public returns(bool) {\n                       ^------------^\n",
      "message": "Unused function parameter. Remove or comment out the variable name to silence this warning.",
      "severity": "warning",
      "sourceLocation": {
        "end": 9053,
        "file": "./contracts/ForeignGivethBridge.sol",
        "start": 9039
      },
      "type": "Warning"
    },
    {
      "component": "general",
      "formattedMessage": "./contracts/ForeignGivethBridge.sol:216:40: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\n    function onApprove(address _owner, address _spender, uint _amount) public returns(bool) {\n                                       ^--------------^\n",
      "message": "Unused function parameter. Remove or comment out the variable name to silence this warning.",
      "severity": "warning",
      "sourceLocation": {
        "end": 9071,
        "file": "./contracts/ForeignGivethBridge.sol",
        "start": 9055
      },
      "type": "Warning"
    },
    {
      "component": "general",
      "formattedMessage": "./contracts/ForeignGivethBridge.sol:216:58: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\n    function onApprove(address _owner, address _spender, uint _amount) public returns(bool) {\n                                                         ^----------^\n",
      "message": "Unused function parameter. Remove or comment out the variable name to silence this warning.",
      "severity": "warning",
      "sourceLocation": {
        "end": 9085,
        "file": "./contracts/ForeignGivethBridge.sol",
        "start": 9073
      },
      "type": "Warning"
    }
  ],
  "sources": {
    "./contracts/ForeignGivethBridge.sol": {
      "id": 0
    },
    "./contracts/GivethBridge.sol": {
      "id": 1
    },
    "./contracts/GivethBridgeMock.sol": {
      "id": 2
    },
    "./contracts/IForeignGivethBridge.sol": {
      "id": 3
    },
    "./contracts/lib/FailClosedVault.sol": {
      "id": 4
    },
    "./contracts/lib/Pausable.sol": {
      "id": 5
    },
    "./contracts/lib/Vault.sol": {
      "id": 6
    },
    "giveth-common-contracts/contracts/ERC20.sol": {
      "id": 7
    },
    "giveth-common-contracts/contracts/Escapable.sol": {
      "id": 8
    },
    "giveth-common-contracts/contracts/Owned.sol": {
      "id": 9
    },
    "minimetoken/contracts/Controlled.sol": {
      "id": 10
    },
    "minimetoken/contracts/MiniMeToken.sol": {
      "id": 11
    },
    "minimetoken/contracts/TokenController.sol": {
      "id": 12
    }
  }
}