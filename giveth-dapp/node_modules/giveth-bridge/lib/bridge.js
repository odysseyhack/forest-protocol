'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.testBridge = undefined;

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

require('babel-polyfill');

var _winston = require('winston');

var _winston2 = _interopRequireDefault(_winston);

var _nedb = require('nedb');

var _nedb2 = _interopRequireDefault(_nedb);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _Relayer = require('./Relayer');

var _Relayer2 = _interopRequireDefault(_Relayer);

var _Verifyer = require('./Verifyer');

var _Verifyer2 = _interopRequireDefault(_Verifyer);

require('./promise-polyfill');

var _getWeb = require('./getWeb3');

var _NonceTracker = require('./NonceTracker');

var _NonceTracker2 = _interopRequireDefault(_NonceTracker);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

_winston2.default.level = process.env.LOG_LEVEL || 'info';

// replace log function to prettyPrint objects
_winston2.default.origLog = _winston2.default.log;
_winston2.default.log = function (level) {
    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
    }

    var newArgs = args.map(function (a) {
        if ((typeof a === 'undefined' ? 'undefined' : _typeof(a)) === 'object' && !(a instanceof Error)) {
            return JSON.stringify(a, null, 2);
        }

        return a;
    });

    return this.origLog.apply(this, [level].concat(_toConsumableArray(newArgs)));
};

/**
 * used for testing
 */
var testBridge = exports.testBridge = function testBridge(config) {
    var writeDB = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

    var db = {};
    db.bridge = new _nedb2.default(writeDB ? _path2.default.join(__dirname, config.dataDir, 'bridge-data.db') : undefined);
    db.bridge.loadDatabase();
    db.txs = new _nedb2.default(writeDB ? _path2.default.join(__dirname, config.dataDir, 'bridge-txs.db') : undefined);
    db.txs.loadDatabase();

    var homeWeb3 = (0, _getWeb.getHomeWeb3)(config);
    var foreignWeb3 = (0, _getWeb.getForeignWeb3)(config);

    var addy = homeWeb3.eth.accounts.wallet[0].address;

    return Promise.all([homeWeb3.eth.getTransactionCount(addy, 'pending'), foreignWeb3.eth.getTransactionCount(addy, 'pending')]).then(function (_ref) {
        var _ref2 = _slicedToArray(_ref, 2),
            homeNonce = _ref2[0],
            foreignNonce = _ref2[1];

        var nonceTracker = new _NonceTracker2.default(homeNonce, foreignNonce);

        var relayer = new _Relayer2.default(homeWeb3, foreignWeb3, nonceTracker, config, db);
        var verifyer = new _Verifyer2.default(homeWeb3, foreignWeb3, nonceTracker, config, db);

        return { db: db, relayer: relayer, verifyer: verifyer };
    });
};

/* istanbul ignore next */

exports.default = function (config) {
    var db = {};
    db.bridge = new _nedb2.default(_path2.default.join(config.dataDir, 'bridge-data.db'));
    db.bridge.loadDatabase();
    db.txs = new _nedb2.default(_path2.default.join(config.dataDir, 'bridge-txs.db'));
    db.txs.loadDatabase();

    var homeWeb3 = (0, _getWeb.getHomeWeb3)(config);
    var foreignWeb3 = (0, _getWeb.getForeignWeb3)(config);

    var addy = homeWeb3.eth.accounts.wallet[0].address;

    var relayer = void 0;
    var verifyer = void 0;
    Promise.all([homeWeb3.eth.getTransactionCount(addy, 'pending'), foreignWeb3.eth.getTransactionCount(addy, 'pending')]).then(function (_ref3) {
        var _ref4 = _slicedToArray(_ref3, 2),
            homeNonce = _ref4[0],
            foreignNonce = _ref4[1];

        var nonceTracker = new _NonceTracker2.default(homeNonce, foreignNonce);

        relayer = new _Relayer2.default(homeWeb3, foreignWeb3, nonceTracker, config, db);
        verifyer = new _Verifyer2.default(homeWeb3, foreignWeb3, nonceTracker, config, db);
    }).then(function () {
        return relayer.loadBridgeData();
    }).then(function (bridgeData) {
        if (bridgeData.homeContractAddress !== config.homeBridge) {
            throw new Error('stored homeBridge address does not match config.homeBridge');
        }
        if (bridgeData.foreignContractAddress !== config.foreignBridge) {
            throw new Error('stored foreignBridge address does not match config.foreignBridge');
        }
        relayer.start();

        setTimeout(function () {
            return verifyer.start();
        }, config.pollTime / 2);
    });
};