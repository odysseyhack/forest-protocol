'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _semaphore = require('semaphore');

var _semaphore2 = _interopRequireDefault(_semaphore);

var _winston = require('winston');

var _winston2 = _interopRequireDefault(_winston);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var _class = function () {
    function _class(initialHomeNonce, initialForeignNonce) {
        _classCallCheck(this, _class);

        this.homeNonce = Number(initialHomeNonce);
        this.foreignNonce = Number(initialForeignNonce);
        this.homeSem = (0, _semaphore2.default)();
        this.foreignSem = (0, _semaphore2.default)();
    }

    _createClass(_class, [{
        key: 'obtainNonce',
        value: function obtainNonce() {
            var _this = this;

            var isHomeTx = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

            _winston2.default.debug('Obtaining nonce isHomeTx: ', isHomeTx);
            var sem = isHomeTx ? this.homeSem : this.foreignSem;
            var n = isHomeTx ? this.homeNonce : this.foreignNonce;

            return new Promise(function (resolve) {
                sem.take(function () {
                    var n = isHomeTx ? _this.homeNonce++ : _this.foreignNonce++;
                    _winston2.default.debug('Giving nonce isHomeTx:', isHomeTx, 'nonce:', n);
                    resolve(n);
                });
            });
        }
    }, {
        key: 'releaseNonce',
        value: function releaseNonce(nonce) {
            var isHomeTx = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
            var broadcasted = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

            _winston2.default.debug('Releasing nonce:', nonce, 'isHomeTx:', isHomeTx, 'broadcasted:', broadcasted);
            var n = isHomeTx ? this.homeNonce : this.foreignNonce;

            // n is returned and then incremented
            if (nonce + 1 !== n) {
                throw new Error('attempting to release nonce, but the provided nonce should not have a lock');
            }

            if (isHomeTx) {
                if (!broadcasted) this.homeNonce--;
                this.homeSem.leave();
            } else {
                if (!broadcasted) this.foreignNonce--;
                this.foreignSem.leave();
            }
        }
    }]);

    return _class;
}();

exports.default = _class;